openapi: 3.0.0
servers:
  - url: https://api.{environment}
    variables:
      environment:
        default: allegro.pl
        enum:
          - allegro.pl                    # Production server
          - allegro.pl.allegrosandbox.pl  # Sandbox server
info:
  description:
    'https://developer.allegro.pl/about


    Documentation is generated from [this](https://developer.allegro.pl/swagger.yaml) OpenAPI 3.0 specification file.'
  version: 'latest'
  title: Allegro REST API
  termsOfService: 'https://developer.allegro.pl/rules/'
  contact:
    name: "API Support"
    url: 'https://github.com/allegro/allegro-api/issues'

tags:
  - name: Public offer information
  - name: Public user information
  - name: Categories and parameters
  - name: User's offer information
  - name: Offer management
  - name: Products
  - name: Compatibility List
  - name: Classifieds
  - name: Images and attachments
  - name: Pricing
  - name: Batch offer modification
  - name: Size tables
  - name: Points of service
  - name: Contacts
  - name: Additional services
  - name: After sale services
  - name: Offer variants
  - name: Rebates and promotions
  - name: Promotion campaigns
  - name: Badge campaigns
  - name: Delivery
  - name: Offer tags
  - name: Offer rating
  - name: Order management
  - name: Payments
  - name: Disputes
  - name: Information about user
  - name: Blacklist management
  - name: Auctions and Bidding
  - name: Billing
  - name: Commission refunds
  - name: Charity
  - name: Parcel management

security:
  - bearer-token-for-user: []

paths:
  '/offers/{offerId}/change-price-commands/{commandId}':
    put:
      tags:
        - Offer management
      summary: 'Modify the Buy Now price in an offer'
      description:
        'Use this resource to change the Buy Now price in a single offer. Read more: <a href="../../news/2016-08-01-zmiana-ceny/" target="_blank">PL</a>.'
      operationId: createChangePriceCommandUsingPUT
      parameters:
        - name: offerId
          in: path
          description: The offer identifier.
          required: true
          schema:
            type: string
        - name: commandId
          in: path
          description: The unique command id generated by you.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The command was created successfully and is queued for processing.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ChangePrice'
        default:
          description: >-
            An immediate error response is returned whether the command input data is not valid or there is an internal
            problem with our systems.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
      requestBody:
        content:
          application/vnd.allegro.public.v1+json:
            schema:
              $ref: '#/components/schemas/ChangePriceWithoutOutput'
        required: true
  /sale/offers:
    post:
      tags:
        - Offer management
      summary: 'Create a draft offer'
      description:
        'Use this resource to create a draft offer. Read more: <a href="../../sale/#7-draft-oferty" target="_blank">PL</a> / <a href="../../en/sale/#7-offer-draft" target="_blank">EN</a>.'
      operationId: createOfferUsingPOST
      responses:
        '200':
          description: Offer created successfully
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Offer'
        '400':
          description: Syntactically incorrect request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '422':
          description: Unprocessable Entity
      requestBody:
        $ref: '#/components/requestBodies/Offer'
    get:
      tags:
        - User's offer information
      summary: "Get seller's offers"
      description: >-
        Use this resource to get the list of the seller's offers. You can use different query parameters to filter the list. Read more: <a href="../../my_offers/#jak-pobraÄ‡-moje-oferty-w-rest-api" target="_blank">PL</a> / <a href="../../en/my_offers/#list-of-offers" target="_blank">EN</a>.
      operationId: searchOffersUsingGET
      parameters:
        - name: offer.id
          in: query
          description: Offer ID.
          required: false
          schema:
            type: string
        - name: name
          in: query
          description: The text to search in the offer title.
          required: false
          schema:
            type: string
        - name: sellingMode.price.amount.gte
          in: query
          description: The lower threshold of price.
          required: false
          schema:
            type: number
            example: 9.99
        - name: sellingMode.price.amount.lte
          in: query
          description: The upper threshold of price.
          required: false
          schema:
            type: number
            example: 125.99
        - name: publication.status
          in: query
          description: >-
            The publication status of the offer. Passing more than one value will search for offers with any of the given statuses. By default all statuses are included.
            Example: `publication.status=INACTIVE&publication.status=ACTIVE` - returns offers with status `INACTIVE` or `ACTIVE`.
          required: false
          schema:
            type: array
            items:
              type: string
              enum:
                - INACTIVE
                - ACTIVE
                - ACTIVATING
                - ENDED
        - name: sellingMode.format
          in: query
          required: false
          description: >-
            The offer's selling format. Passing more than one value will search for offers with any of the given formats. By default all formats are included.
            Example: `sellingMode.format=BUY_NOW&sellingMode.format=ADVERTISEMENT` - returns offers with with format `BUY_NOW` or `ADVERTISEMENT`.
          schema:
            type: array
            items:
              type: string
              enum:
                - BUY_NOW
                - ADVERTISEMENT
                - AUCTION
        - name: external.id
          in: query
          description: >-
            The ID from the client's external system. Passing more than one value will search for offers with any of the given IDs. By default no ID is included.
            Example: `external.id=1233&external.id=1234` - returns offers with ID `1233` or `1234`. Single ID length shouldn't exceed 100 characters.
          required: false
          schema:
            type: array
            maxItems: 100
            items:
              type: string
              maxLength: 100
        - name: delivery.shippingRates.id
          in: query
          description: >-
            The ID of shipping rates. Returns offers with given shipping rates ID.
          schema:
            type: string
            format: uuid
        - name: delivery.shippingRates.id.empty
          in: query
          description: Allow to filter offers by existence of shipping rates ID.
          schema:
            type: boolean
        - name: sort
          in: query
          description: >-
            The results' sorting order. No prefix in the value means ascending order. `-` prefix means descending order.
            If you don't provide the sort parameter, the list is sorted by offer creation time, descending.
          required: false
          schema:
            type: string
            enum:
              - sellingMode.price.amount
              - -sellingMode.price.amount
              - stock.sold
              - -stock.sold
              - stock.available
              - -stock.available
        - name: limit
          in: query
          required: false
          description: >-
            The maximum number of offers returned in the response.
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 1000
            default: 20
        - name: offset
          in: query
          required: false
          description: Index of the first returned offer from all search results. Maximum sum of offset and limit is 10 000 000.
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 9999999
        - name: category.id
          in: query
          description: The identifier of the category, where you want to search for offers.
          required: false
          schema:
            type: string
        - name: product.id.empty
          in: query
          description: Allow to filter offers by existence of product ID.
          required: false
          schema:
            type: boolean
        - name: productizationRequired
          in: query
          description: Allow to filter offers from categories where productization is required.
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: The list of offers returned successfully.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/OffersSearchResultDto'
        '400':
          description: The request query parameters are invalid.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
  '/sale/offers/{offerId}':
    put:
      tags:
        - Offer management
      summary: 'Complete a draft offer or edit an offer'
      description:
        'Use this resource to complete a draft offer or edit ongoing offers. Read more: <a href="../../sale/#uzupeÅ‚nij-draft-oferty" target="_blank">PL</a> / <a href="../../en/sale/#new-offer" target="_blank">EN</a>.'
      operationId: updateOfferUsingPUT
      parameters:
        - name: offerId
          in: path
          description: Offer identifier.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Offer updated successfully
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Offer'
        '201':
          description: Created
        '400':
          description: Syntactically incorrect request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '422':
          description: Unprocessable Entity
      requestBody:
        $ref: '#/components/requestBodies/Offer'
    get:
      tags:
        - User's offer information
      summary: 'Get all fields of the particular offer'
      description:
        'Use this resource to retrieve all fields of the particular offer. Read more: <a href="../../sale/#wystaw-podobnÄ…-ofertÄ™" target="_blank">PL</a> / <a href="../../en/sale/#list-a-similar-offer" target="_blank">EN</a>.'
      operationId: getOfferUsingGET
      parameters:
        - name: offerId
          in: path
          description: Offer identifier.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Offer returned successfully
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Offer'
        '400':
          description: Syntactically incorrect request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    delete:
      tags:
        - Offer management
      summary: 'Delete a draft offer'
      description:
        'Use this resource to delete a draft offer. Read more: <a href="../../news/2018-10-09_draft_delete" target="_blank">PL</a> / <a href="../../en/news/2018-10-09_draft_delete" target="_blank">EN</a>.'
      operationId: deleteOfferUsingDELETE
      parameters:
        - name: offerId
          in: path
          description: Offer identifier.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  '/sale/offer-publication-commands/{commandId}':
    put:
      tags:
        - Offer management
      summary: 'Batch offer publish / unpublish'
      description:
        'Use this resource to modify multiple offers publication at once. Read more: <a href="../../sale/#9-publikacja-oferty" target="_blank">PL</a> / <a href="../../en/sale/#9-publish-your-offer" target="_blank">EN</a>.'
      operationId: changePublicationStatusUsingPUT
      parameters:
        - name: commandId
          in: path
          description: Command identifier.
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Command was registered
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/GeneralReport'
        '400':
          description: Semantically incorrect request or provided conditions not correct
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '409':
          description: Command id was already used
        '422':
          description: Unprocessable Entity
      requestBody:
        content:
          application/vnd.allegro.public.v1+json:
            schema:
              $ref: '#/components/schemas/PublicationChangeCommandDto'
        description: publicationChangeCommandDto
        required: true
    get:
      tags:
        - Offer management
      summary: "Publish command summary"
      description:
        'Use this resource to retrieve information about the offer listing statuses. You will receive a summary with
         a number of correctly listed offers and errors. Read more: <a href="../../sale/#zestawienie-zadaÅ„" target="_blank">PL</a> / <a href="../../en/sale/#task-list" target="_blank">EN</a>.'
      operationId: getPublicationReportUsingGET
      parameters:
        - name: commandId
          in: path
          description: Command identifier.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: report was generated and successfully returned
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/GeneralReport'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Command not found
  '/sale/offer-publication-commands/{commandId}/tasks':
    get:
      tags:
        - Offer management
      summary: 'Publish command detailed report'
      description:
        'Use this resource to retrieve information about the offer statuses on the site (Defaults: limit = 100,
         offset = 0). Read more: <a href="../../sale/#informacje-o-publikacji" target="_blank">PL</a> / <a href="../../en/sale/#information-about-publication" target="_blank">EN</a>.'
      operationId: getPublicationTasksUsingGET
      parameters:
        - name: commandId
          in: path
          description: Command identifier.
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: The limit of elements in the response.
          required: false
          schema:
            type: integer
            format: int32
            default: 100
            minimum: 1
            maximum: 1000
        - name: offset
          in: query
          description: The offset of elements in the response.
          required: false
          schema:
            type: integer
            format: int32
            default: 0
            minimum: 0
            maximum: 999
      responses:
        '200':
          description: Task status successfully returned
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/TaskReport'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Command not found
        '422':
          description: Unprocessable Entity
  '/sale/offer-classifieds-packages/{offerId}':
    get:
      tags:
        - Classifieds
      summary: Get classified packages assigned to an offer
      description:
        'Use this resource to retrieve classified packages currently assigned to an offer. Read more: <a href="../../advertisement/#przypisane-pakiety" target="_blank">PL</a> / <a href="../../en/advertisement/#promo-options-assigned-to-ad" target="_blank">EN</a>.'
      operationId: getClassifiedPackagesUsingGET
      parameters:
        - name: offerId
          in: path
          description: Offer ID.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Packages returned successfully
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ClassifiedResponse'
        '400':
          description: Bad request
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
        '401':
          description: Unauthorized
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/AuthError'
        '403':
          description: Forbidden
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
        '404':
          description: Classified not found
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
    put:
      tags:
        - Classifieds
      summary: Assign packages to a classified
      description:
        'Use this resource to assign classified packages to an offer. Read more: <a href="../../advertisement/#8-pakiet-i-opcje-dodatkowe" target="_blank">PL</a> / <a href="../../en/advertisement/#8-package-and-additional-options" target="_blank">EN</a>.'
      operationId: assignClassifiedPackagesUsingPUT
      parameters:
        - name: offerId
          in: path
          description: The offer ID.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Packages have been successfully assigned to the classified.
        '400':
          description: Bad request
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
        '401':
          description: Unauthorized
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/AuthError'
        '403':
          description: Forbidden
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
        '422':
          description: Validation error
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
      requestBody:
        description: Packages that should be assigned to the classified.
        required: true
        content:
          application/vnd.allegro.public.v1+json:
            schema:
              $ref: '#/components/schemas/ClassifiedPackages'
  '/sale/classifieds-packages':
    get:
      tags:
        - Classifieds
      summary: Get configurations of packages
      description:
        'Use this resource to retrieve configurations of classifieds packages for a category. Read more: <a href="../../advertisement/#lista-pakietÃ³w-i-opcji-dodatkowych" target="_blank">PL</a> / <a href="../../en/advertisement/#list-of-promo-options" target="_blank">EN</a>.'
      operationId: getClassifiedPackageConfigurationsForCategoryUsingGET
      parameters:
        - name: category.id
          in: query
          description: The category ID.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Package configurations for the category returned successfully.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ClassifiedPackageConfigs'
        '400':
          description: Bad request
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
        '401':
          description: Unauthorized
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/AuthError'
  '/sale/classifieds-packages/{packageId}':
    get:
      tags:
        - Classifieds
      summary: Get the configuration of a package
      description:
        'Use this resource to retrieve the configuration of a classifieds package. Read more: <a href="../../advertisement/#lista-pakietÃ³w-i-opcji-dodatkowych" target="_blank">PL</a> / <a href="../../en/advertisement/#list-of-promo-options" target="_blank">EN</a>.'
      operationId: getClassifiedPackageConfigurationUsingGET
      parameters:
        - name: packageId
          in: path
          description: The classifieds package ID.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The package's configuration returned successfully.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ClassifiedPackageConfig'
        '400':
          description: Bad request
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
        '401':
          description: Unauthorized
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/AuthError'
        '404':
          description: The classifieds package not found.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
  '/users/{userId}/ratings-summary':
    get:
      tags:
        - Public user information
      summary: "Get any user's ratings summary"
      description:
        'Use this resource to receive feedback statistics. <a href="../../news/2017-10-09-news_informacje_o_ocenach/" target="_blank">Read more</a>.'
      operationId: getUserSummaryUsingGET
      parameters:
        - name: userId
          in: path
          description: The ID of the user.
          required: true
          schema:
            type: string
            example: "41846511"
      responses:
        '200':
          description: Feedback statistics returned successfully.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/UserRatingSummaryResponse'
        '401':
          description: Unauthorized
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
        '403':
          description: Forbidden
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
        '404':
          description: User with the given ID not found or user is not a seller.
  /sale/user-ratings:
    get:
      tags:
        - Information about user
      summary: "Get the user's ratings"
      description:
        'Use this resource to receive your sales score. <a href="../../news/2017-10-09-news_informacje_o_ocenach/" target="_blank">Read more</a>.'
      operationId: getUserRatingsUsingGET
      parameters:
        - name: recommended
          in: query
          description: Filter by recommended.
          required: false
          schema:
            type: string
            enum:
              - 'true'
              - 'false'
        - name: offset
          in: query
          description: The offset of elements in the response.
          required: false
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 20000
            default: 0
        - name: limit
          in: query
          description: The limit of elements in the response.
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: OK
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/UserRatingListResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /sale/user-ratings/{ratingId}/answer:
    put:
      tags:
        - Information about user
      summary: "Answer for user's rating"
      description:
        'Use this resource to answer for received rating.'
      operationId: answerUserRatingUsingPUT
      parameters:
        - name: ratingId
          in: path
          description: ID of the rating.
          required: true
          schema:
            type: string
            example: "5df0a6d1ef437e00255572a1"
      responses:
        '200':
          description: OK
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Answer'
        '400':
          description: Bad request
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      requestBody:
        $ref: '#/components/requestBodies/UserRatingAnswerRequest'
  /sale/user-ratings/{ratingId}/removal:
    put:
      tags:
        - Information about user
      summary: "Request removal of user's rating"
      description:
        'Use this resource to request removal of received rating.'
      operationId: userRatingRemovalUsingPUT
      parameters:
        - name: ratingId
          in: path
          description: ID of the rating.
          required: true
          schema:
            type: string
            example: "5df0a6d1ef437e00255572a1"
      responses:
        '200':
          description: OK
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Removal'
        '400':
          description: Bad request
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      requestBody:
        $ref: '#/components/requestBodies/UserRatingRemovalRequest'
  /me:
    get:
      tags:
        - Information about user
      summary: "Get basic information about user"
      description:
        'Use this resource when you need basic information about authenticated user.'
      operationId: meGET
      responses:
        '200':
          description: OK
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/MeResponse'
        '401':
          description: Unauthorized
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/AuthError'
        '403':
          description: Forbidden - when token is without user context
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
  /sale/offer-additional-services/groups:
    post:
      tags:
        - Additional services
      summary: 'Create additional services group'
      description:
        'Use this resource to create a group of additional services. <a href="../../news/2017-10-25-news_uslugi_dodatkowe/#2" target="_blank">Read more</a>.'
      operationId: createAdditionalServicesGroupUsingPOST
      responses:
        '201':
          description: OK
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/AdditionalServicesGroupResponse'
        '401':
          description: Unauthorized
        '422':
          description: Unprocessable Entity
      requestBody:
        $ref: '#/components/requestBodies/AdditionalServicesGroupRequest'
    get:
      tags:
        - Additional services
      summary: "Get the user's additional services groups"
      description:
        'Use this resource to retrieve a list of groups with additional services available to a given user which you
         may assign to offers. <a href="../../news/2017-10-25-news_uslugi_dodatkowe/#4" target="_blank">Read more</a>.'
      operationId: getListOfAdditionalServicesGroupsUsingGET
      parameters:
        - name: offset
          in: query
          description: The offset of elements in the response.
          required: false
          schema:
            type: integer
            format: int32
            default: 0
            minimum: 0
        - name: limit
          in: query
          description: The limit of elements in the response.
          required: false
          schema:
            type: integer
            format: int32
            default: 100
            minimum: 1
            maximum: 1000
      responses:
        '200':
          description: OK
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/AdditionalServicesGroups'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  /sale/loyalty/promotions:
    post:
      tags:
        - Rebates and promotions
      summary: "Create a new promotion"
      description: >-
        This endpoint creates a new promotion. You can define the following types of promotions:

        1. Wholesale price list
        <br>
        Only company users will see and be eligible for this type of promotion.
        In order to create a wholesale price list, you also have to be a company user. Define a promotion with a single benefit
        of type **WHOLESALE_PRICE_LIST** and a single criterion of type **OFFERS_ASSIGNED_EXTERNALLY**.
        The benefit specification should contain a name (it will be visible to you only) and a list of discount thresholds.
        Threshold's quantity defines the minimum number of units of an offer for which the threshold is applicable (`lowerBound`).
        Threshold's discount defines the discount percentage applied when the threshold is applied. The percentage's fractional part must be equal to 0.
        Only the highest applicable threshold (if any) will be applied to the total price of units of the offer bought.
        A threshold with higher quantity than another threshold in the price list must also have a higher discount.
        In order to assign offers to a wholesale price list, use `discounts` field in <a href="#operation/modificationCommandUsingPUT">batch offer modification</a>.

        2. Bundle
        <br>
        In order to create a new bundle, you have to define a
         promotion with a single benefit of type **ORDER_FIXED_DISCOUNT** and a single criterion of type **CONTAINS_OFFERS**. In the benefit specification you have to declare the discount amount that you want to be deducted from the sum of bundled offers prices. In the offer criterion you need to pass a list of offers that are to be grouped as a bundle. For each offer you have to define a fixed quantity (that many pieces of your offer will be part of the bundle) and you also have to set a promotionEntryPoint flag (offers with this flag set to true will have a section that allows the users to purchase your bundle).

        3. Multipack
        <br>
        In order to create a new multipack, you have to define a promotion with a single benefit of type **UNIT_PERCENTAGE_DISCOUNT** and a single criterion of type **CONTAINS_OFFERS**. The benefit specification should contain a configuration section with a percentage which indicates the specific discount for the discounted offer. This percentage should be an integer value greater than 15 for quantity 2, greater than 30 for quantity 3, greater than 40 for quantity 4, greater than 50 for quantity 5 and lower than or equal to 100. The specification should also contain a trigger section with a field forEachQuantity that defines the amount of items in the multipack which is necessary to trigger the benefit. Additionally, the discountedNumber field must be set to 1 by default as you can only discount one unit in a multipack. Finally, the offer criterion specifies the offer for which the multipack promotion will take effect.

        4. Cross-offer multipack
        <br>
        A cross-offer multipack is created in the same fashion as a standard multipack. The only difference is that you need to pass
        more than 1 offer in the offer criterion section. This group of offers is then considered as a pool from which users can
        pick and choose forEachQuantity offers and the cheapest of them gets a discount.


        Read more about <a href="../../news/2017-10-18-news_promocyjne_zestawy_ofert/" target="_blank">bundles</a>, <a href="../../news/2018-02-01-rabaty_ilosciowe/" target="_blank">multipack</a> and <a href="../../news/2018-10-08-rabaty_ilosciowe/" target="_blank">cross-offer multipack</a>.
      operationId: createPromotionUsingPOST_1
      responses:
        '201':
          description: Successfully created the requested promotion
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/SellerRebateDto'
              examples:
                wholesale-price-list:
                  summary: Wholesale Price List
                  value:
                    status: "ACTIVE"
                    createdAt: "2019-05-12T10:02:31.123Z"
                    id: "72c40ffb-6127-4719-a473-867bf5775601"
                    benefits:
                      - specification:
                          type: WHOLESALE_PRICE_LIST
                          name: "Cardboard boxes"
                          thresholds:
                            - quantity:
                                lowerBound: 2000
                              discount:
                                percentage: "5"
                            - quantity:
                                lowerBound: 4000
                              discount:
                                percentage: "10"
                            - quantity:
                                lowerBound: 6000
                              discount:
                                percentage: "15"
                    offerCriteria:
                      - type: OFFERS_ASSIGNED_EXTERNALLY
                bundle:
                  summary: Bundle
                  value:
                    status: "ACTIVE"
                    createdAt: "2019-05-12T10:02:31.123Z"
                    id: "72c40ffb-6127-4719-a473-867bf5775601"
                    benefits:
                      - specification:
                          type: ORDER_FIXED_DISCOUNT
                          value:
                            amount: '10.00'
                            currency: PLN
                    offerCriteria:
                      - type: CONTAINS_OFFERS
                        offers:
                          - id: '1122334455'
                            quantity: 2
                            promotionEntryPoint: true
                          - id: '2233445566'
                            quantity: 1
                            promotionEntryPoint: false
                multipack:
                  summary: Multipack
                  value:
                    status: "ACTIVE"
                    createdAt: "2019-05-12T10:02:31.123Z"
                    id: "72c40ffb-6127-4719-a473-867bf5775601"
                    benefits:
                      - specification:
                          type: UNIT_PERCENTAGE_DISCOUNT
                          configuration:
                            percentage: 100
                          trigger:
                            forEachQuantity: 3
                            discountedNumber: 1
                    offerCriteria:
                      - type: CONTAINS_OFFERS
                        offers:
                          - id: '1122334455'
                cross-offer-multipack:
                  summary: Cross-offer Multipack
                  value:
                    status: "ACTIVE"
                    createdAt: "2019-05-12T10:02:31.123Z"
                    id: "72c40ffb-6127-4719-a473-867bf5775601"
                    benefits:
                      - specification:
                          type: UNIT_PERCENTAGE_DISCOUNT
                          configuration:
                            percentage: 100
                          trigger:
                            forEachQuantity: 3
                            discountedNumber: 1
                    offerCriteria:
                      - type: CONTAINS_OFFERS
                        offers:
                          - id: '1122334455'
                          - id: '2233445566'
        '400':
          description: Bad request
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
        '403':
          description: >-
            Forbidden action
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
        '422':
          description: >-
            Validation failed â€“ request had correct syntax, but violated validation rules
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
      requestBody:
        content:
          application/vnd.allegro.public.v1+json:
            schema:
              $ref: '#/components/schemas/SellerCreateRebateRequestDto'
            examples:
              wholesale-price-list:
                summary: Wholesale Price List
                value:
                  benefits:
                    - specification:
                        type: WHOLESALE_PRICE_LIST
                        name: "Cardboard boxes"
                        thresholds:
                          - quantity:
                              lowerBound: 2000
                            discount:
                              percentage: "5"
                          - quantity:
                              lowerBound: 4000
                            discount:
                              percentage: "10"
                          - quantity:
                              lowerBound: 6000
                            discount:
                              percentage: "15"
                  offerCriteria:
                    - type: OFFERS_ASSIGNED_EXTERNALLY
              bundle:
                summary: Bundle
                value:
                  benefits:
                    - specification:
                        type: ORDER_FIXED_DISCOUNT
                        value:
                          amount: '10.00'
                          currency: PLN
                  offerCriteria:
                    - type: CONTAINS_OFFERS
                      offers:
                        - id: '1122334455'
                          quantity: 2
                          promotionEntryPoint: true
                        - id: '2233445566'
                          quantity: 1
                          promotionEntryPoint: false
              multipack:
                summary: Multipack
                value:
                  benefits:
                    - specification:
                        type: UNIT_PERCENTAGE_DISCOUNT
                        configuration:
                          percentage: 100
                        trigger:
                          forEachQuantity: 3
                          discountedNumber: 1
                  offerCriteria:
                    - type: CONTAINS_OFFERS
                      offers:
                        - id: '1122334455'
              cross-offer-multipack:
                summary: Cross-offer Multipack
                value:
                  benefits:
                    - specification:
                        type: UNIT_PERCENTAGE_DISCOUNT
                        configuration:
                          percentage: 100
                        trigger:
                          forEachQuantity: 3
                          discountedNumber: 1
                  offerCriteria:
                    - type: CONTAINS_OFFERS
                      offers:
                        - id: '1122334455'
                        - id: '2233445566'
        required: true
    get:
      tags:
        - Rebates and promotions
      summary: "Get the user's list of promotions"
      description: >-
        <p>Get a list of promotions defined by the authorized user.</p>

        <p>Restrictions:</p>
        <p>Sum of limit and offset must be equal to or lower than 50000. Limit must be equal to or lower than 5000.</p>
        <p>Example:</p>
        <p>offset = 49950 and limit = 50 will return promotions</p>
        <p>offset = 49950 and limit = 51 will return 422 http error</p>
        <p>offset = 0 and limit = 5000 will return promotions</p>
        <p>offset = 0 and limit = 5001 will return 422 http error</p>

        <p>Read more about <a href="../../news/2017-10-18-news_promocyjne_zestawy_ofert/#2" target="_blank">Bundles</a>
        and <a href="../../news/2018-02-01-rabaty_ilosciowe/#2" target="_blank">Multipack</a>.</p>
      operationId: listSellerPromotionsUsingGET_1
      parameters:
        - name: limit
          in: query
          description: Limit of promotions per page.
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 5000
            default: 50
        - name: offset
          in: query
          description: Distance between the beginning of the document and the point from which promotions are returned.
          required: false
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 49999
            default: 0
        - name: offer.id
          in: query
          description: Filter by offer id. No promotions with `OFFERS_ASSIGNED_EXTERNALLY` criteria will be returned if this parameter is present.
          schema:
            type: string
          example: "8226673525"
        - name: promotionType
          in: query
          description: Filter by promotion type.
          schema:
            type: string
            enum:
              - BUNDLE
              - MULTIPACK
              - CROSS_MULTIPACK
      responses:
        '200':
          description: Successfully returned the requested list of promotions
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/SellerRebatesDto'
        '400':
          description: Bad request
        '401':
          description: Unauthorized action
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/AuthError'
        '404':
          description: User id not found
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
        '422':
          description: Restrictions were not satisfied
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
  /sale/loyalty/promotions/{promotionId}:
    get:
      tags:
        - Rebates and promotions
      summary: "Get a promotion data by id"
      description:
        'Use this resource to returns the requested promotion. You need to use its unique id.
         Read more about <a href="../../news/2017-10-18-news_promocyjne_zestawy_ofert/#3" target="_blank">bundles</a>
         and <a href="../../news/2018-02-01-rabaty_ilosciowe/#3" target="_blank">multipack</a>.'
      operationId: getPromotionUsingGET
      parameters:
        - name: promotionId
          in: path
          description: Promotion identifier.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully returned the requested promotion
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/SellerRebateDto'
        '404':
          description: Promotion not found
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
    put:
      tags:
        - Rebates and promotions
      summary: "Modify a promotion"
      description: >-
        Use this resource to update a promotion by its unique id.
        Only wholesale price lists can be updated. Benefit type cannot be changed.
      operationId: updatePromotionUsingPUT
      parameters:
        - name: promotionId
          in: path
          description: Promotion identifier.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully updated the requested promotion
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/SellerRebateDto'
              examples:
                wholesale-price-list:
                  summary: Wholesale Price List
                  value:
                    status: "ACTIVE"
                    createdAt: "2019-05-12T10:02:31.123Z"
                    id: "72c40ffb-6127-4719-a473-867bf5775601"
                    benefits:
                      - specification:
                          type: WHOLESALE_PRICE_LIST
                          name: "Cardboard boxes - new version"
                          thresholds:
                            - quantity:
                                lowerBound: 1500
                              discount:
                                percentage: "6"
                            - quantity:
                                lowerBound: 3000
                              discount:
                                percentage: "11"
                            - quantity:
                                lowerBound: 4500
                              discount:
                                percentage: "16"
                    offerCriteria:
                      - type: OFFERS_ASSIGNED_EXTERNALLY
        '400':
          description: Bad request
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
        '403':
          description: >-
            Forbidden action
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
        '422':
          description: >-
            Validation failed â€“ request had correct syntax, but violated validation rules
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
      requestBody:
        content:
          application/vnd.allegro.public.v1+json:
            schema:
              $ref: '#/components/schemas/SellerCreateRebateRequestDto'
            examples:
              wholesale-price-list:
                summary: Wholesale Price List
                value:
                  benefits:
                    - specification:
                        type: WHOLESALE_PRICE_LIST
                        name: "Cardboard boxes - new version"
                        thresholds:
                          - quantity:
                              lowerBound: 1500
                            discount:
                              percentage: "6"
                          - quantity:
                              lowerBound: 3000
                            discount:
                              percentage: "11"
                          - quantity:
                              lowerBound: 4500
                            discount:
                              percentage: "16"
                  offerCriteria:
                    - type: OFFERS_ASSIGNED_EXTERNALLY
        required: true
    delete:
      tags:
        - Rebates and promotions
      summary: "Deactivate a promotion by id"
      description:
        'Use this resource to deactivate the requested promotion. You need to use its unique id.
         Read more about <a href="../../news/2017-10-18-news_promocyjne_zestawy_ofert/#4" target="_blank">bundles</a>
         and <a href="../../news/2018-02-01-rabaty_ilosciowe/#4" target="_blank">multipack</a>.'
      operationId: deactivatePromotionUsingDELETE
      parameters:
        - name: promotionId
          in: path
          description: Promotion identifier.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successfully deactivated the requested promotion
        '404':
          description: Promotion not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
        '422':
          description: Promotion cannot be reactivated
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
  /sale/loyalty/promotion-campaigns:
    post:
      tags:
        - Promotion campaigns
      summary: "Create an application for a promotion campaign"
      description: >-
        For an additional fee, you can place a discount mark on a list of
        offers.
                You have to define promotion id and campaign section giving LISTING_BADGE as the id.
                Your promotion campaign application will be verified and you will be notified about the verification status via e-mail.
                Fees will be charged in accordance with Annex No. 1 to the Daily deals zone regulations.
                <a href="../../offer_bundles/#11" target="_blank">Read more</a>.

      operationId: addPromotionToCampaignUsingPOST
      responses:
        '202':
          description: Promotion campaign application created successfully
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/PromotionCampaignResponseDto'
        '400':
          description: Bad request
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
        '401':
          description: Unauthorized
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/AuthError'
        '403':
          description: Forbidden
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
        '422':
          description: >-
            Validation failed - your request was correct, but the promotion
            campaign application could not be created.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
      requestBody:
        content:
          application/vnd.allegro.public.v1+json:
            schema:
              $ref: '#/components/schemas/PromotionCampaignRequestDto'
        description: request
        required: true
    get:
      tags:
        - Promotion campaigns
      summary: "Get the user's promotion campaigns"
      description: >-
        Use this resource to retrieve promotion campaigns. You can find promotion campaign by
        promotion id. <a href="../../offer_bundles/#13" target="_blank">Read more</a>.
      operationId: getPromotionCampaignsUsingGET
      parameters:
        - name: promotion.id
          in: query
          description: The promotion unique id.
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: The limit of elements in the response.
          required: false
          schema:
            type: integer
            format: int32
            default: 50
        - name: offset
          in: query
          description: The offset of elements in the response.
          required: false
          schema:
            type: integer
            format: int32
            default: 0
      responses:
        '200':
          description: Active or suspended promotion campaigns returned successfully
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/PromotionCampaignsResponseDto'
        '401':
          description: Unauthorized
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/AuthError'
        '403':
          description: Forbidden
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
        '404':
          description: Promotion campaign not found
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
    delete:
      tags:
        - Promotion campaigns
      summary: "Delete a campaign in a promotion"
      description:
        'Use this resource to delete campaign from promotion by promotion id and campaign id.
         <a href="../../offer_bundles/#16" target="_blank">Read more</a>.'
      operationId: deleteCampaignFromPromotionUsingDELETE
      parameters:
        - name: promotion.id
          in: query
          description: The promotion unique id.
          required: true
          schema:
            type: string
        - name: campaign.id
          in: query
          description: The campaign unique id.
          required: true
          schema:
            type: string
      responses:
        '202':
          description: Campaign deletion requested successfully
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthError'
        '403':
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
        '404':
          description: Promotion not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
        '422':
          description: Campaign cannot be deleted
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
  '/sale/loyalty/promotion-campaign-applications/{applicationId}':
    get:
      tags:
        - Promotion campaigns
      summary: "Get an application for promotion campaign"
      description:
        'Use this resource to retrieve promotion campaign application. You need to use its unique id.
         <a href="../../offer_bundles/#12" target="_blank">Read more</a>.'
      operationId: getPromotionCampaignApplicationUsingGET
      parameters:
        - name: applicationId
          in: path
          description: The application unique id.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully returned promotion campaign application
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                type: object
        '303':
          description: Promotion campaign application verified and accepted
        '401':
          description: Unauthorized
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/AuthError'
        '403':
          description: Forbidden
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
        '404':
          description: Promotion campaign application not found
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
    delete:
      tags:
        - Promotion campaigns
      summary: "Delete an application for promotion campaign"
      description: >-
        Use this resource to delete promotion campaign application by application id. You need to
        use its unique id. <a href="../../offer_bundles/#15" target="_blank">Read more</a>.
      operationId: deletePromotionCampaignApplicationUsingDELETE
      parameters:
        - name: applicationId
          in: path
          description: The application unique id.
          required: true
          schema:
            type: string
      responses:
        '202':
          description: Promotion campaign application deletion requested successfully
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthError'
        '403':
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
        '404':
          description: Promotion campaign application not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
        '422':
          description: Promotion campaign application cannot be deleted
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
  /pricing/fee-preview:
    post:
      tags:
        - Pricing
      summary: "Preview offer fees"
      description: >-
        This endpoint calculates fees for a provided offer conditions.

        The quotation is estimated and based on the current configuration of the
        Allegro price list and the data entered in this API.

        The stated price does not include package discounts.

        The rules of charging and amount of charges are described in the Allegro
        regulations in Appendix 4.

        The final amount of the fee for the offer will be available after
        approval under the tab: My Account> Accounts> History.
        Read more: <a href="../../charges/#kalkulator-opÅ‚at" target="_blank">PL</a> / <a href="../../en/charges/#fee-calculator" target="_blank">EN</a>.
      operationId: previewFeesPublicAPIUsingPOST
      responses:
        '200':
          description: Returns applicable fees
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Wraps_listing_and_commissions_fees'
        '400':
          description: Bad request
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
        '422':
          description: >-
            Server understands the content but can not process the requested
            data (example not existing categoryId)
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
      requestBody:
        content:
          application/vnd.allegro.public.v1+json:
            schema:
              $ref: '#/components/schemas/Wrapper_type_for_preview_conditions'
        description: command
        required: true
  /pricing/offer-fee-preview:
    post:
      tags:
        - Pricing
      summary: 'Calculate fee and commission for an offer'
      description:
        'Provides information about fee and commission for an offer.'
      operationId: calculateFeePreviewUsingPOST
      responses:
        '200':
          description: Fee calculated successfully.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/FeePreviewResponse'
        '400':
          description: Bad request
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
        '401':
          description: Unauthorized
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/AuthError'
        '422':
          description: Unprocessable Entity
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
      requestBody:
        content:
          application/vnd.allegro.public.v1+json:
            schema:
              $ref: '#/components/schemas/PublicOfferPreviewRequest'
        required: true
  '/sale/offer-modification-commands/{commandId}':
    put:
      tags:
        - Batch offer modification
      summary: 'Batch offer modification'
      description:
        'Use this resource to modify multiple offers at once. Read more: <a href="../../news/2018-04-19-news_grupowa_edycja_ofert_update/#1" target="_blank">PL</a> / <a href="../../en/news/2018-04-19-news_grupowa_edycja_ofert_update/#1" target="_blank">EN</a>.'
      operationId: modificationCommandUsingPUT
      parameters:
        - name: commandId
          in: path
          description: Command identifier.
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Command was registered
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/GeneralReport'
        '400':
          description: Semantically incorrect request or provided conditions not correct
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '409':
          description: Command id was already used
        '422':
          description: Unprocessable Entity
      requestBody:
        content:
          application/vnd.allegro.public.v1+json:
            schema:
              $ref: '#/components/schemas/OfferChangeCommand'
        description: offerChangeCommandDto
        required: true
    get:
      tags:
        - Batch offer modification
      summary: "Modification command summary"
      description:
        'Use this resource to find out how many offers were edited within one {commandId}. You will receive a summary
         with a number of successfully edited offers. Read more: <a href="../../news/2018-04-19-news_grupowa_edycja_ofert_update/#2" target="_blank">PL</a> / <a href="../../en/news/2018-04-19-news_grupowa_edycja_ofert_update/#2" target="_blank">EN</a>.'
      operationId: getGeneralReportUsingGET
      parameters:
        - name: commandId
          in: path
          description: Command identifier.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: report was generated and successfully returned
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/GeneralReport'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Command not found
  '/sale/offer-modification-commands/{commandId}/tasks':
    get:
      tags:
        - Batch offer modification
      summary: "Modification command detailed report"
      description:
        'Use this resource to retrieve a detailed summary of changes introduced within one {commandId} (defaults:
         limit = 100, offset = 0). Read more: <a href="../../news/2018-04-19-news_grupowa_edycja_ofert_update/#3" target="_blank">PL</a> / <a href="../../en/news/2018-04-19-news_grupowa_edycja_ofert_update/#3" target="_blank">EN</a>.'
      operationId: getTasksUsingGET
      parameters:
        - name: commandId
          in: path
          description: Command identifier.
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: The limit of elements in the response.
          required: false
          schema:
            type: integer
            format: int32
            default: 100
            minimum: 1
            maximum: 1000
        - name: offset
          in: query
          description: The offset of elements in the response.
          required: false
          schema:
            type: integer
            format: int32
            default: 0
            minimum: 0
            maximum: 999
      responses:
        '200':
          description: Task status successfully returned
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/TaskReport'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Command not found
        '422':
          description: Unprocessable Entity
  '/sale/offer-price-change-commands/{commandId}':
    put:
      tags:
        - Batch offer modification
      summary: "Batch offer price modification"
      operationId: priceModificationCommandUsingPUT
      description: >-
        Change price of offers. Read more: <a href="../../my_offers/#cena" target="_blank">PL</a> / <a href="../../en/my_offers/#price" target="_blank">EN</a>.
      parameters:
        - name: commandId
          in: path
          description: Command identifier.
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Command was registered
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/GeneralReport'
        '400':
          description: Semantically incorrect request or provided conditions not correct
        '401':
          description: Unauthorized
        '409':
          description: Command id was already used
        '422':
          description: Unprocessable Entity
      requestBody:
        content:
          application/vnd.allegro.public.v1+json:
            schema:
              $ref: '#/components/schemas/OfferPriceChangeCommand'
        description: offerPriceChangeCommandDto
        required: true
    get:
      tags:
        - Batch offer modification
      summary: "Change price command summary"
      description: "Returns status and summary of particular command execution."
      operationId: getPriceModificationCommandStatusUsingGET
      parameters:
        - name: commandId
          in: path
          description: Command identifier.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: report was generated and successfully returned
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/GeneralReport'
        '401':
          description: Unauthorized
        '404':
          description: Command not found
  '/sale/offer-price-change-commands/{commandId}/tasks':
    get:
      tags:
        - Batch offer modification
      summary: "Change price command detailed report"
      description: 'Defaults: limit = 100, offset = 0.'
      operationId: getPriceModificationCommandTasksStatusesUsingGET
      parameters:
        - name: commandId
          in: path
          description: Command identifier.
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: The limit of elements in the response.
          required: false
          schema:
            type: integer
            format: int32
            default: 100
            minimum: 1
            maximum: 1000
        - name: offset
          in: query
          description: The offset of elements in the response.
          required: false
          schema:
            type: integer
            format: int32
            default: 0
            minimum: 0
            maximum: 999
      responses:
        '200':
          description: Task status successfully returned
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/TaskReport'
        '401':
          description: Unauthorized
        '404':
          description: Command not found
        '422':
          description: Unprocessable Entity
  '/sale/offer-quantity-change-commands/{commandId}':
    put:
      tags:
        - Batch offer modification
      summary: "Batch offer quantity modification"
      description: >-
        Change quantity of multiple offers. Read more: <a href="../../my_offers/#liczba-przedmiotÃ³w" target="_blank">PL</a> / <a href="../../en/my_offers/#quantity" target="_blank">EN</a>.
      operationId: quantityModificationCommandUsingPUT
      parameters:
        - name: commandId
          in: path
          description: Command identifier.
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Command was registered
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/GeneralReport'
        '400':
          description: Semantically incorrect request or provided conditions not correct
        '401':
          description: Unauthorized
        '409':
          description: Command id was already used
        '422':
          description: Unprocessable Entity
      requestBody:
        content:
          application/vnd.allegro.public.v1+json:
            schema:
              $ref: '#/components/schemas/OfferQuantityChangeCommand'
        description: offerQuantityChangeCommandDto
        required: true
    get:
      tags:
        - Batch offer modification
      summary: "Change quantity command summary"
      description: "Returns status and summary of the command."
      operationId: getQuantityModificationCommandStatusUsingGET
      parameters:
        - name: commandId
          in: path
          description: Command identifier.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: report was generated and successfully returned
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/GeneralReport'
        '401':
          description: Unauthorized
        '404':
          description: Command not found
  '/sale/offer-quantity-change-commands/{commandId}/tasks':
    get:
      tags:
        - Batch offer modification
      summary: 'Change quantity command detailed report'
      description: 'Defaults: limit = 100, offset = 0.'
      operationId: getQuantityModificationCommandTasksStatusesUsingGET
      parameters:
        - name: commandId
          in: path
          description: Command identifier.
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: The limit of elements in the response.
          required: false
          schema:
            type: integer
            format: int32
            default: 100
            minimum: 1
            maximum: 1000
        - name: offset
          in: query
          description: The offset of elements in the response.
          required: false
          schema:
            type: integer
            format: int32
            default: 0
            minimum: 0
            maximum: 999
      responses:
        '200':
          description: Task status successfully returned
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/TaskReport'
        '401':
          description: Unauthorized
        '404':
          description: Command not found
        '422':
          description: Unprocessable Entity
  /sale/categories:
    get:
      tags:
        - Categories and parameters
      summary: 'Get IDs of Allegro categories'
      description: >-
        Use this resource to traverse the Allegro categories tree. It returns the list of the given category's children
        or a list of the main Allegro categories. Read more: <a href="../../sale/#2-kategorie-i-parametry" target="_blank">PL</a> / <a href="../../en/sale/#2-category-and-parameters" target="_blank">EN</a>.
      operationId: getCategoriesUsingGET
      security:
        - bearer-token-for-application: []
        - bearer-token-for-user: []
      parameters:
        - name: parent.id
          in: query
          description: >-
            The ID of the category which children should be returned. If omitted, the list of main Allegro categories
            will be returned.
          required: false
          schema:
            type: string
            default: 954b95b6-43cf-4104-8354-dea4d9b10ddf
      responses:
        '200':
          description: The list of categories returned successfully.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/CategoriesDto'
        '404':
          description: The category with the given ID does not exist.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
  '/sale/categories/{categoryId}':
    get:
      tags:
        - Categories and parameters
      summary: 'Get a category by ID'
      description: >-
        Use this resource to get the details of a specific category. Read more: <a href="../../multi_variant_offers/#1" target="_blank">PL</a> / <a href="../../en/multi_variant_offers/#1" target="_blank">EN</a>.
      operationId: getCategoryUsingGET_1
      security:
        - bearer-token-for-application: []
        - bearer-token-for-user: []
      parameters:
        - name: categoryId
          in: path
          description: The category ID.
          required: true
          schema:
            type: string
            example: "6061"
      responses:
        '200':
          description: The details of a category returned successfully.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/CategoryDto'
        '404':
          description: The category with the given ID does not exist.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
  '/sale/categories/{categoryId}/parameters':
    get:
      tags:
        - Categories and parameters
      summary: 'Get parameters supported by a category'
      description: >-
        Use this resource to get the list of parameters that are supported by the given category.
        Read more: <a href="../../sale/#parametry" target="_blank">PL</a> / <a href="../../en/sale/#parameters" target="_blank">EN</a>.
      operationId: getFlatParametersUsingGET_2
      security:
        - bearer-token-for-application: []
        - bearer-token-for-user: []
      parameters:
        - name: categoryId
          in: path
          description: The category ID.
          required: true
          schema:
            type: string
            example: "709"
      responses:
        '200':
          description: The list of parameters for the category returned successfully.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/CategoryParameterList'
              examples:
                integer:
                  summary: Integer
                  value:
                    parameters:
                      - id: "202877"
                        name: "Liczba rdzeni procesora"
                        type: "integer"
                        required: false
                        requiredForProduct: false
                        unit: null
                        options:
                          variantsAllowed: true
                          variantsEqual: false
                          ambiguousValueId: null
                          dependsOnParameterId: null
                          describesProduct: false
                          customValuesEnabled: false
                        restrictions:
                          min: 0
                          max: 1000000
                          range: false
                string_single:
                  summary: String single
                  value:
                    parameters:
                      - id: "224017"
                        name: "Kod producenta"
                        type: "string"
                        required: false
                        unit: null
                        options:
                          variantsAllowed: false
                          variantsEqual: false
                          ambiguousValueId: null
                          dependsOnParameterId: null
                          describesProduct: false
                          customValuesEnabled: false
                        restrictions:
                          minLength: 2
                          maxLength: 35
                          allowedNumberOfValues: 1
                dictionary:
                  summary: Dictionary
                  value:
                    parameters:
                      - id: "11323"
                        name: "Stan"
                        type: "dictionary"
                        required: false
                        requiredForProduct: false
                        unit: null
                        options:
                          variantsAllowed: false
                          variantsEqual: true
                          ambiguousValueId: null
                          dependsOnParameterId: null
                          describesProduct: false
                          customValuesEnabled: false
                        dictionary:
                          - id: "11323_1"
                            value: "Nowy"
                            "dependsOnValueIds": []
                          - id: "11323_2"
                            value: "UÅ¼ywany"
                            "dependsOnValueIds": []
                          - id: "11323_238066"
                            value: "Po zwrocie"
                            "dependsOnValueIds": []
                          - id: "11323_238058"
                            value: "Powystawowy"
                            "dependsOnValueIds": []
                          - id: "11323_238062"
                            value: "Uszkodzony"
                            "dependsOnValueIds": []
                          - id: "11323_246534"
                            value: "Odnowiony przez producenta"
                            "dependsOnValueIds": []
                        restrictions:
                          multipleChoices: false
                float:
                  summary: Float
                  value:
                    parameters:
                      - id: "17448"
                        name: "Waga (z opakowaniem)"
                        type: "float"
                        required: false
                        requiredForProduct: false
                        unit: "kg"
                        options:
                          variantsAllowed: false
                          variantsEqual: false
                          ambiguousValueId: null
                          dependsOnParameterId: null
                          describesProduct: false
                          customValuesEnabled: false
                        restrictions:
                          min: 0
                          max: 1000000
                          range: false
                          precision: 3
                float_range:
                  summary: Float range
                  value:
                    parameters:
                      - id: "211966"
                        name: "Zakres regulacji wysokoÅ›ci koszenia"
                        type: "float"
                        required: false
                        requiredForProduct: false
                        unit: "cm"
                        options:
                          variantsAllowed: false
                          variantsEqual: false
                          ambiguousValueId: null
                          dependsOnParameterId: null
                          describesProduct: true
                          customValuesEnabled: false
                        restrictions:
                          min: 0
                          max: 1000
                          range: true
                          precision: 2
        '404':
          description: The category with the given ID does not exist.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
  '/sale/categories/{categoryId}/product-parameters':
    get:
      tags:
        - Products
      summary: 'Get product parameters available in given category'
      description: >-
        Use this resource to get the list of product parameters available in given category.
        You can use these parameters to create a new product.
        <a href="../../productization" target="_blank">Read more</a>.
      operationId: getFlatProductParametersUsingGET
      security:
        - bearer-token-for-application: []
        - bearer-token-for-user: []
      parameters:
        - name: categoryId
          in: path
          description: The category ID.
          required: true
          schema:
            type: string
            example: "709"
      responses:
        '200':
          description: 'The list of product parameters for the category returned successfully.'
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/CategoryProductParameterList'
              examples:
                integer:
                  summary: Integer
                  value:
                    parameters:
                      - id: "202877"
                        name: "Liczba rdzeni procesora"
                        type: "integer"
                        required: false
                        unit: null
                        restrictions:
                          min: 0
                          max: 1000000
                          range: false
                string_single:
                  summary: String single
                  value:
                    parameters:
                      - id: "224017"
                        name: "Kod producenta"
                        type: "string"
                        required: false
                        unit: null
                        restrictions:
                          minLength: 2
                          maxLength: 35
                          allowedNumberOfValues: 1
                dictionary:
                  summary: Dictionary
                  value:
                    parameters:
                      - id: "11323"
                        name: "Stan"
                        type: "dictionary"
                        required: false
                        unit: null
                        dictionary:
                          - id: "11323_1"
                            value: "Nowy"
                          - id: "11323_2"
                            value: "UÅ¼ywany"
                          - id: "11323_238066"
                            value: "Po zwrocie"
                          - id: "11323_238058"
                            value: "Powystawowy"
                          - id: "11323_238062"
                            value: "Uszkodzony"
                          - id: "11323_246534"
                            value: "Odnowiony przez producenta"
                        restrictions:
                          multipleChoices: false
                float:
                  summary: Float
                  value:
                    parameters:
                      - id: "17448"
                        name: "Waga (z opakowaniem)"
                        type: "float"
                        required: false
                        unit: "kg"
                        restrictions:
                          min: 0
                          max: 1000000
                          range: false
                          precision: 3
                float_range:
                  summary: Float range
                  value:
                    parameters:
                      - id: "211966"
                        name: "Zakres regulacji wysokoÅ›ci koszenia"
                        type: "float"
                        required: false
                        unit: "cm"
                        restrictions:
                          min: 0
                          max: 1000
                          range: true
                          precision: 2
        '404':
          description: The category with the given ID does not exist.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
  /sale/offer-additional-services/definitions:
    get:
      tags:
        - Additional services
      summary: "Get the user's additional services definitions"
      description:
        'Use this resource to get additional services definitions by user ID. <a href="../../news/2017-10-25-news_uslugi_dodatkowe/#1" target="_blank">Read more</a>.'
      operationId: getListOfAdditionalServicesDefinitionsUsingGET
      parameters:
        - name: offset
          in: query
          description: The offset of elements in the response.
          required: false
          schema:
            type: integer
            format: int32
            default: 0
            minimum: 0
        - name: limit
          in: query
          description: The limit of elements in the response.
          required: false
          schema:
            type: integer
            format: int32
            default: 100
            minimum: 1
            maximum: 1000
      responses:
        '200':
          description: OK
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/DefinitionsResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  /sale/shipping-rates:
    get:
      tags:
        - Delivery
      summary: "Get the user's shipping rates"
      description:
        'Use this resource to get a list of seller''s shipping rates. Read more: <a href="../../sale/#cennik-dostaw" target="_blank">PL</a> / <a href="../../en/sale/#shipping-price" target="_blank">EN</a>.'
      operationId: getListOfShippingRatestUsingGET
      responses:
        '200':
          description: OK
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                type: object
                properties:
                  shippingRates:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          description: Shipping rate ID
                        name:
                          type: string
                          description: User defined name of the shipping rates set
              examples:
                response:
                  value:
                    - id: 758fcd59-fbfa-4453-ae07-4800d72c2ca5
                      name: MÃ³j cennik
        '401':
          description: Authentication required
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/AuthError'
        '403':
          description: Unauthorized
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
    post:
      tags:
        - Delivery
      summary: "Create a new shipping rates set"
      description:
        'Use this resource to create a new seller''s shipping rates set. Read more: <a href="../../sale/#cennik-dostaw" target="_blank">PL</a> / <a href="../../en/sale/#shipping-price" target="_blank">EN</a>.'
      operationId: createShippingRatesSetUsingPOST
      requestBody:
        description: Shipping rates set
        required: true
        content:
          application/vnd.allegro.public.v1+json:
            schema:
              $ref: '#/components/schemas/ShippingRatesSet'
      responses:
        '201':
          description: OK
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: "#/components/schemas/ShippingRatesSet"
        '401':
          description: Authentication required
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/AuthError'
        '422':
          description: The user has reached the limit of shipping rates sets. Information on the limit will be returned in the error message.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
  '/sale/shipping-rates/{id}':
    get:
      tags:
        - Delivery
      summary: 'Get the details of a shipping rates set'
      description:
        'Use this resource to get details of the given shipping rates set. Read more: <a href="../../sale/#cennik-dostaw" target="_blank">PL</a> / <a href="../../en/sale/#shipping-price" target="_blank">EN</a>.'
      operationId: getShippingRatesSetUsingGET
      parameters:
        - name: id
          in: path
          description: Shipping rates set identifier.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: "#/components/schemas/ShippingRatesSet"
              examples:
                response:
                  value:
                    id: 758fcd59-fbfa-4453-ae07-4800d72c2ca6
                    name: MÃ³j cennik
                    rates:
                      - deliveryMethod:
                          id: 758fcd59-fbfa-4453-ae07-4800d72c2ca5
                        maxQuantityPerPackage: 6
                        firstItemRate:
                          amount: '12.00'
                          currency: PLN
                        nextItemRate:
                          amount: '2.50'
                          currency: PLN
                        shippingTime:
                          from: P1D
                          to: P20D
                    lastModified: '2018-04-05T12:20:23.974Z'
        '401':
          description: Authentication required
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/AuthError'
        '403':
          description: Unauthorized
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
        '404':
          description: Shipping rates set with given ID not found
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
    put:
      tags:
        - Delivery
      summary: "Edit a user's shipping rates set"
      description:
        'Use this resource to edit a new seller''s shipping rates set. Read more: <a href="../../sale/#cennik-dostaw" target="_blank">PL</a> / <a href="../../en/sale/#shipping-price" target="_blank">EN</a>.'
      operationId: modifyShippingRatesSetUsingPUT
      parameters:
        - name: id
          in: path
          description: Shipping rates set identifier.
          required: true
          schema:
            type: string
      requestBody:
        description: Shipping rates set
        required: true
        content:
          application/vnd.allegro.public.v1+json:
            schema:
              $ref: "#/components/schemas/ShippingRatesSet"
      responses:
        '200':
          description: OK
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: "#/components/schemas/ShippingRatesSet"
        '401':
          description: Authentication required
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/AuthError'
        '404':
          description: Set with given id does not exist
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
  '/sale/delivery-settings':
    get:
      tags:
        - Delivery
      summary: "Get the user's delivery settings"
      description: >-
        Use this resource to get the delivery settings declared by the seller. Read more: <a href="../../sale/#ustawienia-dostawy" target="_blank">PL</a> / <a href="../../en/sale/#delivery-settings" target="_blank">EN</a>.
      operationId: getSaleDeliverySettings
      responses:
        '200':
          description: OK
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/DeliverySettingsDto'
        '401':
          description: Authentication required.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/AuthError'
        '403':
          description: Forbidden - not allowed to access user data.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
    put:
      tags:
        - Delivery
      summary: "Modify the user's delivery settings"
      description: >-
        Use this resource to modify the delivery settings declared by the seller. Read more: <a href="../../sale/#ustawienia-dostawy" target="_blank">PL</a> / <a href="../../en/sale/#delivery-settings" target="_blank">EN</a>.
      operationId: putSaleDeliverySettings
      responses:
        '200':
          description: OK
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/DeliverySettingsDto'
        '401':
          description: Authentication required.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/AuthError'
        '403':
          description: Forbidden - not allowed to access user data.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
  '/points-of-service':
    post:
      tags:
        - Points of service
      summary: 'Create a point of service'
      description:
        'Use this resource to create a point of service. <a href="../../news/2017-08-11-punkty_odbioru/#1" target="_blank">Read more</a>.'
      operationId: createPOSUsingPOST
      responses:
        '201':
          description: Created
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Pos'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
      requestBody:
        $ref: '#/components/requestBodies/Pos'
    get:
      tags:
        - Points of service
      summary: "Get the user's points of service"
      description:
        'Use this resource to get a list of points of service by seller ID. <a href="../../news/2017-08-11-punkty_odbioru/#3" target="_blank">Read more</a>.'
      operationId: getPOSListUsingGET
      parameters:
        - name: seller.id
          in: query
          description: User identifier.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/SearchResult'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
  '/points-of-service/{id}':
    get:
      tags:
        - Points of service
      summary: "Get the details of a point of service"
      description:
        'Use this resource to get a details of a point of service for a given ID.
         <a href="../../news/2017-08-11-punkty_odbioru/#4" target="_blank">Read more</a>.'
      operationId: getPOSDataUsingGET
      parameters:
        - name: id
          in: path
          description: Point of service ID.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Pos'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
    put:
      tags:
        - Points of service
      summary: 'Modify a point of service'
      description:
        'Use this resource to modify a point of service. <a href="../../news/2017-08-11-punkty_odbioru/#2" target="_blank">Read more</a>.'
      operationId: modifyPOSUsingPUT
      parameters:
        - name: id
          in: path
          description: >-
            Point of service ID. Must match values with 'id' property from the
            body.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Pos'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
      requestBody:
        $ref: '#/components/requestBodies/Pos'
    delete:
      tags:
        - Points of service
      summary: 'Delete a point of service'
      description:
        'Use this resource to delete a point of service. <a href="../../news/2017-08-11-punkty_odbioru/#5" target="_blank">Read more</a>.'
      operationId: deletePOSUsingDELETE
      parameters:
        - name: id
          in: path
          description: Point of service ID.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
  /sale/offer-contacts:
    post:
      tags:
        - Contacts
      summary: 'Create a new contact'
      description:
        'Use this resource to create a new contact. Read more: <a href="../../advertisement/#dane-kontaktowe" target="_blank">PL</a> / <a href="../../en/advertisement/#contact-data" target="_blank">EN</a>.'
      operationId: createContactUsingPOST
      responses:
        '201':
          description: Created
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ContactResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      requestBody:
        content:
          application/vnd.allegro.public.v1+json:
            schema:
              $ref: '#/components/schemas/ContactRequest'
        description: New contact
        required: true
    get:
      tags:
        - Contacts
      summary: "Get the user's contacts"
      description:
        'Use this resource to get details of many contacts. Read more: <a href="../../advertisement/#dane-kontaktowe" target="_blank">PL</a> / <a href="../../en/advertisement/#contact-data" target="_blank">EN</a>.'
      operationId: getListOfContactsUsingGET
      responses:
        '200':
          description: OK
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ContactResponseList'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  '/sale/offer-contacts/{id}':
    get:
      tags:
        - Contacts
      summary: "Get contact details"
      description:
        'Use this resource to get contact details. Read more: <a href="../../advertisement/#dane-kontaktowe" target="_blank">PL</a> / <a href="../../en/advertisement/#contact-data" target="_blank">EN</a>.'
      operationId: getContactUsingGET
      parameters:
        - name: id
          in: path
          description: Contact identifier.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ContactResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    put:
      tags:
        - Contacts
      summary: "Modify contact details"
      description:
        'Use this resource to modify contact details. Read more: <a href="../../advertisement/#dane-kontaktowe" target="_blank">PL</a> / <a href="../../en/advertisement/#contact-data" target="_blank">EN</a>.'
      operationId: modifyContactUsingPUT
      parameters:
        - name: id
          in: path
          description: Contact identifier.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ContactResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      requestBody:
        content:
          application/vnd.allegro.public.v1+json:
            schema:
              $ref: '#/components/schemas/ContactRequest'
        description: Contact
        required: true
  /sale/delivery-methods:
    get:
      tags:
        - Delivery
      summary: "Get the list of delivery methods"
      description:
        'Use this resource to get a list of all delivery methods currently available on the platform, as well as those that have already been discontinued. Read more: <a href="../../sale/#cennik-dostaw" target="_blank">PL</a> / <a href="../../en/sale/#shipping-price" target="_blank">EN</a>.'
      operationId: getListOfDeliveryMethodsUsingGET
      security:
        - bearer-token-for-application: []
        - bearer-token-for-user: []
      responses:
        '200':
          description: OK
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                type: object
                properties:
                  deliveryMethods:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          description: Delivery method ID.
                        name:
                          type: string
                          description: Delivery method name.
                        paymentPolicy:
                          type: string
                          enum:
                            - IN_ADVANCE
                            - CASH_ON_DELIVERY
                          description: Whether the payment is to be collected in advance or on delivery.
                        allegroEndorsed:
                          type: boolean
                          description: >-
                            Indicates Allegro signed delivery method, which allows to easily distinguish similar delivery methods
                            with various restrictions, e.g. Allegro Paczkomaty 24/7 InPost from Paczkomaty 24/7.
                        shippingRatesConstraints:
                          type: object
                          description: Rules for the delivery method, i.e. price, quantity, shipping time, etc.
                          properties:
                            allowed:
                              type: boolean
                              description: Indicates whether delivery method can be used when adding or modifying shipping rates.
                            maxQuantityPerPackage:
                              type: object
                              description: Rules for the quantity per parcel.
                              properties:
                                max:
                                  type: integer
                                  description: Upper limit for quantity per package.
                                  minimum: 1
                                  maximum: 999999
                                  example: 999999
                            firstItemRate:
                              type: object
                              description: Rules for the shipping cost for the first item in the parcel.
                              properties:
                                min:
                                  type: string
                                  description: Lower limit for the rate.
                                  example: "0.00"
                                  maxLength: 15
                                max:
                                  type: string
                                  description: Upper limit for the rate.
                                  example: "8.99"
                                  maxLength: 15
                                currency:
                                  type: string
                                  description: ISO 4217 currency code.
                                  example: "PLN"
                            nextItemRate:
                              type: object
                              description: Rules for the shipping cost of another item in the parcel.
                              properties:
                                min:
                                  type: string
                                  description: Lower limit for the rate.
                                  example: "0.00"
                                  maxLength: 15
                                max:
                                  type: string
                                  description: Upper limit for the rate.
                                  example: "8.99"
                                  maxLength: 15
                                currency:
                                  type: string
                                  description: ISO 4217 currency code.
                                  example: "PLN"
                            shippingTime:
                              type: object
                              description: Rules for the shipping time.
                              properties:
                                default:
                                  type: object
                                  description: Default shipping time.
                                  properties:
                                    from:
                                      type: string
                                      description: ISO 8601 duration format.
                                      example: "PT24H"
                                    to:
                                      type: string
                                      description: ISO 8601 duration format.
                                      example: "PT48H"
                                customizable:
                                  type: boolean
                                  description: Indicates if custom shipping time can be set when adding or modifying shipping rates.
              examples:
                response:
                  value:
                    deliveryMethods:
                      - id: 758fcd59-fbfa-4453-ae07-4800d72c2ca5
                        name: List polecony priorytetowy
                        paymentPolicy: IN_ADVANCE
                        allegroEndorsed: false
                        shippingRatesConstraints:
                          allowed: true
                          maxQuantityPerPackage:
                            max: 999999
                          firstItemRate:
                            min: '0.00'
                            max: '100000000.00'
                            currency: PLN
                          nextItemRate:
                            min: '0.00'
                            max: '100000000.00'
                            currency: PLN
                          shippingTime:
                            default:
                              from: PT24H
                              to: PT48H
                            customizable: true
        '401':
          description: Authentication required.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/AuthError'
  '/sale/offer-additional-services/groups/{groupId}':
    get:
      tags:
        - Additional services
      summary: "Get the details of an additional services group"
      description:
        'Use this resource to get additional services group for a given ID. <a href="../../news/2017-10-25-news_uslugi_dodatkowe/#5" target="_blank">Read more</a>.'
      operationId: getAdditionalServicesGroupUsingGET
      parameters:
        - name: groupId
          in: path
          description: Additional Service Group ID.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/AdditionalServicesGroupResponse'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
    put:
      tags:
        - Additional services
      summary: "Modify an additional services group"
      description:
        'Use this resource to modify existing additional service group. <a href="../../news/2017-10-25-news_uslugi_dodatkowe/#3" target="_blank">Read more</a>.'
      operationId: modifyAdditionalServicesGroupUsingPUT
      parameters:
        - name: groupId
          in: path
          description: Additional service group ID.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/AdditionalServicesGroupResponse'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      requestBody:
        $ref: '#/components/requestBodies/AdditionalServicesGroupRequest'
  '/sale/size-tables/{tableId}':
    get:
      tags:
        - Size tables
      summary: 'Get a size table details'
      description:
        'Use this resource to get selected size table. <a href="../../news/2018-04-19-news_tabele_rozmiarow/" target="_blank">Read more</a>.'
      operationId: getTableUsingGET
      parameters:
        - name: tableId
          in: path
          description: Table identifier.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Size table returned successfully
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/PublicTableDto'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /sale/size-tables:
    get:
      tags:
        - Size tables
      summary: "Get the user's size tables"
      description:
        'Use this resource to get all size tables assigned to a seller account.
           <a href="../../news/2018-04-19-news_tabele_rozmiarow/" target="_blank">Read more</a>.'
      operationId: getTablesUsingGET
      responses:
        '200':
          description: Size tables returned successfully
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/PublicTablesDto'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /after-sales-service-conditions/return-policies:
    get:
      tags:
        - After sale services
      summary: "Get the user's return policies"
      description:
        'Use this resource to get seller return policies listing. <a href="../../news/2017-04-05-news_warunki_oferty/" target="_blank">Read more</a>.'
      operationId: getPublicSellerListingUsingGET_1
      parameters:
        - name: limit
          in: query
          description: The limit of elements in the response.
          required: false
          schema:
            type: integer
            format: int32
            default: 60
            minimum: 1
            maximum: 60
        - name: offset
          in: query
          description: The offset of elements in the response.
          required: false
          schema:
            type: integer
            format: int32
            default: 0
            minimum: 0
            maximum: 59
      responses:
        '200':
          description: OK
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ReturnPoliciesList_ReturnPolicyBasic_'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    post:
      tags:
        - After sale services
      summary: "Create new user's return policy"
      description:
        'Use this resource to create a return policy definition.'
      operationId: createAfterSalesServiceReturnPolicyUsingPOST
      responses:
        '201':
          description: Created
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ReturnPolicyResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '422':
          description: Unprocessable Entity
      requestBody:
        description: Return Policy
        required: true
        content:
          application/vnd.allegro.public.v1+json:
            schema:
              $ref: '#/components/schemas/ReturnPolicyRequest'
  /after-sales-service-conditions/return-policies/{returnPolicyId}:
    get:
      tags:
        - After sale services
      summary: "Get the user's return policy"
      description:
        'Use this resource to get a return policy details.'
      operationId: getAfterSalesServiceReturnPolicyUsingGET
      parameters:
        - name: returnPolicyId
          in: path
          description: The ID of the return policy.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ReturnPolicyResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    put:
      tags:
        - After sale services
      summary: "Change the user's return policy"
      description:
        'Use this resource to modify the return policy details.'
      operationId: updateAfterSalesServiceReturnPolicyUsingPUT
      parameters:
        - name: returnPolicyId
          in: path
          description: The ID of the return policy.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ReturnPolicyResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '422':
          description: Unprocessable Entity
      requestBody:
        description: Return Policy
        required: true
        content:
          application/vnd.allegro.public.v1+json:
            schema:
              $ref: '#/components/schemas/ReturnPolicyRequest'
  /after-sales-service-conditions/implied-warranties:
    get:
      tags:
        - After sale services
      summary: "Get the user's implied warranties"
      description:
        'Use this resource to get seller implied warranties listing. <a href="../../news/2017-04-05-news_warunki_oferty/" target="_blank">Read more</a>.'
      operationId: getPublicSellerListingUsingGET
      parameters:
        - name: limit
          in: query
          description: The limit of elements in the response.
          required: false
          schema:
            type: integer
            format: int32
            default: 60
            minimum: 1
            maximum: 60
        - name: offset
          in: query
          description: The offset of elements in the response.
          required: false
          schema:
            type: integer
            format: int32
            default: 0
            minimum: 0
            maximum: 59
      responses:
        '200':
          description: OK
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: >-
                  #/components/schemas/ImpliedWarrantiesList_ImpliedWarrantyBasic_
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    post:
      tags:
        - After sale services
      summary: "Create new user's implied warranty"
      description:
        'Use this resource to create an implied warranty definition.'
      operationId: createAfterSalesServiceImpliedWarrantyUsingPOST
      responses:
        '201':
          description: Created
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ImpliedWarrantyResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '422':
          description: Unprocessable Entity
      requestBody:
        description: Implied warranty
        required: true
        content:
          application/vnd.allegro.public.v1+json:
            schema:
              $ref: '#/components/schemas/ImpliedWarrantyRequest'
  /after-sales-service-conditions/implied-warranties/{impliedWarrantyId}:
    get:
      tags:
        - After sale services
      summary: "Get the user's implied warranty"
      description:
        'Use this resource to get an implied warranty details.'
      operationId: getAfterSalesServiceImpliedWarrantyUsingGET
      parameters:
        - name: impliedWarrantyId
          in: path
          description: The ID of the implied warranty.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ImpliedWarrantyResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    put:
      tags:
        - After sale services
      summary: "Change the user's implied warranty"
      description:
        'Use this resource to modify the implied warranty details.'
      operationId: updateAfterSalesServiceImpliedWarrantyUsingPUT
      parameters:
        - name: impliedWarrantyId
          in: path
          description: The ID of the implied warranty.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ImpliedWarrantyResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '422':
          description: Unprocessable Entity
      requestBody:
        description: Implied warranty
        required: true
        content:
          application/vnd.allegro.public.v1+json:
            schema:
              $ref: '#/components/schemas/ImpliedWarrantyRequest'
  /after-sales-service-conditions/warranties:
    get:
      tags:
        - After sale services
      summary: "Get the user's warranties"
      description:
        'Use this resource to get seller warranties listing. <a href="../../news/2017-04-05-news_warunki_oferty/" target="_blank">Read more</a>.'
      operationId: getPublicSellerListingUsingGET_2
      parameters:
        - name: limit
          in: query
          description: The limit of elements in the response.
          required: false
          schema:
            type: integer
            format: int32
            default: 60
            minimum: 1
            maximum: 60
        - name: offset
          in: query
          description: The offset of elements in the response.
          required: false
          schema:
            type: integer
            format: int32
            default: 0
            minimum: 0
            maximum: 59
      responses:
        '200':
          description: OK
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/WarrantiesList_WarrantyBasic_'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    post:
      tags:
        - After sale services
      summary: "Create new user's warranty"
      description:
        'Use this resource to create a warranty definition.'
      operationId: createAfterSalesServiceWarrantyUsingPOST
      responses:
        '201':
          description: Created
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/WarrantyResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '422':
          description: Unprocessable Entity
      requestBody:
        description: Warranty
        required: true
        content:
          application/vnd.allegro.public.v1+json:
            schema:
              $ref: '#/components/schemas/WarrantyRequest'
  /after-sales-service-conditions/warranties/{warrantyId}:
    get:
      tags:
        - After sale services
      summary: "Get the user's warranty"
      description:
        'Use this resource to get a warranty details.'
      operationId: getAfterSalesServiceWarrantyUsingGET
      parameters:
        - name: warrantyId
          in: path
          description: The ID of the warranty.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/WarrantyResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    put:
      tags:
        - After sale services
      summary: "Change the user's warranty"
      description:
        'Use this resource to modify the warranty details.'
      operationId: updateAfterSalesServiceWarrantyUsingPUT
      parameters:
        - name: warrantyId
          in: path
          description: The ID of the warranty.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/WarrantyResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '422':
          description: Unprocessable Entity
      requestBody:
        description: Warranty
        required: true
        content:
          application/vnd.allegro.public.v1+json:
            schema:
              $ref: '#/components/schemas/WarrantyRequest'
  /after-sales-service-conditions/attachments:
    post:
      tags:
        - After sale services
      summary: "Create a warranty attachment metadata"
      description: >-
        You can attach PDF files to warranties.

        Uploading attachments flow:
          1. Create an attachment object to receive an upload URL (*POST /after-sales-service-conditions/attachments*),
          2. Use the upload URL to submit the PDF file (*PUT /after-sales-service-conditions/attachments/{attachmentId}*),
          3. Create (or update) warranty with attachment (*POST /after-sales-service-conditions/warranties*).

      operationId: createAfterSalesServiceConditionsAttachmentUsingPOST
      responses:
        '201':
          description: Attachment created successfully.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/AfterSalesServicesAttachment'
        '400':
          description: Syntactically incorrect request.
        '401':
          description: Invalid or missing bearer token.
        '415':
          description: Unsupported media type.
        '422':
          description: Unprocessable Entity.
      requestBody:
        description: After sale services attachment
        required: true
        content:
          application/vnd.allegro.public.v1+json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: 'uploaded_file.pdf'
  /after-sales-service-conditions/attachments/{attachmentId}:
    put:
      tags:
        - After sale services
      summary: "Upload an warranty attachment"
      description: >-
        Upload an after sale services attachment.

        This operation should be used after creating an offer attachment with *POST /sale/offer-attachments*

        **Important!** You can find the URL address to upload the file to our server in the *Location* response header of *POST /after-sales-service-conditions/attachments*.
        The URL is unique and one-time. As its format may change in time, you should always use the address from the header.
        Do not compose the address on your own.
      operationId: uploadAfterSalesServiceConditionsAttachmentUsingPUT
      parameters:
        - name: attachmentId
          in: path
          description: The ID of the attachment.
          required: true
          schema:
            type: string
      servers:
        - url: https://upload.{environment}
          variables:
            environment:
              default: allegro.pl
              enum:
                - allegro.pl
                - allegro.pl.allegrosandbox.pl
      requestBody:
        content:
          application/pdf:
            schema:
              type: string
              format: binary
              description: File in a binary format
      responses:
        '200':
          description: File uploaded correctly.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/AfterSalesServicesAttachment'
        '400':
          description: Syntactically incorrect request.
        '401':
          description: Invalid or missing bearer token.
        '404':
          description: Not found.
        '413':
          description: Payload too large.
        '422':
          description: Invalid file content.
  /pricing/offer-quotes:
    get:
      tags:
        - Pricing
      summary: "Get the user's current offer quotes"
      description: >-
        This endpoint returns current offer quotes (listing and promo fees)
        cycles for authenticated user and list of offers.
        Read more: <a href="../../charges/#data-naliczenia-kolejnej-opÅ‚aty" target="_blank">PL</a> / <a href="../../en/charges/#check-when-a-fee-is-charged" target="_blank">EN</a>.
      operationId: offerQuotesPublicUsingGET
      parameters:
        - name: offer.id
          in: query
          description: 'List of offer Ids, maximum 20 values.'
          required: true
          allowEmptyValue: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Returns current offer quotes
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/OfferQuotesDto'
        '400':
          description: Invalid request.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
        '401':
          description: Full authentication is required to access this resource
        '503':
          description: Service is currently unavailable. Please try again later.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
  '/sale/offer-variants':
    post:
      tags:
        - Offer variants
      summary: 'Create variant set'
      description: >-
        Use this resource to create variant set.

         A valid variant set must consist of three required elements:
         - name:
           - it can't be blank and must not be longer than 50 characters
         - parameters:
           - it should contain parameter identifiers used for offer grouping
           - parameter identifiers from the offers and special `color/pattern` value (for grouping via image) are permitted
           - it must contain at least one element (up to 2)
         - offers:
           - it must contain at least 2 offers (500 at most)
           - `colorPattern` value must be set for every offer if `color/pattern` parameter is used
           - `colorPattern` value can't be blank and must not be longer than 50 characters
           - `colorPattern` can take arbitrary string value like `red`, `b323592c-522f-4ec1-b9ea-3764538e0ac4` (UUID), etc.
           - offers having the same image should have identical `colorPattern` value


         Let's assume we have 4 offers:
           - offer with id 2 having an image of a red t-shirt and S as a value of parameter with id 21
           - offer with id 3 having an image of a red t-shirt and M as a value of parameter with id 21
           - offer with id 4 having an image of a blue t-shirt and S as a value of parameter with id 21
           - offer with id 5 having an image of a blue t-shirt and M as a value of parameter with id 21


         You can build a variant set by grouping offers using combination of available parameters - examples are available in <i>Request samples</i>.


         More general information about variant sets can be found [here](https://allegro.pl/pomoc/faq/wielowariantowosc-jak-polaczyc-oferty-xGgaOByGgTb#dodatkowe-informacje),
         more information about variant sets API can be found <a href="https://developer.allegro.pl/multi_variant_offers/#3" target="_blank">here</a>.
      operationId: createVariantSet
      responses:
        '201':
          description: Variant set created successfully
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/VariantSetResponse'

        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '422':
          description: Unprocessable Entity
      requestBody:
        $ref: '#/components/requestBodies/VariantSetRequest'
    get:
      tags:
        - Offer variants
      summary: "Get the user's variant sets"
      description: >-
        Use this resource to get created variant sets.
        The returned variant sets are ordered by name.
        <a href="https://developer.allegro.pl/multi_variant_offers/#6" target="_blank">Read more</a>.
      operationId: getVariantSets
      parameters:
        - name: offset
          in: query
          description: Index of first returned variant set.
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
            maximum: 9950
        - name: limit
          in: query
          description: Maximum number of returned variant sets.
          required: false
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 50
        - name: query
          in: query
          description: Filter variant sets by name or offer id.
          required: false
          schema:
            type: string
            maxLength: 50
      responses:
        '200':
          description: Variant sets returned successfully
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/VariantSets'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  '/sale/offer-variants/{setId}':
    put:
      tags:
        - Offer variants
      summary: 'Update variant set'
      description: >-
        Use this resource to create variant set.

         A valid variant set must consist of three required elements:
         - name:
           - it can't be blank and must not be longer than 50 characters
         - parameters:
           - it should contain parameter identifiers used for offer grouping
           - parameter identifiers from the offers and special `color/pattern` value (for grouping via image) are permitted
           - it must contain at least one element (up to 2)
         - offers:
           - it must contain at least 2 offers (500 at most)
           - `colorPattern` value must be set for every offer if `color/pattern` parameter is used
           - `colorPattern` value can't be blank and must not be longer than 50 characters
           - `colorPattern` can take arbitrary string value like `red`, `b323592c-522f-4ec1-b9ea-3764538e0ac4` (UUID), etc.
           - offers having the same image should have identical `colorPattern` value


         Let's assume we have 4 offers:
           - offer with id 2 having an image of a red t-shirt and S as a value of parameter with id 21
           - offer with id 3 having an image of a red t-shirt and M as a value of parameter with id 21
           - offer with id 4 having an image of a blue t-shirt and S as a value of parameter with id 21
           - offer with id 5 having an image of a blue t-shirt and M as a value of parameter with id 21


         You can build a variant set by grouping offers using combination of available parameters - examples are available in <i>Request samples</i>.


         More general information about variant sets can be found [here](https://allegro.pl/pomoc/faq/wielowariantowosc-jak-polaczyc-oferty-xGgaOByGgTb#dodatkowe-informacje),
         more information about variant sets API can be found <a href="https://developer.allegro.pl/multi_variant_offers/#3" target="_blank">here</a>.
      operationId: updateVariantSet
      parameters:
        - name: setId
          in: path
          description: Variant set identifier.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Variant set updated successfully
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/VariantSetResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '422':
          description: Unprocessable Entity
      requestBody:
        $ref: '#/components/requestBodies/VariantSetRequest'
    get:
      tags:
        - Offer variants
      summary: 'Get a variant set'
      description:
        'Use this resource to get variant set by set id. <a href="https://developer.allegro.pl/multi_variant_offers/#4" target="_blank">Read more</a>.'
      operationId: getVariantSet
      parameters:
        - name: setId
          in: path
          description: Variant set identifier.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Variant set returned successfully
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/VariantSetResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    delete:
      tags:
        - Offer variants
      summary: 'Delete a variant set'
      description: >-
        Use this resource to delete variant set by id.
        Offers included in variant set will not be stopped or modified by this operation.
        <a href="https://developer.allegro.pl/multi_variant_offers/#5" target="_blank">Read more</a>.
      operationId: deleteVariantSet
      parameters:
        - name: setId
          in: path
          description: Variant set identifier.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Variant set deleted successfully
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Variant set not found
  '/sale/images':
    post:
      tags:
        - Images and attachments
      summary: "Upload an offer image"
      description: >-
        Upload image to our servers.

        You can choose from two upload options:
          * \- provide a link and we will download an image for you
          * \- send an image as binary data

        **Important!** Remember to use dedicated domain for upload, i.e.
          * \- https://upload.allegro.pl for Production
          * \- https://upload.allegro.pl.allegrosandbox.pl for Sandbox

        More information about rules for photos in an offer's gallery and description you will find
        <a href="https://allegro.pl/dla-sprzedajacych/nowe-zasady-dla-zdjec-w-galerii-i-w-opisie-YLlAAa2oXf7" target="_blank">here</a>.
      operationId: uploadOfferImageUsingPOST
      servers:
        - url: https://upload.{environment}
          variables:
            environment:
              default: allegro.pl
              enum:
                - allegro.pl
                - allegro.pl.allegrosandbox.pl
      responses:
        '201':
          description: Image uploaded correctly
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/OfferImageUploadResponse'
        '400':
          description: Syntactically incorrect request
        '401':
          description: Invalid or missing bearer token
        '413':
          description: Image is too big
        '415':
          description: Unsupported media type
        '422':
          description: Unprocessable entity (problem with image server)
      requestBody:
        $ref: '#/components/requestBodies/OfferImageUploadRequest'
  '/sale/offer-attachments':
    post:
      tags:
        - Images and attachments
      summary: "Create an offer attachment"
      description: >-
        You can attach PDF files to your offers.
        We will present them under the offer description in the Additional information section.

        You can attach up to 7 files to one offer â€“ one per each type from the list:
          * \- Guide (MANUAL)
          * \- Special offer terms (SPECIAL_OFFER_RULES)
          * \- Competition terms (COMPETITION_RULES)
          * \- Book excerpt (BOOK_EXCERPT)
          * \- Manual (USER_MANUAL)
          * \- Installation manual (INSTALLATION_INSTRUCTIONS)
          * \- Game manual (GAME_INSTRUCTIONS)

        Uploading attachments flow:
          1. Create an attachment object to receive an upload URL (*POST /sale/offer-attachments*),
          2. Use the upload URL to submit the PDF file (*PUT /sale/offer-attachments/{attachmentId}*),
          3. Add attachments to the offer (*PUT /sale/offers/{offerId}*).

      operationId: createOfferAttachmentUsingPOST
      responses:
        '201':
          description: Attachment created successfully
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/OfferAttachment'
        '400':
          description: Syntactically incorrect request
        '401':
          description: Invalid or missing bearer token
        '415':
          description: Unsupported media type
        '422':
          description: Unprocessable Entity
      requestBody:
        $ref: '#/components/requestBodies/OfferAttachmentRequest'
  '/sale/offer-attachments/{attachmentId}':
    put:
      tags:
        - Images and attachments
      summary: "Upload an offer attachment"
      description: >-
        Upload an offer attachment.

        This operation should be used after creating an offer attachment with *POST /sale/offer-attachments*

        **Important!** You can find the URL address to upload the file to our server in the *Location* response header of *POST /sale/offer-attachments*.
        The URL is unique and one-time. As its format may change in time, you should always use the address from the header.
        Do not compose the address on your own.
      operationId: uploadOfferAttachmentUsingPUT
      parameters:
        - name: attachmentId
          in: path
          description: The ID of the attachment.
          required: true
          schema:
            type: string
            format: uuid
      servers:
        - url: https://upload.{environment}
          variables:
            environment:
              default: allegro.pl
              enum:
                - allegro.pl
                - allegro.pl.allegrosandbox.pl
      requestBody:
        content:
          application/pdf:
            schema:
              type: string
              format: binary
              description: File in a binary format
      responses:
        '200':
          description: File uploaded correctly
        '400':
          description: Syntactically incorrect request
        '401':
          description: Invalid or missing bearer token
  /offers/listing:
    get:
      tags:
        - Public offer information
      summary: "Search offers"
      description: >-
        Use this resource to get a list of offers based on the provided query parameters.
        At least one of: phrase, seller.id or category.id is required.
        Additional available parameters vary depending on category.id. The
        parameters are defined in the filters entity. Read more: <a href="../../listing/" target="_blank">PL</a> / <a href="../../en/listing/" target="_blank">EN</a>.
      operationId: getListing
      security:
        - bearer-token-for-application: []
        - bearer-token-for-user: []
      parameters:
        - name: category.id
          in: query
          description: The identifier of the category, where you want to search for offers.
          required: false
          schema:
            type: string
        - name: phrase
          in: query
          description: >-
            The search phrase. The phrase is searched in different fields of the offers depending on the value of the
            `searchMode` parameter.
          required: false
          schema:
            type: string
        - name: seller.id
          in: query
          description: >-
            The identifier of a seller, to limit the results to offers from this seller. May be provided more than once.
            Should not be provided when seller.login is given.
          required: false
          schema:
            type: string
        - name: seller.login
          in: query
          description: >-
            The login of a seller, to limit the results to offers from this seller. May be provided more than once.
            Should not be provided when seller.id is given.
          required: false
          schema:
            type: string
        - name: searchMode
          in: query
          description: >-
            Defines where the given phrase should be searched in. Allowed values:

              - *REGULAR* - searching for a phrase in the title,
              - *DESCRIPTIONS* - searching for a phrase in the title and the descriptions,
              - *CLOSED* - searching for a phrase in the title of closed offers.
          required: false
          schema:
            type: string
            enum:
              - REGULAR
              - DESCRIPTIONS
              - CLOSED
            default: REGULAR
        - name: offset
          in: query
          description: >-
            Index of the first returned offer from all search results. Max offset is:
            	- `120000 - <limit>` if seller.id parameter is given in request,
                - `6000 - <limit>` if no seller.id parameter is given in request.
          required: false
          schema:
            type: integer
            minimum: 0
            maximum: 119999
            default: 0
        - name: limit
          in: query
          description: >-
            The maximum number of offers in a response.
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 60
            default: 60
        - name: sort
          in: query
          description: >-
            Search results sorting order. `+` or no prefix in the value means ascending order. `-` prefix means
            descending order.
          required: false
          schema:
            type: string
            enum:
              - relevance
              - +price
              - -price
              - +withDeliveryPrice
              - -withDeliveryPrice
              - -popularity
              - +endTime
              - -startTime
            default: relevance
        - name: include
          in: query
          description: >-
            Specify parts of the response that should be included in the output. Allowed values are the names of top
            level entities and *all* as an alias to all entities. By default, all top level entities are included.
            Use `-` prefix to exclude an entity.

            Example:

            `include=-all&include=filters&include=sort` - returns only filters and sort entities.
          required: false
          schema:
            type: string
        - name: fallback
          in: query
          description: >-
            Defines the behaviour of the search engine when no results with exact phrase match are found:

              - *true* - related (not exact) results are returned,
              - *false* - empty results are returned.
          required: false
          schema:
            type: boolean
            default: true
        - name: "Dynamic filters"
          in: query
          description: >-
            You can filter and customize your search results to find exactly what you need by applying filters ids and their dictionary values to query according to the flowing pattern: id=value.
            When the filter definition looks like:
              ````
                {
                	"id": "parameter.11323",
                	"type": "MULTI",
                	"name": "Stan",
                	"values": [{
                			"value": "11323_1",
                			"name": "nowe",
                			"count": 21,
                			"selected": false
                		},
                		{
                			"value": "11323_2",
                			"name": "uÅ¼ywane",
                			"count": 157,
                			"selected": false
                		},
                		{
                			"value": "11323_238066",
                			"name": "po zwrocie",
                			"count": 1,
                			"selected": false
                		}
                	]
                }
              ````
            You can use 'Stan' filter to query results, i.e.:
              * `parameter.11323=11323_1` for "nowe"
              * `parameter.11323=11323_2` for "uÅ¼ywane"
              * `parameter.11323=11323_238066` for "po zwrocie".
          required: false
          schema:
            type: object
            additionalProperties:
              x-additionalPropertiesName: filter's id
              type: string
              description: Filter value.
      responses:
        '200':
          description: The request successfully returns the search result.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ListingResponse'
        '400':
          description: Bad request. Check if all necessary parameters are provided.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: "#/components/schemas/ErrorsHolder"
        '404':
          description: Given category was not found. Check category.id parameter.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: "#/components/schemas/ErrorsHolder"
        '422':
          description: >-
            One of parameters have invalid value or given parameters combination
            is forbidden.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: "#/components/schemas/ErrorsHolder"
        '500':
          description: Internal service error.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: "#/components/schemas/ErrorsHolder"
        '502':
          description: Error caused by upstream service failure.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: "#/components/schemas/ErrorsHolder"
  '/order/events':
    get:
      tags:
        - Order management
      summary: 'Get order events'
      description: >-
        Use this resource to return events that allow you to monitor actions which clients perform, i.e.
        making a purchase, filling in the checkout form (FOD), finishing payment process, making a surcharge. Read more: <a href="../../orders/#dziennik-zdarzeÅ„" target="_blank">PL</a> / <a href="../../en/orders/#event-log" target="_blank">EN</a>.
      operationId: getOrderEventsUsingGET
      parameters:
        - name: from
          in: query
          description: 'You can use the event ID to retrieve subsequent chunks of events.'
          required: false
          schema:
            type: string
        - name: type
          in: query
          description: >-
            Specify array of event types for filtering.
            Allowed values are:
              * `BOUGHT`: purchase without checkout form filled in
              * `FILLED_IN`: checkout form filled in but payment is not completed yet so data could still change
              * `READY_FOR_PROCESSING`: payment completed. Purchase is ready for processing
              * `BUYER_CANCELLED`: purchase was cancelled by buyer
              * `FULFILLMENT_STATUS_CHANGED`: fulfillment status changed.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: limit
          in: query
          description: 'The maximum number of events returned in the response.'
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 1000
            default: 100
      responses:
        '200':
          description: OK
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/OrderEventsList'
        '401':
          description: Unauthorized
  '/order/event-stats':
    get:
      tags:
        - Order management
      summary: 'Get order events statistics'
      description: >-
        Use this resource to returns object that contains event id and occurrence date of the latest event.
        It gives you current starting point for reading events. Read more: <a href="../../orders/#jak-znaleÅºÄ‡-najnowsze-zdarzenie" target="_blank">PL</a> / <a href="../../en/orders/#how-to-find-the-newest-event" target="_blank">EN</a>.
      operationId: getOrderEventsStatisticsUsingGET
      responses:
        '200':
          description: OK
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/OrderEventStats'
        '401':
          description: Unauthorized
  '/order/checkout-forms':
    get:
      tags:
        - Order management
      summary: "Get the user's orders"
      description: >-
        Use this resource to get an order list. Read more: <a href="../../orders/#lista-zamÃ³wieÅ„" target="_blank">PL</a> / <a href="../../en/orders/#order-list" target="_blank">EN</a>.
      operationId: getListOfOrdersUsingGET
      parameters:
        - name: offset
          in: query
          description: Index of first returned checkout-form from all search results.
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: limit
          in: query
          description: >-
            Maximum number of checkout-forms in response.
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 100
        - name: status
          in: query
          schema:
            type: string
          description: >-
            Specify status value that checkout-forms must have to be included in the output.
            Allowed values are:
              * `BOUGHT`: purchase without checkout form filled in.
              * `FILLED_IN`: checkout form filled in but payment is not completed yet so data could still change.
              * `READY_FOR_PROCESSING`: payment completed. Purchase is ready for processing.
              * `CANCELLED`: purchase cancelled by buyer.
        - name: fulfillment.status
          in: query
          schema:
            type: string
          description: >-
            Specify seller status value that checkout-forms must have to be included in the output.
            Allowed values are:
              * `NEW`
              * `PROCESSING`
              * `READY_FOR_SHIPMENT`
              * `SENT`
              * `CANCELLED`.
        - name: fulfillment.shipmentSummary.lineItemsSent
          in: query
          schema:
            type: string
          description: >-
            Specify filter for line items sending status.
            Allowed values are:
              * `NONE`: none of line items have tracking number specified
              * `SOME`: some of line items have tracking number specified
              * `ALL`: all of line items have tracking number specified.
        - name: lineItems.boughtAt.lte
          in: query
          schema:
            type: string
            format: date-time
          description: Latest line item bought date. The upper bound of date time range from which checkout forms will be taken.
        - name: lineItems.boughtAt.gte
          in: query
          schema:
            type: string
            format: date-time
          description: Latest line item bought date. The lower bound of date time range from which checkout forms will be taken.
        - name: payment.id
          in: query
          schema:
            type: string
          description: Find checkout-forms having specified payment id.
        - name: surcharges.id
          in: query
          schema:
            type: string
          description: Find checkout-forms having specified surcharge id.
        - name: delivery.method.id
          in: query
          schema:
            type: string
          description: Find checkout-forms having specified delivery method id.
        - name: buyer.login
          in: query
          schema:
            type: string
          description: Find checkout-forms having specified buyer login.
        - name: updatedAt.lte
          in: query
          schema:
            type: string
            format: date-time
          description: Checkout form last modification date. The upper bound of date time range from which checkout forms will be taken.
        - name: updatedAt.gte
          in: query
          schema:
            type: string
            format: date-time
          description: Checkout form last modification date. The lower bound of date time range from which checkout forms will be taken.
        - name: sort
          in: query
          description: >-
            The results' sorting order. No prefix in the value means ascending order. `-` prefix means descending order.
            If you don't provide the sort parameter, the list is sorted by line item boughtAt date, descending.
          required: false
          schema:
            type: string
            enum:
              - lineItems.boughtAt
              - -lineItems.boughtAt
              - updatedAt
              - -updatedAt
      responses:
        '200':
          description: OK
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/CheckoutForms'
        '400':
          description: >
            Bad Request - Returned when request parameters contains illegal values.
        '401':
          description: Unauthorized
        '422':
          description: >
            Unprocessable Entity - Returned when limit or offset value is outside an acceptable range
  '/order/checkout-forms/{id}':
    get:
      tags:
        - Order management
      summary: "Get an order's details"
      description: >-
        Use this resource to get an order details. Read more: <a href="../../orders/#szczegÃ³Å‚y-zamÃ³wienia" target="_blank">PL</a> / <a href="../../en/orders/#order-details" target="_blank">EN</a>.
      operationId: getOrdersDetailsUsingGET
      parameters:
        - name: id
          in: path
          description: Checkout form identifier.
          required: true
          schema:
            type: string
            format: uuid
          example: "29738e61-7f6a-11e8-ac45-09db60ede9d6"
      responses:
        '200':
          description: OK
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/CheckoutForm'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
  '/order/carriers':
    get:
      tags:
        - Order management
      summary: "Get a list of available shipping carriers"
      description: >-
        Shipping carriers are essential to provide accurate tracking experience for customers.
        Use this resource to get a list of all available shipping carriers.


        The response of this resource can be stored in accordance with returned caching headers.
      operationId: getOrdersCarriersUsingGET
      security:
        - bearer-token-for-application: []
        - bearer-token-for-user: []
      responses:
        '200':
          description: List of available shipping carriers.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/OrdersShippingCarriersResponse'
              examples:
                order-carriers:
                  summary: Order carriers
                  value:
                    carriers:
                      - id: 'POCZTA_POLSKA'
                        name: 'Poczta Polska'
                      - id: 'DHL'
                        name: 'DHL'
                      - id: 'YUN_EXPRESS'
                        name: 'Yun Express'
                      - id: 'OTHER'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
  '/order/checkout-forms/{id}/shipments':
    get:
      tags:
        - Order management
      summary: "Get a list of parcel tracking numbers"
      description: >-
        Get a list of parcel tracking numbers currently assigned to the order.
        Orders can be retrieved using REST API resource GET /order/checkout-forms.
        Please note that the shipment list may contain parcel tracking numbers added
        through other channels such as Moje Allegro or by the carrier that delivers the parcel. Read more: <a href="../../orders/#jak-pobraÄ‡-numery-przesyÅ‚ek-dodane-do-zamÃ³wienia" target="_blank">PL</a> / <a href="../../en/orders/#retrieving-tracking-numbers" target="_blank">EN</a>.
      operationId: getOrderShipmentsUsingGET
      parameters:
        - name: id
          in: path
          description: Order identifier.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: >-
            Returns a list of parcel tracking numbers (shipments)
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/CheckoutFormOrderWaybillResponse'
        '401':
          description: Authentication failed, e.g. token is expired
        '404':
          description: Order not found or doesnâ€™t belong to the seller
    post:
      tags:
        - Order management
      summary: "Add a parcel tracking number"
      description: >-
        Add a parcel tracking number (shipment) to given order line items. Read more: <a href="../../orders/#jak-dodaÄ‡-numer-przesyÅ‚ki-do-przedmiotu-w-zamÃ³wieniu" target="_blank">PL</a> / <a href="../../en/orders/#add-tracking-number-to-order" target="_blank">EN</a>.
      operationId: createOrderShipmentsUsingPOST
      parameters:
        - name: id
          in: path
          description: Order identifier.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/vnd.allegro.public.v1+json:
            schema:
              $ref: '#/components/schemas/CheckoutFormAddWaybillRequest'
        description: request
        required: true
      responses:
        '201':
          description: The request is OK and the parcel tracking number will be assigned to the order
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/CheckoutFormAddWaybillCreated'
        '400':
          description: Missing required field or invalid value in the request (e.g. unknown carrier id, carrier name too long)
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
        '401':
          description: Authentication failed, e.g. token is expired
        '404':
          description: Order not found or doesnâ€™t belong to the seller
        '422':
          description: Some of the provided data is invalid, e.g. line item doesnâ€™t belong to the order
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
  '/order/checkout-forms/{id}/fulfillment':
    put:
      tags:
        - Order management
      summary: "Set seller order status"
      description: >-
        Use to set seller order status. Read more: <a href="../../orders/#zmiana-statusu-realizacji-zamÃ³wienia" target="_blank">PL</a> / <a href="../../en/orders/#order-fulfillment-status-changeg" target="_blank">EN</a>.
      operationId: setOrderFulfillmentUsingPUT
      parameters:
        - name: id
          in: path
          description: Order identifier.
          required: true
          schema:
            type: string
        - name: checkoutForm.revision
          in: query
          description: Checkout form revision.
          required: false
          schema:
            type: string
          example: "819b5836"
      requestBody:
        content:
          application/vnd.allegro.public.v1+json:
            schema:
              $ref: '#/components/schemas/CheckoutFormFulfillment'
        description: request
        required: true
      responses:
        '204':
          description: Fulfillment set successfully
        '401':
          description: Authentication failed, e.g. token is expired
        '404':
          description: Order not found or doesnâ€™t belong to the seller
        '409':
          description: Conflict. Provided revision is outdated.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
        '422':
          description: Some of the provided data is invalid, e.g. unrecognized status value
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
  '/sale/disputes':
    get:
      tags:
        - Disputes
      summary: "Get the user's disputes"
      description: >-
        Use this resource to get the list of your disputes.
        <a href="../../news/2018-09-18-dyskusje/#GetAll" target="_blank">Read more</a>.
      operationId: getListOfDisputesUsingGET
      parameters:
        - name: checkoutForm.id
          in: query
          description: Checkout form identifier.
          required: false
          schema:
            type: string
            format: uuid
          example: "29738e61-7f6a-11e8-ac45-09db60ede9d6"
        - name: limit
          in: query
          description: The maximum number of disputes in a response.
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 10
        - name: offset
          in: query
          description: Index of first returned dispute.
          required: false
          schema:
            type: integer
            format: int32
            minimum: 0
            default: 0
      responses:
        '200':
          description: OK
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/DisputeListResponse'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
  '/sale/disputes/{disputeId}':
    get:
      tags:
        - Disputes
      summary: "Get a single dispute"
      description: >-
        Use this resource to get a single dispute. <a href="../../news/2018-09-18-dyskusje/#GetOne" target="_blank">Read more</a>.
      operationId: getDisputeUsingGET
      parameters:
        - name: disputeId
          in: path
          description: Dispute identifier.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/Dispute'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  '/sale/disputes/{disputeId}/messages':
    get:
      tags:
        - Disputes
      summary: "Get the messages within a dispute"
      description: >-
        Use this resource to get the list of messages within dispute. <a href="../../news/2018-09-18-dyskusje/#GetMessage" target="_blank">Read more</a>.
      operationId: getMessagesFromDisputeUsingGET
      parameters:
        - name: disputeId
          in: path
          description: Dispute identifier.
          required: true
          schema:
            type: string
            format: uuid
        - name: limit
          in: query
          description: The maximum number of messages within dispute returned in a response.
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 10
        - name: offset
          in: query
          description: Index of first returned message within dispute.
          required: false
          schema:
            type: integer
            format: int32
            minimum: 0
            default: 0
      responses:
        '200':
          description: OK
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/DisputeMessageList'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    post:
      tags:
        - Disputes
      summary: "Add a message to a dispute"
      parameters:
        - name: disputeId
          in: path
          description: Dispute identifier.
          required: true
          schema:
            type: string
            format: uuid
      description: >-
        Use this resource to post a message in certain dispute. At least one of fields: 'text', 'attachment' has to
        be present. <a href="../../news/2018-09-18-dyskusje/#PostMessage" target="_blank">Read more</a>.
      operationId: addMessageToDisputeUsingPOST
      responses:
        '201':
          description: CREATED
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/DisputeMessage'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '422':
          description: Unprocessable Entity
      requestBody:
        $ref: '#/components/requestBodies/MessageRequest'
  '/sale/dispute-attachments':
    post:
      tags:
        - Disputes
      summary: "Create an attachment declaration"
      description: >-
        Use this resource to post an attachment declaration. <a href="../../news/2018-09-18-dyskusje/#PostAttach" target="_blank">Read more</a>.
      operationId: createAnAttachmentUsingPOST
      responses:
        '201':
          description: CREATED
          headers:
            Location:
              schema:
                type: string
              description: Use this URL to perform PUT request with binary data file coherent with the attachment declaration.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/DisputeAttachmentId'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '422':
          description: Unprocessable Entity
      requestBody:
        $ref: '#/components/requestBodies/AttachmentDeclaration'
  '/sale/dispute-attachments/{attachmentId}':
    put:
      tags:
        - Disputes
      summary: "Upload a dispute message attachment"
      description: >-
        Upload a dispute message attachment.

        This operation should be used after creating an attachment declaration with *POST /sale/dispute-attachments*

        **Important!** You can find the URL address to upload the file to our server in the *Location* response header of *POST /sale/dispute-attachments*.
        The URL is unique and one-time. As its format may change in time, you should always use the address from the header.
        Do not compose the address on your own.

      operationId: uploadDisputeAttachmentUsingPUT
      parameters:
        - name: attachmentId
          in: path
          required: true
          description: Attachment identifier.
          schema:
            type: string
            format: uuid
      servers:
        - url: https://upload.{environment}
          variables:
            environment:
              default: allegro.pl
              enum:
                - allegro.pl
                - allegro.pl.allegrosandbox.pl
      responses:
        '201':
          description: File uploaded correctly
        '400':
          description: Syntactically incorrect request
        '401':
          description: Invalid or missing bearer token
        '413':
          description: File is too big
        '415':
          description: Unsupported media type
      requestBody:
        required: true
        content:
          image/png:
            schema:
              type: string
              format: binary
              description: File in a binary format
          image/gif:
            schema:
              type: string
              format: binary
              description: File in a binary format
          image/bmp:
            schema:
              type: string
              format: binary
              description: File in a binary format
          image/tiff:
            schema:
              type: string
              format: binary
              description: File in a binary format
          image/jpeg:
            schema:
              type: string
              format: binary
              description: File in a binary format
          application/pdf:
            schema:
              type: string
              format: binary
              description: File in a binary format
    get:
      tags:
        - Disputes
      summary: "Get an attachment"
      description: >-
        Use this resource to get an attachment. <a href="../../news/2018-09-18-dyskusje/#GetAttach" target="_blank">Read more</a>.
      operationId: getAttachmentUsingGET
      parameters:
        - name: attachmentId
          in: path
          description: Attachment identifier.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: string
                format: binary
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  '/order/line-item-id-mappings':
    get:
      tags:
        - Order management
      summary: "Get mapping for line item id"
      description:
        "Allows mapping identifiers from dealId to lineItemId and vice-versa. One of defined query parameters
         has to be provided."
      operationId: "findMapping"
      parameters:
        - in: "query"
          name: "lineItemId"
          description: Line item identifier.
          required: false
          schema:
            type: string
            format: uuid
        - in: "query"
          name: "dealId"
          description: Deal identifier.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/LineItemIdMappings'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '422':
          description: Missing required parameter. Provide lineItemId or dealId.
  '/sale/offer-tags':
    post:
      tags:
        - Offer tags
      summary: "Create a tag"
      description: >-
        Use this resource to create a new tag. <a href="../../news/2018-09-24-tagi-zalaczniki/#DodajDoKonta" target="_blank">Read more</a>.
      operationId: createTagPOST_1
      responses:
        '200':
          description: Successfully created the requested tag
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/TagId'
        '400':
          description: Bad request
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
        '422':
          description: >-
            Validation failed - your request was correct, but the tag
            could not be created.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
        '401':
          description: Unauthorized action
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/AuthError'
        '403':
          description: User is not brandzone user and doesn't have tags subscription
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
      requestBody:
        content:
          application/vnd.allegro.public.v1+json:
            schema:
              $ref: '#/components/schemas/TagRequest'
        description: request
        required: true
    get:
      tags:
        - Offer tags
      summary: "Get the user's tags"
      description: >-
        Use this resource to get a list of tags defined by the specified user (Defaults: limit = 1000, offset = 0).
        <a href="../../news/2018-09-24-tagi-zalaczniki/#PobierzTagi" target="_blank">Read more</a>.
      operationId: listSellerTagsGET_1
      parameters:
        - name: limit
          in: query
          description: The limit of elements in the response.
          required: false
          schema:
            type: integer
            format: int32
            default: 1000
            minimum: 1
            maximum: 1000
        - name: offset
          in: query
          description: The offset of elements in the response.
          required: false
          schema:
            type: integer
            format: int32
            default: 0
            minimum: 0
      responses:
        '200':
          description: Successfully returned the requested list of tags
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/TagListResponse'
        '401':
          description: Unauthorized action
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/AuthError'
        '403':
          description: User is not brandzone user and doesn't have tags subscription
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'

  '/sale/offer-tags/{tagId}':
    delete:
      tags:
        - Offer tags
      summary: "Delete a tag"
      description:
        'Use this resource to delete the tag. <a href="../../news/2018-09-24-tagi-zalaczniki/#UsunTagZKonta" target="_blank">Read more</a>.'
      operationId: deleteTagUsingDELETE
      parameters:
        - name: tagId
          in: path
          description: Tag identifier.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successfully deleted tag
        '404':
          description: Tag not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
        '401':
          description: Unauthorized action
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/AuthError'
        '403':
          description: User is not brandzone user and doesn't have tags subscription
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
    put:
      tags:
        - Offer tags
      summary: "Modify a tag"
      description:
        'Use this resource to update a tag. <a href="../../news/2018-09-24-tagi-zalaczniki/#ZmienNazwe" target="_blank">Read more</a>.'
      operationId: updateTagPUT
      parameters:
        - name: tagId
          in: path
          description: Tag identifier.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully updated the requested tag
        '422':
          description: >-
            Validation failed - your request was correct, but the tag could not be updated.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
        '401':
          description: Unauthorized action
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/AuthError'
        '403':
          description: User is not brandzone user and doesn't have tags subscription
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
      requestBody:
        content:
          application/vnd.allegro.public.v1+json:
            schema:
              $ref: '#/components/schemas/TagRequest'
        description: request
        required: true

  '/sale/offers/{offerId}/tags':
    post:
      tags:
        - Offer tags
      summary: "Assign tags to an offer"
      description: >-
        Use this resource to assign a tag to offer. <a href="../../news/2018-09-24-tagi-zalaczniki/#PrzypiszTagiDoOferty" target="_blank">Read more</a>.
      operationId: assignTagToOfferPOST
      parameters:
        - name: offerId
          in: path
          description: Offer identifier.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully assigned tag to offer
        '400':
          description: Bad request
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
        '403':
          description: Forbidden - offer is created by someone else or user is not brandzone user or doesn't have tags subscription
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
        '422':
          description: >-
            Validation failed - your request was correct, but the tag
            could not be assigned.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
        '401':
          description: Unauthorized action
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/AuthError'
      requestBody:
        content:
          application/vnd.allegro.public.v1+json:
            schema:
              $ref: '#/components/schemas/TagIdsRequest'
        description: request
        required: true
    get:
      tags:
        - Offer tags
      summary: "Get tags assigned to an offer"
      description: >-
        Use this resource to get a list of tags assigned to offer. <a href="../../news/2018-09-24-tagi-zalaczniki/#PobierzTagiZOferty" target="_blank">Read more</a>.
      operationId: listAssignedOfferTagsGET
      parameters:
        - name: offerId
          in: path
          description: Offer identifier.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully returned list of assigned tags
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/TagListResponse'
        '401':
          description: Unauthorized action
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/AuthError'
        '403':
          description: User is not brandzone user and doesn't have tags subscription
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'

  '/sale/offers/{offerId}/rating':
    get:
      tags:
        - Offer rating
      summary: "Get offer rating"
      description: 'Use this resource to get offer rating.'
      operationId: offerRatingGET
      parameters:
        - name: offerId
          in: path
          description: Offer identifier.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/OfferRating'
        '403':
          description: Offer access denied.
        '404':
          description: Offer not found.
        '401':
          description: Unauthorized action.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/AuthError'

  '/sale/offers/{offerId}/shipping-rates':
    get:
      tags:
        - Delivery
      summary: "[BETA] Get shipping rates assigned to an offer"
      description: >-
        Use this resource to get the delivery methods and costs defined in the offer when there is no seller's shipping rates set attached to offer.
      operationId: getOfferShippingRatesGET
      parameters:
        - name: offerId
          in: path
          description: Offer identifier.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully returned assigned shipping rates set
          content:
            application/vnd.allegro.beta.v1+json:
              schema:
                $ref: '#/components/schemas/OfferShippingRates'
        '401':
          description: Unauthorized action
          content:
            application/vnd.allegro.beta.v1+json:
              schema:
                $ref: '#/components/schemas/AuthError'
        '404':
          description: Not Found
          content:
            application/vnd.allegro.beta.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
  '/sale/products':
    get:
      tags:
        - Products
      summary: "Get search products results"
      description: >-
        Use this resource to get a list of products according to provided parameters.
        At least ean or phrase parameter is required. <a href="../../productization/#search" target="_blank">Read more</a>.
      operationId: getSaleProducts
      parameters:
        - name: ean
          in: query
          description: The EAN values can include EAN, ISBN, and UPC identifier types.
          required: false
          schema:
            type: string
            maxLength: 18
        - name: phrase
          in: query
          description: Search phrase.
          required: false
          schema:
            type: string
            maxLength: 1024
        - name: category.id
          in: query
          description: The category identifier to filter results.
          required: false
          schema:
            type: string
        - name: "Dynamic filters"
          in: query
          description: >-
            You can filter and customize your search results to find exactly what you need by applying filters ids and their dictionary values to query according to the flowing pattern: id=value.
            When the filter definition looks like:
              ````
              {
                "id": "127448",
                "name": "Kolor",
                "type": "SINGLE",
                "values": [
                  {
                    "name": "biaÅ‚y",
                    "value": "2"
                  },
                  {
                    "name": "czarny",
                    "value": "1" }
                ]
              }
              ````
            You can use 'Kolor' filter to query results, i.e.:
              * `127448=2` for "biaÅ‚y"
              * `127448=1` for "czarny".
          required: false
          schema:
            type: object
            additionalProperties:
              x-additionalPropertiesName: filter's id
              type: string
              description: Filter value.
        - name: page.id
          in: query
          description: A "cursor" to the next set of results.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/GetSaleProductsResponse'
        '401':
          description: Unauthorized
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/AuthError'
        '422':
          description: >-
            One of parameters have invalid value.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
  '/sale/products/{productId}':
    get:
      tags:
        - Products
      summary: 'Get all data of the particular product'
      description: 'Use this resource to retrieve all data of the particular product. <a href="../../productization/#details" target="_blank">Read more</a>.'
      operationId: getSaleProduct
      parameters:
        - name: productId
          in: path
          description: The product identifier.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Product returned successfully
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/SaleProductDto'
        '401':
          description: Unauthorized
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/AuthError'
        '404':
          description: Not Found
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
  '/sale/product-proposals':
    post:
      tags:
        - Products
      summary: "Propose a product"
      description: >-
        Use this resource to propose a product.
      operationId: proposeSaleProduct
      responses:
        '201':
          description: Product proposed successfully.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/SaleProductDto'
        '400':
          description: Bad request
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
        '401':
          description: Unauthorized
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/AuthError'
        '403':
          description: Forbidden - not allowed to access.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
        '409':
          description: >-
            Product already exists. Url of the existing product is provided in the HTTP Location header field of the response.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
        '422':
          description: Unprocessable Entity
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
      requestBody:
        content:
          application/vnd.allegro.public.v1+json:
            schema:
              $ref: '#/components/schemas/ProposeSaleProductRequest'
        required: true
  '/sale/product-offers':
    post:
      tags:
        - Offer management
      summary: "Create offer based on product"
      description: >-
        Use this resource to create offer based on product. Read more: <a href="../../product_offers/" target="_blank">PL</a> / <a href="../../en/product_offers/" target="_blank">EN</a>.
      operationId: createProductOffers
      responses:
        '201':
          description: Offer created successfully.
          content:
            application/vnd.allegro.beta.v1+json:
              schema:
                $ref: '#/components/schemas/SaleProductOfferResponse'
        '400':
          description: Bad request
          content:
            application/vnd.allegro.beta.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
        '401':
          description: Unauthorized
          content:
            application/vnd.allegro.beta.v1+json:
              schema:
                $ref: '#/components/schemas/AuthError'
        '403':
          description: Forbidden - not allowed to access.
          content:
            application/vnd.allegro.beta.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
        '422':
          description: Unprocessable Entity
          content:
            application/vnd.allegro.beta.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
      requestBody:
        content:
          application/vnd.allegro.beta.v1+json:
            schema:
              $ref: '#/components/schemas/SaleProductOfferRequest'
        required: true
  '/sale/compatibility-list/supported-categories':
    get:
      tags:
      - Compatibility List
      summary: 'Get list of categories where compatibility list is supported'
      description: 'Compatibility list is available in particular categories, this resource allows to get the list of these categories with additional details.'
      operationId: "getCategoriesThatSupportCompatibilityList"
      responses:
        '200':
          description: 'Configuration of supported categories.'
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/CompatibilityListSupportedCategoriesDto'
        '401':
          description: 'Unauthorized'
  '/sale/compatibility-list-suggestions':
    get:
      tags:
        - Compatibility List
      summary: 'Get suggested compatibility list.'
      description: 'Resource allows to fetch compatibility list suggestion for given offer or product.'
      operationId: "getCompatibilityListSuggestion"
      parameters:
        - name: offer.id
          in: query
          description: 'Offer id on the basis of which we will return the suggested compatibility list.'
          required: false
          schema:
            type: string
        - name: product.id
          in: query
          description: 'Product id on the basis of which we will return the suggested compatibility list.'
          required: false
          schema:
            type: string
      responses:
        '200':
          description: 'Compatibility list suggestion returned successfully.'
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/CompatibilityList'
        '400':
          description: 'Bad request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
        '401':
          description: 'Unauthorized.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthError'
        '404':
          description: 'Suggestion was not found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
  '/sale/compatible-products/groups':
    get:
      tags:
      - Compatibility List
      summary: 'Get list of compatible product groups'
      description: 'Compatible products are organized in groups, this resource allows to browse these groups.'
      operationId: 'getCompatibleProductsGroups'
      parameters:
        - name: If-Modified-Since
          in: header
          description: 'Date of last data modification. If data has been modified after specified date,
                        full set of data is returned. If header is not specified, full set of data
                        is returned. Date has to be provided in HTTP-date format.'
          required: false
          schema:
            type: string
            format: '<day-name>, <day> <month> <year> <hour>:<minute>:<second> GMT'
            example: 'Mon, 01 Dec 2018 10:00:00 GMT'
        - name: type
          in: query
          description: 'Type of compatible products. You can find available types in the response
                        for the GET <a href="/documentation/#tag/Compatibility-List/paths/~1sale~1compatibility-list~1supported-categories/get">supported-categories</a> resource.
                        You can use value provided in `itemsType`, for categories where `inputType=ID`.'
          required: true
          schema:
            type: string
            example: 'CAR'
        - name: limit
          in: query
          description: 'The limit of returned items.'
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 200
            default: 200
        - name: offset
          in: query
          description: 'The offset of returned items.'
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: 'Groups of compatible products returned successfully.'
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/CompatibleProductsGroupsDto'
        '304':
          description: 'Data has not been modified after the date provided in If-Modified-Since header.'
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
        '401':
          description: 'Unauthorized'
  '/sale/compatible-products':
    get:
      tags:
      - Compatibility List
      summary: 'Get list of compatible products'
      description: 'Resource allows to fetch compatible products of given type.'
      operationId: "getCompatibleProducts"
      parameters:
      - name: If-Modified-Since
        in: header
        description: 'Date of last data modification. If data has been modified after specified date,
                      full set of data is returned. If header is not specified, full set of data
                      is returned. Date has to be provided in HTTP-date format.
                      Header is ignored if `phrase` parameter is used.'
        required: false
        schema:
          type: string
          format: '<day-name>, <day> <month> <year> <hour>:<minute>:<second> GMT'
          example: 'Mon, 01 Dec 2018 10:00:00 GMT'
      - name: type
        in: query
        description: 'Type of compatible products. You can find available types in the response
                     for the GET <a href="/documentation/#tag/Compatibility-List/paths/~1sale~1compatibility-list~1supported-categories/get">supported-categories</a> resource.
                     You can use value provided in `itemsType`, for categories where `inputType=ID`.'
        required: true
        schema:
          type: string
          example: 'CAR'
      - name: group.id
        in: query
        description: 'Group identifier from `/sale/compatible-products/groups` resource.
                      Parameter is required when parameter `tecdoc.kTypNr` or `tecdoc.nTypNr` or `phrase` is not specified.'
        required: false
        schema:
          type: string
      - name: tecdoc.kTypNr
        in: query
        description: 'Identifier of passenger vehicle (kTypNr) from TecDoc database.
                      When used, `group.id` parameter is ignored.'
        required: false
        schema:
          type: string
      - name: tecdoc.nTypNr
        in: query
        description: 'Identifier of commercial vehicle (nTypNr) from TecDoc database.
                      When used, `group.id` parameter is ignored.'
        required: false
        schema:
          type: string
      - name: phrase
        in: query
        description: 'Query for compatible products.
                      When used, parameters: `group.id`, `limit`, `offset` and header `If-Modified-Since` are ignored.'
        required: false
        schema:
          type: string
      - name: limit
        in: query
        description: 'The limit of returned items. If `phrase` parameter is present,
                      parameter is ignored and maximum value is set to `200`.'
        required: false
        schema:
          type: integer
          minimum: 1
          maximum: 200
          default: 200
      - name: offset
        in: query
        description: 'The offset of returned items. If `phrase` parameter is present, parameter is ignored.'
        required: false
        schema:
          type: integer
          minimum: 0
          default: 0
      responses:
        '200':
          description: 'Compatible products returned successfully.'
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/CompatibleProductsListDto'
        '304':
          description: 'Data has not been modified after the date provided in If-Modified-Since header.'
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
        '401':
          description: 'Unauthorized'
  '/account/additional-emails':
    get:
      tags:
        - Information about user
      summary: "Get user's additional emails"
      description: "Use this resource to get a list of all additional email addresses assigned to account."
      operationId: getListOfAdditionalEmailsUsingGET
      responses:
        '200':
          description: List of user's additional emails returned successfully
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/AdditionalEmailsResponse'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthError'
    post:
      tags:
        - Information about user
      summary: "Add a new additional email address to user's account"
      description: "Use this resource to add a new additional email address to account."
      operationId: addAdditionalEmailUsingPOST
      responses:
        '201':
          description: Additional email added successfully
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/AdditionalEmail'
        '400':
          description: Bad request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthError'
        '422':
          description: Email address provided in the request is not valid
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
      requestBody:
        content:
          application/vnd.allegro.public.v1+json:
            schema:
              $ref: '#/components/schemas/AdditionalEmailRequest'
        description: request
        required: true
  '/account/additional-emails/{emailId}':
    get:
      tags:
        - Information about user
      summary: "Get information about a particular additional email"
      description: "Use this resource to retrieve a single additional email."
      operationId: getAdditionalEmailUsingGET
      parameters:
        - name: emailId
          in: path
          description: Id of the additional email.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Additional email returned successfully
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/AdditionalEmail'
        '401':
          description: Unauthorized
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/AuthError'
        '404':
          description: Additional email not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
    delete:
      tags:
        - Information about user
      summary: "Delete an additional email address"
      description: "Use this resource to delete one of additional emails."
      operationId: deleteAdditionalEmailUsingDELETE
      parameters:
        - name: emailId
          in: path
          description: Id of the additional email to be deleted.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successfully deleted additional email
        '401':
          description: Unauthorized
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/AuthError'
        '404':
          description: Additional email not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
  '/payments/payment-operations':
    get:
      tags:
        - Payments
      summary: Payment operations history
      description: 'Use this endpoint to get the list of the seller payment operations. Read more: <a href="../../charges/#historia-operacji-pÅ‚atniczych" target="_blank">PL</a> / <a href="../../en/charges/#payment-operations" target="_blank">EN</a>.'
      operationId: getPaymentsOperationHistory
      parameters:
        - name: wallet.type
          in: query
          description: >-
            Type of the wallet:
            * AVAILABLE - operations available for payout.
            * WAITING - operations temporarily suspended for payout.
          required: false
          schema:
            type: string
            default: AVAILABLE
            enum:
              - AVAILABLE
              - WAITING
        - name: wallet.paymentOperator
          in: query
          description: >-
            Payment operator:
            * PAYU - operations processed by PAYU operator.
            * P24 - operations processed by PRZELEWY24 operator.
          required: false
          schema:
            type: string
            enum:
              - PAYU
              - P24
        - name: payment.id
          in: query
          description: The payment ID.
          required: false
          schema:
            type: string
            format: uuid
        - name: participant.login
          in: query
          description: >-
            Login of the participant. In case of REFUND_INCREASE operation this is the login of the seller,
            in other cases, of the buyer.
          required: false
          schema:
            type: string
        - name: occurredAt.gte
          in: query
          description: The minimum date and time of operation occurrence in ISO 8601 format.
          example: "2019-05-08T09:45:20.818Z"
          required: false
          schema:
            type: string
            format: date-time
        - name: occurredAt.lte
          in: query
          description: The maximum date and time of operation occurrence in ISO 8601 format.
          required: false
          example: "2019-05-08T09:45:20.818Z"
          schema:
            type: string
            format: date-time
        - name: group
          in: query
          description: >-
            Group of operation types:
            * INCOME - CONTRIBUTION, SURCHARGE, CORRECTION, DEDUCTION_INCREASE.
            * OUTCOME - PAYOUT, PAYOUT_CANCEL, DEDUCTION_CHARGE.
            * REFUND - REFUND_CHARGE, REFUND_CANCEL, REFUND_INCREASE, CORRECTION.
          required: false
          schema:
            type: array
            items:
              type: string
              enum:
                - INCOME
                - OUTCOME
                - REFUND
        - name: limit
          in: query
          required: false
          description: Number of returned operations.
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 50
            default: 50
        - name: offset
          in: query
          required: false
          description: Index of the first returned payment operation from all search results.
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 10000
            default: 0
      responses:
        '401':
          description: Unauthorized
        '200':
          description: The payment operations history for given search criteria returned successfully.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/PaymentOperations'
        '422':
          description: >-
            Returned when any of the given search parameters have an invalid value or when the search result reached
            the limit of found operations - 10000.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
  '/sale/blacklisted-users':
    get:
      tags:
        - Blacklist management
      summary: "Get list of blacklisted users"
      description: "Use this resource to get a list of blacklisted users created on given account."
      operationId: doGetBlackListUsers
      parameters:
        - name: offset
          in: query
          description: Index of first returned user from all results.
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: limit
          in: query
          description: >-
            Maximum number of users in response.
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 25
      responses:
        '200':
          description: List of blacklisted users returned successfully
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/BlackListPagedResponse'
        '401':
          description: Unauthorized
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/AuthError'
    post:
      tags:
        - Blacklist management
      summary: "Add a users to the blacklist"
      description: "Use this resource to add new users to the blacklist on given account. At least one of id or login is required."
      operationId: doAddToBlackList
      responses:
        '201':
          description: Users successfully added to the blacklist.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/BlackListResponse'
        '401':
          description: Unauthorized
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/AuthError'
        '409':
          description: User already added to the blacklist.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
        '400':
          description: Request is invalid
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
      requestBody:
        content:
          application/vnd.allegro.public.v1+json:
            schema:
              $ref: '#/components/schemas/BlacklistRequest'
        description: request
        required: true
  '/sale/blacklisted-users/{excludedUserId}':
    delete:
      tags:
        - Blacklist management
      parameters:
        - name: excludedUserId
          in: path
          description: Remove users from the blacklist.
          required: true
          schema:
            type: integer
            format: int64
      summary: "Remove users from the blacklist"
      description: "Use this resource to remove users from the blacklist on given account."
      operationId: doRemoveFromBlackList
      responses:
        '204':
          description: User removed form the blacklist successfully.
        '401':
          description: Unauthorized
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/AuthError'
  '/bidding/offers/{offerId}/bid':
    put:
      tags:
      - Auctions and Bidding
      operationId: placeBid
      summary: 'Place a bid in an auction'
      description: "Place a bid in an auction."
      parameters:
      - name: offerId
        in: path
        required: true
        description: The offer ID.
        schema:
          type: string
      requestBody:
        content:
          'application/vnd.allegro.public.v1+json':
            schema:
              type: object
              title: BidRequest
              description: The bid request.
              required:
              - maxAmount
              properties:
                maxAmount:
                  $ref: '#/components/schemas/MaxPrice'
      responses:
        '200':
          description: Bid succesfully placed
          content:
            'application/vnd.allegro.public.v1+json':
              schema:
                $ref: '#/components/schemas/MyBidResponse'
        '400':
          description: Bad request.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
        '401':
          description: Unauthorized
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/AuthError'
        '404':
          description: Auction not found.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
        '422':
            description: If bidding was not allowed (see message for explanation).
            content:
              application/vnd.allegro.public.v1+json:
                schema:
                  $ref: '#/components/schemas/ErrorsHolder'
    get:
      tags:
        - Auctions and Bidding
      operationId: getBid
      summary: "Get current user's bid information"
      description: "Get current user's bid information."
      parameters:
        - name: offerId
          in: path
          required: true
          description: The offer ID.
          schema:
            type: string
      responses:
        '200':
          description: Bid information succesfully found.
          content:
            'application/vnd.allegro.public.v1+json':
              schema:
                $ref: '#/components/schemas/MyBidResponse'
        '404':
          description: Auction not found or user did not bid in the auction.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
  '/sale/offer-events':
    get:
      tags:
        - User's offer information
      summary: "Get events about the seller's offers"
      description: >-
        Use this endpoint to get events concerning changes in the authorized seller's offers.

        At present we support the following events:
          - OFFER_ACTIVATED - offer is visible on site and available for purchase, occurs when offer status changes from ACTIVATING to ACTIVE.
          - OFFER_CHANGED - occurs when offer's fields has been changed e.g. description or photos.
          - OFFER_ENDED - offer is no longer available for purchase, occurs when offer status changes from ACTIVE to ENDED.
          - OFFER_STOCK_CHANGED - stock in an offer was changed either via purchase or by seller.
          - OFFER_PRICE_CHANGED - occurs when price in an offer was changed.
          - OFFER_ARCHIVED - offer is no longer available on listing and has been archived.
          - OFFER_BID_PLACED - bid was placed on the offer
          - OFFER_BID_CANCELED - bid for offer was canceled

        Returned events may occur by actions made via browser or API.
        The resource allows you to get events concerning active offers and offers scheduled for activation (status ACTIVE and ACTIVATING). Returned events do not concern offers in INACTIVE and ENDED status (the exception is OFFER_ARCHIVED event).
        Please note that one change may result in more than one event. Read more: <a href="../../my_offers/#dziennik-zdarzeÅ„-w-ofertach-sprzedawcy" target="_blank">PL</a> / <a href="../../en/my_offers/#event-journal-concerning-changes-in-seller-s-offers" target="_blank">EN</a>.

      operationId: getOfferEvents
      parameters:
        - in: query
          name: from
          required: false
          description: The ID of the last seen event. Events that occured after the given event will be returned.
          schema:
            type: string
            example: "MTEzMjQzODU3NA"
            maxLength: 256
        - in: query
          name: limit
          required: false
          description: The number of events that will be returned in the response.
          schema:
            type: integer
            default: 100
            minimum: 1
            maximum: 1000
        - in: query
          name: type
          required: false
          description: >-
            The types of events that will be returned in the response. All types of events are returned by default.
          schema:
            type: array
            items:
              type: string
              enum:
                - OFFER_ACTIVATED
                - OFFER_CHANGED
                - OFFER_ENDED
                - OFFER_STOCK_CHANGED
                - OFFER_PRICE_CHANGED
                - OFFER_ARCHIVED
                - OFFER_BID_PLACED
                - OFFER_BID_CANCELED
      responses:
        '200':
          description: The list of offer events returned successfully.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/SellerOfferEventsResponse'
              examples:
                offerEvent:
                  summary: offer event
                  value:
                    id: "MTEzMjQzODU3NA"
                    occurredAt: "2019-06-26T15:26:43.891Z"
                    type: "OFFER_ACTIVATED"
                    offer:
                      id: "2865624934"
                offerEndedEvent:
                  summary: offer ended event
                  value:
                    id: "MTEzMjQzODU3NA"
                    occurredAt: "2019-06-26T15:26:43.891Z"
                    type: "OFFER_ENDED"
                    offer:
                      id: "2865624934"
                      publication:
                        endedBy: "USER"
                offerBidPlaced:
                  summary: offer bid placed event
                  value:
                    id: "MTEzMjQzODU3NA"
                    occurredAt: "2019-06-26T15:26:43.891Z"
                    type: "OFFER_BID_PLACED"
                    offer:
                      id: "2865624934"
                offerBidCanceled:
                  summary: offer bid canceled event
                  value:
                    id: "MTEzMjQzODU3NA"
                    occurredAt: "2019-06-26T15:26:43.891Z"
                    type: "OFFER_BID_CANCELED"
                    offer:
                      id: "2865624934"
        '400':
          description: >-
            Invalid parameters supplied in the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthError'
  '/sale/badge-campaigns':
    get:
      tags:
        - Badge campaigns
      summary: "[BETA] Get a list of available badge campaigns"
      description: >-
        Badge campaigns are another way to promote your offers.
        You can apply for a badge, which - depending on a type - will be displayed on your offer page of on the list of offers.

        First - use this resource to get a list of all available badge campaigns at the moment, then use *POST /sale/badges* to apply for badge.
        <a href="/badge/#1" target="_blank">Read more</a>.
      operationId: badgeCampaigns_get_all
      responses:
        '200':
          description: List of available badge campaigns.
          content:
            application/vnd.allegro.beta.v1+json:
              schema:
                $ref: '#/components/schemas/GetBadgeCampaignsList'
              examples:
                badge-campaigns:
                  summary: Badge campaigns
                  value:
                    badgeCampaigns:
                      - id: 'BARGAIN'
                        name: 'Strefa okazji'
                        type: "DISCOUNT"
                        eligibility:
                          eligible: true
                          refusalReasons: []
                        application:
                          type: 'ALWAYS'
                        visibility:
                          type: 'WITHIN'
                          from: '2018-01-01T23:00:00Z'
                          to: '2020-10-04T23:00:00Z'
                        publication:
                          type: 'UNTIL'
                          to": '2020-10-03T23:00:00Z'
                      - id: 'HIT'
                        name: 'Hit'
                        type: 'STANDARD'
                        eligibility:
                          eligible: false
                          refusalReasons:
                            - code: 'BB1'
                              messages:
                                - text: 'Account does not meet the seller quality criteria'
                                  link: null
                        application:
                          type: 'NEVER'
                        visibility:
                          type: 'ALWAYS'
                        publication:
                          type: 'SINCE'
                          from: '2018-11-04T23:00:00Z'
        '401':
          description: Unauthorized.
          content:
            application/vnd.allegro.beta.v1+json:
              schema:
                $ref: '#/components/schemas/AuthError'
        '403':
          description: Account is not a Company account type.
          content:
            application/vnd.allegro.beta.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
              examples:
                not-business-account:
                  summary: 'Account is not a Company account type.'
                  value:
                    errors:
                      - code: 'BB2'
                        details: null
                        message: 'Account is not a Company account type'
                        path: null
                        userMessage: 'Account is not a Company account type'
  '/sale/badges':
    post:
      tags:
        - Badge campaigns
      summary: "[BETA] Apply for badge in selected offer"
      description: >-
        This resource allows you to apply for a badge. Most badges involve additional fee charged.

        Your badge application will be verified and you will be notified about the verification status via e-mail.
        You can use *Location* provided in header of the response to track your application status.
        Application will be removed after 30 days when status of the application was changed form PROCESSED or DECLINED.

        Fees will be charged in accordance with Annex No. 1 to the
          <a href="https://allegro.pl/regulaminy/regulamin-strefy-okazji-9dGVAPB69In"
            target="_blank">Daily deals zone terms and conditions</a>.

        By using this resource you agree to the
          <a href="https://allegro.pl/regulaminy/regulamin-strefy-okazji-9dGVAPB69In"
            target="_blank">Daily deals zone terms and conditions</a>
        or
          <a href="https://allegro.pl/regulaminy/regulamin-programu-bonusowego-prowizja-nawet-0-5-0KPkAE7wkcv"
            target="_blank">Commission discount terms and conditions</a>.
        <a href="/badge/#2" target="_blank">Read more</a>.
      operationId: postBadges
      responses:
        '202':
          description: Successfully applied for a badge.
          content:
            application/vnd.allegro.beta.v1+json:
              schema:
                $ref: '#/components/schemas/BadgeApplication'
              examples:
                discountResponse:
                  summary: 'Discount badge application'
                  value:
                    id: '01234567-89ab-0123-456789ab'
                    createdAt: '2011-12-03T10:15:30Z'
                    updatedAt: '2011-12-03T10:15:30Z'
                    campaign:
                      id: 'BARGAIN'
                    offer:
                      id: '987654321'
                    prices:
                      market:
                        amount: '11.23'
                        currency: 'PLN'
                      bargain:
                        amount: '10.00'
                        currency: 'PLN'
                    process:
                      status: 'REQUESTED'
                      rejectionReasons: []
                limitResponse:
                  summary: 'Discount badge application with purchase limit'
                  value:
                    id: '01234567-89ab-0123-456789ab'
                    createdAt: '2011-12-03T10:15:30Z'
                    updatedAt: '2011-12-03T10:15:30Z'
                    campaign:
                      id: 'BARGAIN'
                    offer:
                      id: '987654321'
                    prices:
                      market:
                        amount: '11.23'
                        currency: 'PLN'
                      bargain:
                        amount: '10.00'
                        currency: 'PLN'
                    purchaseConstraints:
                      limit:
                        perUser:
                          maxItems: '1'
                    process:
                      status: 'REQUESTED'
                      rejectionReasons: []
        '400':
          description: Syntactically incorrect request.
          content:
            application/vnd.allegro.beta.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
        '401':
          description: Unauthorized
          content:
            application/vnd.allegro.beta.v1+json:
              schema:
                $ref: '#/components/schemas/AuthError'
        '403':
          description: Account is not a Company account type.
          content:
            application/vnd.allegro.beta.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
              examples:
                not-business-account:
                  summary: 'Account is not a Company account type.'
                  value:
                    errors:
                      - code: 'BB2'
                        details: null
                        message: 'Account is not a Company account type'
                        path: null
                        userMessage: 'Account is not a Company account type'
        '422':
          description: Validation error. Invalid parameters provided in the request.
          content:
            application/vnd.allegro.beta.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
              examples:
                unprocessable-request:
                  summary: 'Amount is not a valid number.'
                  value:
                    errors:
                      - code: 'BB5'
                        details: null
                        message: "Currency is not equal to 'PLN'"
                        path: 'prices.bargain.currency'
                        userMessage: "Currency is not equal to 'PLN'"
                      - code: 'BB6'
                        details: null
                        message: 'Amount is not a valid number'
                        path: 'prices.bargain.amount'
                        userMessage: 'Amount is not a valid number'
      requestBody:
        content:
          application/vnd.allegro.beta.v1+json:
            schema:
              $ref: '#/components/schemas/BadgeApplicationRequest'
            examples:
              discount:
                summary: 'Discount'
                value:
                  campaign:
                    id: 'BARGAIN'
                  offer:
                    id: '12345678'
                  prices:
                    market:
                      amount: '19.99'
                      currency: 'PLN'
                    bargain:
                      amount: '9.99'
                      currency: 'PLN'
              standard:
                summary: 'Standard'
                value:
                  campaign:
                    id: 'HIT'
                  offer:
                    id: '12345678'
              sourcing:
                summary: 'Sourcing'
                value:
                  campaign:
                    id: 'SOURCING_CAMPAIGN'
                  offer:
                    id: '12345678'
                  prices:
                    bargain:
                      amount: '9.99'
                      currency: 'PLN'
              limit:
                summary: 'Discount with purchase limit'
                value:
                  campaign:
                    id: 'BARGAIN'
                  offer:
                    id: '12345678'
                  prices:
                    market:
                      amount: '19.99'
                      currency: 'PLN'
                    bargain:
                      amount: '9.99'
                      currency: 'PLN'
                  purchaseConstraints:
                    limit:
                      perUser:
                        maxItems: '1'

    get:
      tags:
        - Badge campaigns
      summary: '[BETA] Get a list of badges'
      description: >-
        Use this resource to get a list of badges in authorized seller's offers.
        <a href="/badge/#5" target="_blank">Read more</a>.
      operationId: getBadges
      parameters:
        - name: offer.id
          in: query
          description: 'Offer ID.'
          required: false
          schema:
            type: string
        - name: offset
          in: query
          description: 'Offset.'
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: 'The maximum number of badges returned in the response.'
          required: false
          schema:
            type: integer
            default: 50
            minimum: 1
            maximum: 1000
      responses:
        '200':
          description: Successfully returned list of badges.
          content:
            application/vnd.allegro.beta.v1+json:
              schema:
                $ref: '#/components/schemas/BadgesList'
              examples:
                badges:
                  summary: 'List of badges'
                  value:
                    badges:
                      - offer:
                          id: '123456'
                        campaign:
                          id: 'BARGAIN'
                          name: 'Strefa okazji'
                        publication: null
                        prices:
                          market:
                            amount: '20.00'
                            currency: 'PLN'
                        process:
                          status: 'IN_VERIFICATION'
                          rejectionReasons: []
                      - offer:
                          id: '1234567'
                        campaign:
                          id: 'HIT'
                          name: 'Hit'
                        publication:
                          type: 'WITHIN'
                          from: '2019-05-08T05:54:46.966Z'
                          to: '2025-05-01T10:00:00Z'
                        prices: null
                        process:
                          status: 'FINISHED'
                          rejectionReasons: []
                      - offer:
                          id: '1235567'
                        campaign:
                          id: 'NOVELTY'
                          name: 'NowoÅ›Ä‡'
                        publication: null
                        prices: null
                        process:
                          status: 'DECLINED'
                          rejectionReasons:
                            - code: 'BA26'
                              messages:
                                - text: 'Offer does not meet requirements for this badge'
                                  link:  null
                                - text: 'See requirements'
                                  link: 'https://allegro.pl/pomoc/dla-sprzedajacych/promowanie-ofert/specjalne-oznaczenia-ofert-na-listach-YL8zKmBRktz'
        '400':
          description: Invalid values supplied in the query parameters.
          content:
            application/vnd.allegro.beta.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
              examples:
                invalid-parameters:
                  summary: 'Invalid values supplied in the query parameters.'
                  value:
                    errors:
                      - code: 'BB9'
                        details: null
                        message: 'Invalid limit parameter value'
                        path: 'limit'
                        userMessage: 'Invalid limit parameter value'
                      - code: 'BB10'
                        details: null
                        message: 'Invalid offset parameter value'
                        path: 'offset'
                        userMessage: 'Invalid offset parameter value'
        '401':
          description: Unauthorized.
          content:
            application/vnd.allegro.beta.v1+json:
              schema:
                $ref: '#/components/schemas/AuthError'
        '403':
          description: Account is not a Company account type.
          content:
            application/vnd.allegro.beta.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
              examples:
                not-business-account:
                  summary: 'Account is not a Company account type.'
                  value:
                    errors:
                      - code: 'BB2'
                        details: null
                        message: 'Account is not a Company account type'
                        path: null
                        userMessage: 'Account is not a Company account type'
  '/sale/badge-applications/{applicationId}':
    get:
      tags:
        - Badge campaigns
      summary: '[BETA] Get a badge application details'
      description: >-
        Use this resource to get a badge application details.
        <a href="/badge/#3" target="_blank">Read more</a>.
      operationId: badgeApplications_get_one
      parameters:
        - name: applicationId
          in: path
          description: 'Badge application ID.'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully returned badge application.
          content:
            application/vnd.allegro.beta.v1+json:
              schema:
                $ref: '#/components/schemas/BadgeApplication'
              examples:
                processed:
                  summary: Processed
                  value:
                    - id: '81ff5e67-d00b-4141-a79a-68636755df95'
                      createdAt: '2019-05-16T12:49:17.347Z'
                      updatedAt: '2019-05-16T12:49:17.530Z'
                      campaign:
                        id: 'BARGAIN'
                      offer:
                        id: '12345678'
                      prices:
                        bargain:
                          amount: '14.00'
                          currency: 'PLN'
                        market":
                          amount: '25.00'
                          currency: 'PLN'
                      process:
                        status: 'PROCESSED'
                        rejectionReasons: []
                requested:
                  summary: Requested
                  value:
                    - id: '34ff2a86-6d1a-4607-ae22-3a81de4c8dd1'
                      createdAt: '2019-05-16T12:49:17.347Z'
                      updatedAt: '2019-05-16T12:49:17.530Z'
                      campaign:
                        id: 'HIT'
                      offer:
                        id: '12345678'
                      prices: null
                      process:
                        status: 'REQUESTED'
                        rejectionReasons: []
                declined:
                  summary: Declined
                  value:
                    - id: '893d055c-ba0c-4996-94a0-93d593fdd483'
                      createdAt: '2019-05-16T12:49:17.347Z'
                      updatedAt: '2019-05-16T12:49:17.530Z'
                      campaign:
                        id: 'BARGAIN'
                      offer:
                        id: '12345678'
                      prices:
                        bargain: null
                        market:
                          amount: '19.90'
                          currency: 'PLN'
                      process:
                        status: 'DECLINED'
                        rejectionReasons:
                          - code: 'BA2'
                            messages:
                              - text: 'Bargain price or suggested market price not defined'
                                link: null
        '401':
          description: Unauthorized.
          content:
            application/vnd.allegro.beta.v1+json:
              schema:
                $ref: '#/components/schemas/AuthError'
        '403':
          description: Account is not a Company account type.
          content:
            application/vnd.allegro.beta.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
              examples:
                not-business-account:
                  summary: 'Account is not a Company account type'
                  value:
                    errors:
                      - code: 'BB2'
                        details: null
                        message: 'Account is not a Company account type'
                        path: null
                        userMessage: 'Account is not a Company account type'
        '404':
          description: Badge application not found.
          content:
            application/vnd.allegro.beta.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
              examples:
                application-not-found:
                  summary: 'Badge application not found.'
                  value:
                    errors:
                      - code: 'BB8'
                        details: null
                        message: 'Application not found'
                        path: null
                        userMessage: 'Application not found'
  '/sale/badge-applications':
    get:
      tags:
        - Badge campaigns
      summary: '[BETA] Get a list of badge applications'
      description: >-
        Use this resource to get a list of badge applications.
        <a href="/badge/#4" target="_blank">Read more</a>.
      operationId: badgeApplications_get_all
      parameters:
        - name: campaign.id
          in: query
          description: 'Campaign ID.'
          required: false
          schema:
            type: string
        - name: offer.id
          in: query
          description: 'Offer ID.'
          required: false
          schema:
            type: string
        - name: offset
          in: query
          description: 'Offset.'
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: 'The maximum number of applications returned in the response.'
          required: false
          schema:
            type: integer
            default: 50
            minimum: 1
            maximum: 1000
      responses:
        '200':
          description: Successfully returned badge applications list.
          content:
            application/vnd.allegro.beta.v1+json:
              schema:
                $ref: '#/components/schemas/BadgeApplications'
              examples:
                badgeApplications:
                  summary: "List of badge applications."
                  value:
                    badgeApplications:
                      - id: '81ff5e67-d00b-4141-a79a-68636755df95'
                        createdAt: '2019-05-16T12:49:17.347Z'
                        updatedAt: '2019-05-16T12:49:17.530Z'
                        campaign:
                          id: 'BARGAIN'
                        offer:
                          id: '12345678'
                        prices:
                          bargain:
                            amount: '14.00'
                            currency: 'PLN'
                          market":
                            amount: '25.00'
                            currency: 'PLN'
                        process:
                          status: 'PROCESSED'
                          rejectionReasons: []
                      - id: '34ff2a86-6d1a-4607-ae22-3a81de4c8dd1'
                        createdAt: '2019-05-16T12:49:17.347Z'
                        updatedAt: '2019-05-16T12:49:17.530Z'
                        campaign:
                          id: 'HIT'
                        offer:
                          id: '12345678'
                        prices: null
                        process:
                          status: 'REQUESTED'
                          rejectionReasons: []
                      - id: '893d055c-ba0c-4996-94a0-93d593fdd483'
                        createdAt: '2019-05-16T12:49:17.347Z'
                        updatedAt: '2019-05-16T12:49:17.530Z'
                        campaign:
                          id: 'BARGAIN'
                        offer:
                          id: '12345678'
                        prices:
                          bargain: null
                          market:
                            amount: '19.90'
                            currency: 'PLN'
                        process:
                          status: 'DECLINED'
                          rejectionReasons:
                            - code: 'BA2'
                              messages:
                                - text: 'Bargain price or suggested market price not defined'
                                  link: null
        '400':
          description: Invalid values supplied in the query parameters.
          content:
            application/vnd.allegro.beta.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
              examples:
                invalid-parameters:
                  summary: 'Invalid values supplied in the query parameters.'
                  value:
                    errors:
                      - code: 'BB9'
                        details: null
                        message: 'Invalid limit parameter value'
                        path: 'limit'
                        userMessage: 'Invalid limit parameter value'
                      - code: 'BB10'
                        details: null
                        message: 'Invalid offset parameter value'
                        path: 'offset'
                        userMessage: 'Invalid offset parameter value'
        '401':
          description: Unauthorized.
          content:
            application/vnd.allegro.beta.v1+json:
              schema:
                $ref: '#/components/schemas/AuthError'
        '403':
          description: Account is not a Company account type.
          content:
            application/vnd.allegro.beta.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
              examples:
                not-business-account:
                  summary: 'Account is not a Company account type'
                  value:
                    errors:
                      - code: 'BB2'
                        details: null
                        message: 'Account is not a Company account type'
                        path: null
                        userMessage: 'Account is not a Company account type'
  '/payments/refunds':
    post:
      tags:
        - Payments
      summary: Initiate a refund of a payment
      description: Use this endpoint to initiate a refund of a payment.
      operationId: "initiateRefund"
      requestBody:
        content:
          application/vnd.allegro.public.v1+json:
            schema:
              $ref: '#/components/schemas/InitializeRefund'
      responses:
        '201':
          description: Refund request created successfully.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/RefundDetails'
        '400':
          description: Syntactically incorrect request.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
        '401':
          description: Unauthorized.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/AuthError'
        '422':
          description: Unprocessable Entity.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
        '404':
          description: Payment not found.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
    get:
      tags:
        - Payments
      summary: 'Get a list of refunded payments'
      description: 'Get a list of refunded payments.'
      operationId: 'getRefundedPayments'
      parameters:
        - name: limit
          in: query
          required: false
          description: Number of returned operations.
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 50
        - name: offset
          in: query
          required: false
          description: Index of the first returned payment operation from all search results.
          schema:
            type: integer
            format: int32
            minimum: 0
            default: 0
        - name: id
          in: query
          description: ID of the refund.
          required: false
          schema:
            type: string
            format: uuid
        - name: payment.id
          in: query
          description: ID of the payment.
          required: false
          schema:
            type: string
            format: uuid
        - name: occurredAt.gte
          in: query
          description: Minimum date and time when the refund occurred provided in ISO 8601 format.
          example: "2019-05-08T09:45:43.818Z"
          required: false
          schema:
            type: string
            format: date-time
        - name: occurredAt.lte
          in: query
          description: Maximum date and time when the refund occurred provided in ISO 8601 format.
          required: false
          example: "2019-05-08T09:45:32.818Z"
          schema:
            type: string
            format: date-time
        - name: status
          in: query
          description: Current status of payment refund.
          required: false
          schema:
            type: array
            items:
              type: string
              enum:
                - WAITING
                - IN_PROGRESS
                - SUCCESS
                - CANCELED
                - PARTIAL
      responses:
        '200':
          description: List of payments refunds returned successfully.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                properties:
                  refunds:
                    type: array
                    description: Collection of payments refunds.
                    items:
                      $ref: '#/components/schemas/RefundDetails'
                  count:
                    type: integer
                    format: int32
                    description: Number of payment operations returned in search result for the given parameters.
                    example: 50
                  totalCount:
                    type: integer
                    format: int32
                    description: Total number of payment operations for the given parameters.
                    example: 123
        '401':
          description: Unauthorized
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/AuthError'
        '422':
          description: Unprocessable Entity. Returned when any of the given search parameters have an invalid value.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
  '/billing/billing-entries':
    get:
      tags:
        - Billing
      summary: 'Get a list of billing entries'
      description: 'The billing entries are sorted in a descending order (newest first) by date on which they occurred. Read more: <a href="../../charges/#historia-operacji-billingowych" target="_blank">PL</a> / <a href="../../en/charges/#billing-operations" target="_blank">EN</a>.'
      operationId: "getBillingEntries"
      parameters:
        - name: occurredAt.gte
          in: query
          required: false
          description: Date from which billing entries are filtered. If occurredAt.lte is also set, occurredAt.gte cannot be later.
          example: "2019-05-08T09:45:32.818Z"
          schema:
            type: string
            format: date-time
        - name: occurredAt.lte
          in: query
          required: false
          description: Date to which billing entries are filtered. If occurredAt.gte is also set, occurredAt.lte cannot be earlier.
          example: "2019-05-08T09:45:32.818Z"
          schema:
            type: string
            format: date-time
        - name: type.id
          in: query
          required: false
          description: List of billing types by which billing entries are filtered.
          schema:
            type: array
            items:
              type: string
        - name: offer.id
          in: query
          required: false
          description: Offer ID by which billing entries are filtered.
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: Number of returned operations.
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 100
        - name: offset
          in: query
          required: false
          description: Index of the first returned payment operation from all search results.
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 1000
            default: 0
      responses:
        '200':
          description: List of billing entries returned successfully.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                properties:
                  id:
                    type: string
                    format: uuid
                    description: ID of the returned billing entry.
                    example: '09f0b4cc-7880-11e9-8f9e-2a86e4085a59'
                  occurredAt:
                    type: string
                    format: date-time
                    description: Date of billing entry.
                    example: '2019-05-08T09:45:32.818Z'
                  type:
                    type: object
                    properties:
                      id:
                        type: string
                        description: Three-letter code of the billing type of the returned billing entry.
                        example: 'LIS'
                      name:
                        type: string
                        description: Billing type of the returned billing entry.
                          This type is translated based on the value of the "Accept-Language" header.
                          By default a message in English is returned.
                        example: 'Listing fee'
                  offer:
                    type: object
                    description: Offer associated with the returned billing entry.
                    properties:
                      id:
                        type: string
                        description: ID of the offer associated with the billing entry.
                        example: '12345678'
                      name:
                        type: string
                        description: Name of the offer associated with the billing entry.
                        example: 'offer name'
                  value:
                    type: object
                    description: Money value of the returned billing entry.
                    properties:
                      amount:
                        type: string
                        description: Monetary amount of the returned billing entry.
                        example: '100.00'
                      currency:
                        type: string
                        description: Three-letter currency code (ISO-4217) of the returned billing entry.
                        example: 'PLN'
                  tax:
                    type: object
                    description: Tax rate applied to the returned billing entry.
                      Optional field annotation is present if the returned billing entry
                      is exempt from tax or tax is not applicable; possible values are "EXEMPT" and "NOT_APPLICABLE".
                    properties:
                      percentage:
                        type: string
                        description: Tax rate shown as a number in the range 0-100.
                        example: '0'
                      annotation:
                        type: string
                        description: Optional annotation explaining the tax rate.
                        example: 'EXEMPT'
                  balance:
                    type: object
                    description: User account balance calculated on billing date.
                    properties:
                      amount:
                        type: string
                        description: Monetary amount of the balance calculated for the returned billing entry.
                        example: '100.00'
                      currency:
                        type: string
                        description: Three-letter currency code (ISO-4217) of the balance of the returned billing entry.
                        example: 'PLN'
        '401':
          description: Unauthorized
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/AuthError'
        '406':
          description: Not Acceptable
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
        '422':
          description: Unprocessable Entity
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
  '/billing/billing-types':
    get:
      tags:
        - Billing
      summary: 'Get a list of billing types'
      description: 'List of all billing types. Type names are localized according to "Accept-Language" header. Read more: <a href="../../charges/#historia-operacji-billingowych" target="_blank">PL</a> / <a href="../../en/charges/#billing-operations" target="_blank">EN</a>.'
      operationId: "getBillingTypes"
      security:
        - bearer-token-for-application: []
        - bearer-token-for-user: []
      parameters:
        - in: header
          name: Accept-Language
          required: false
          description: Expected language of name translations. Only Polish and English are currently supported.
          example: "pl-PL"
          schema:
            type: string
            format: string
      responses:
        '200':
          description: List of billing types returned successfully.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                properties:
                  id:
                    type: string
                    format: string
                    description: ID of the billing type.
                    example: 'SUC'
                  description:
                    type: string
                    format: string
                    description: Localized type name.
                    example: 'Prowizja od sprzedaÅ¼y'
        '401':
          description: Unauthorized
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/AuthError'
  '/order/refund-claims/{claimId}':
    get:
      tags:
        - Commission refunds
      summary: 'Get a refund application details'
      description: Use this resource to get refund application details.
      operationId: 'getRefundApplication'
      parameters:
        - name: claimId
          in: path
          description: 'Refund application ID.'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully returned refund application.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/RefundClaim'
        '401':
          description: Unauthorized
        '403':
          description: Refund application does not belong to you.
        '404':
          description: Refund application not found.
        '406':
          description: Not Acceptable
    delete:
      tags:
        - Commission refunds
      summary: 'Cancel a refund application'
      description: Use this resource to cancel a refund application. This cannot be undone.
      operationId: 'cancelRefundApplication'
      parameters:
        - name: claimId
          in: path
          description: 'Refund application ID.'
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Refund application was cancelled successfully.
        '401':
          description: Unauthorized
        '403':
          description: Refund application does not belong to you.
        '404':
          description: Refund application not found.
        '406':
          description: Not Acceptable
        '422':
          description: Refund application has already been processed.
  '/order/refund-claims':
    get:
      tags:
        - Commission refunds
      summary: 'Get a list of refund applications'
      description: Use this resource to get a list of refund applications based on the provided query parameters.
      operationId: 'getRefundApplications'
      parameters:
        - name: lineItem.offer.id
          in: query
          required: false
          description: ID of the offer associated with the refund application.
          schema:
            type: string
        - name: buyer.login
          in: query
          required: false
          description: Login of the buyer that made the purchase associated with the refund application.
          schema:
            type: string
        - name: status
          in: query
          required: false
          description: Status of the refund application.
          schema:
            type: string
            enum:
              - "IN_PROGRESS"
              - "WAITING_FOR_PAYMENT_REFUND"
              - "GRANTED"
              - "REJECTED"
              - "REJECTED_AFTER_APPEAL"
              - "CANCELLED"
              - "APPEALED"
        - name: limit
          in: query
          required: false
          description: Maximum number of returned refund applications in response.
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 25
        - name: offset
          in: query
          required: false
          description: Index of the first returned refund application from all search results.
          schema:
            type: integer
            format: int32
            minimum: 0
            default: 0
      responses:
        '200':
          description: Successfully returned list of refund applications.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                properties:
                  refundClaims:
                    type: array
                    description: Collection of refund applications.
                    items:
                      $ref: '#/components/schemas/RefundClaim'
                  count:
                    type: integer
                    format: int32
                    description: Count of refund applications returned.
        '401':
          description: Unauthorized
        '403':
          description: Refund application does not belong to you.
        '406':
          description: Not Acceptable
        '422':
          description: Unprocessable Entity
    post:
      tags:
        - Commission refunds
      summary: 'Create a refund application'
      description: Use this resource to create a refund application.
      operationId: 'createRefundApplication'
      responses:
        '201':
          description: The refund application was created successfully.
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '406':
          description: Not Acceptable
        '422':
          description: Unprocessable Entity
      requestBody:
        content:
          application/vnd.allegro.public.v1+json:
            schema:
              $ref: '#/components/schemas/RefundClaimRequest'
        required: true
  /charity/fundraising-campaigns:
    get:
      tags:
        - Charity
      summary: Search fundraising campaigns
      operationId: searchFundraisingCampaigns
      parameters:
        - name: limit
          in: query
          description: Maximum number of returned results.
          required: true
          allowEmptyValue: false
          schema:
            maximum: 100
            exclusiveMaximum: false
            minimum: 1
            exclusiveMinimum: false
            type: integer
            format: int32
        - name: phrase
          in: query
          description: Fundraising campaign name or it's Organization name prefix to search for.
          required: true
          allowEmptyValue: false
          schema:
            type: string
      responses:
        200:
          description: The request successfully returns the search result.
          content:
            application/vnd.allegro.beta.v1+json:
              schema:
                $ref: '#/components/schemas/FundraisingCampaigns'
        400:
          description: Invalid or missing query parameters.
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
      deprecated: false
  '/parcel-management/delivery-services':
    get:
      tags:
        - Parcel management
      summary: "Get available delivery services"
      description: >-
        Use this resource to get delivery services available for user. It returns services provided by Allegro and contracts with carriers owned by user and configured by GUI.
      operationId: getAvailableDeliveryServices
      responses:
        '200':
          description: OK
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/DeliveryServices'
        '401':
          description: Unauthorized
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/AuthError'
        '403':
          description: Forbidden
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                properties:
                  errors:
                    type: array
                    description: Array of errors.
                    items:
                      $ref: '#/components/schemas/Error403'
        '504':
          description: Gateway Timeout
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                properties:
                  errors:
                    type: array
                    description: Array of errors.
                    items:
                      $ref: '#/components/schemas/Error504'
  '/parcel-management/parcel-create-commands/{commandId}':
    put:
      tags:
        - Parcel management
      summary: "Create a new parcel"
      description:
        'Use this resource to create parcel for delivery. Read more: <a href="https://developer.allegro.pl/wza/#jak-utworzyÄ‡-nowÄ…-paczkÄ™" target="_blank">PL</a> / <a href="https://developer.allegro.pl/en/wza/#how-to-create-a-new-parcel" target="_blank">EN</a>.'
      operationId: createNewParcel
      parameters:
        - name: commandId
          in: path
          description: Command UUID.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/vnd.allegro.public.v1+json:
            schema:
              $ref: '#/components/schemas/ParcelCreationParameters'
        required: true
      responses:
        '201':
          description: Created
          headers:
            Retry-After:
              schema:
                type: integer
              description: Suggested time interval (in seconds) between follow-up command status queries.
        '400':
          description: Bad request
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                properties:
                  errors:
                    type: array
                    description: Array of errors.
                    items:
                      $ref: '#/components/schemas/Error400'
        '401':
          description: Unauthorized
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/AuthError'
        '403':
          description: Forbidden
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                properties:
                  errors:
                    type: array
                    description: Array of errors.
                    items:
                      $ref: '#/components/schemas/Error403'
    get:
      tags:
        - Parcel management
      summary: "Get parcel creation status"
      description:
        'Use this resource to get parcel creation status.'
      operationId: getParcelCreationStatus
      parameters:
        - name: commandId
          in: path
          description: Command UUID.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          headers:
            Retry-After:
              schema:
                type: integer
              description: Suggested time interval (in seconds) between follow-up command status queries.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                properties:
                  id:
                    type: string
                    description: Sent command UUID.
                    example: "b572cdd0-7f2c-4800-9165-15795bd95f3c"
                  parcelId:
                    type: string
                    description: Id of created parcel.
                    example: "12345"
                  status:
                    type: string
                    description: Parcel creation status.
                    enum:
                      - "IN_PROGRESS"
                      - "SUCCESS"
                      - "ERROR"
                    example: "ERROR"
                  errors:
                    type: array
                    description: Array of errors.
                    items:
                      $ref: '#/components/schemas/Error200'
        '400':
          description: Bad Request
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                properties:
                  errors:
                    type: array
                    description: Array of errors.
                    items:
                      $ref: '#/components/schemas/Error400'
        '401':
          description: Unauthorized
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/AuthError'
        '403':
          description: Forbidden
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                properties:
                  errors:
                    type: array
                    description: Array of errors.
                    items:
                      $ref: '#/components/schemas/Error403'
        '404':
          description: Not Found
        '504':
          description: Gateway Timeout
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                properties:
                  errors:
                    type: array
                    description: Array of errors.
                    items:
                      $ref: '#/components/schemas/Error504'
  '/parcel-management/parcels/{parcelId}':
    get:
      tags:
        - Parcel management
      summary: "Get parcel details"
      description:
        'Use this resource to get parcel details.'
      operationId: getParcelDetails
      parameters:
        - name: parcelId
          in: path
          description: Id of parcel.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ParcelDetails'
        '400':
          description: Bad Request
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                properties:
                  errors:
                    type: array
                    description: Array of errors.
                    items:
                      $ref: '#/components/schemas/Error400'
        '401':
          description: Unauthorized
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/AuthError'
        '403':
          description: Forbidden
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                properties:
                  errors:
                    type: array
                    description: Array of errors.
                    items:
                      $ref: '#/components/schemas/Error403'
        '404':
          description: Not Found
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                properties:
                  errors:
                    type: array
                    description: Array of errors.
                    items:
                      $ref: '#/components/schemas/Error404'
        '504':
          description: Gateway Timeout
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                properties:
                  errors:
                    type: array
                    description: Array of errors.
                    items:
                      $ref: '#/components/schemas/Error504'
  '/parcel-management/pickup-date-proposals':
    get:
      tags:
        - Parcel management
      summary: 'Get parcels pickup date proposals'
      description: >-
        Use this resource to get parcels pickup date proposals. Pickup takes place, when courier arrives to take parcels for shipment.
      operationId: getParcelsPickupDateProposals
      parameters:
        - name: parcelId
          in: query
          description: >-
            Ids of parcels. Passing more than one value will search pickup dates for all of them separately.
            Example: `parcelId=1233&parcelId=1234` - will return pickup date proposals for parcels with ID `1233` and `1234`.
          required: true
          schema:
            type: array
            maxItems: 100
            items:
              type: string
              maxLength: 100
        - name: readyDate
          in: query
          description: Date when parcels will be ready.
          example: "2020-01-01"
          schema:
            type: string
            format: date
      responses:
        '200':
          description: OK
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/PickupDateParcelsProposals'
        '400':
          description: Bad request
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                properties:
                  errors:
                    type: array
                    description: Array of errors.
                    items:
                      $ref: '#/components/schemas/Error400'
        '401':
          description: Unauthorized
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/AuthError'
        '403':
          description: Forbidden
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                properties:
                  errors:
                    type: array
                    description: Array of errors.
                    items:
                      $ref: '#/components/schemas/Error403'
        '404':
          description: Not Found
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                properties:
                  errors:
                    type: array
                    description: Array of errors.
                    items:
                      $ref: '#/components/schemas/Error404'
        '504':
          description: Gateway Timeout
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                properties:
                  errors:
                    type: array
                    description: Array of errors.
                    items:
                      $ref: '#/components/schemas/Error504'
  '/parcel-management/parcel-pickup-request-commands/{commandId}':
    put:
      tags:
        - Parcel management
      summary: "Request parcel pickup"
      description:
        'Use this resource to request pickup for parcels.'
      operationId: requestParcelPickup
      parameters:
        - name: commandId
          in: path
          description: Command UUID.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/vnd.allegro.public.v1+json:
            schema:
              $ref: '#/components/schemas/PickupParcelParameters'
        required: true
      responses:
        '201':
          description: Created
          headers:
            Retry-After:
              schema:
                type: integer
              description: Suggested time interval (in seconds) between follow-up command status queries.
        '400':
          description: Bad request
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                properties:
                  errors:
                    type: array
                    description: Array of errors.
                    items:
                      $ref: '#/components/schemas/Error400'
        '401':
          description: Unauthorized
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/AuthError'
        '403':
          description: Forbidden
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                properties:
                  errors:
                    type: array
                    description: Array of errors.
                    items:
                      $ref: '#/components/schemas/Error403'
    get:
      tags:
        - Parcel management
      summary: "Get parcel pickup status"
      description:
        'Use this resource to get parcel pickup status.'
      operationId: getParcelPickupStatus
      parameters:
        - name: commandId
          in: path
          description: Command UUID.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          headers:
            Retry-After:
              schema:
                type: integer
              description: Suggested time interval (in seconds) between follow-up command status queries.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                properties:
                  id:
                    type: string
                    description: Sent command UUID.
                    example: "b572cdd0-7f2c-4800-9165-15795bd95f3c"
                  status:
                    type: string
                    description: Parcel pickup status.
                    enum:
                      - "IN_PROGRESS"
                      - "SUCCESS"
                      - "PARTIAL_SUCCESS"
                      - "ERROR"
                    example: "ERROR"
                  errors:
                    type: array
                    description: Array of errors.
                    items:
                      $ref: '#/components/schemas/Error200'
        '400':
          description: Bad Request
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                properties:
                  errors:
                    type: array
                    description: Array of errors.
                    items:
                      $ref: '#/components/schemas/Error400'
        '401':
          description: Unauthorized
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/AuthError'
        '403':
          description: Forbidden
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                properties:
                  errors:
                    type: array
                    description: Array of errors.
                    items:
                      $ref: '#/components/schemas/Error403'
        '404':
          description: Not Found
        '504':
          description: Gateway Timeout
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                properties:
                  errors:
                    type: array
                    description: Array of errors.
                    items:
                      $ref: '#/components/schemas/Error504'
  '/parcel-management/parcels/label':
    get:
      tags:
        - Parcel management
      summary: 'Get parcel label'
      description: >-
        Use this resource to get label for created parcel.
        <br/>Returned content type depends on created parcel.
      operationId: getParcelLabel
      parameters:
        - name: parcelId
          in: query
          description: Id of parcel.
          required: true
          schema:
            type: string
        - name: pageFormat
          in: query
          description: Label page format. Only for PDF file.
          required: false
          schema:
            type: string
            enum:
              - A4
              - A6
      responses:
        '200':
          description: OK
          content:
            application/pdf:
              schema:
                type: string
                format: binary
                description: File in a binary format
            plain/text:
              schema:
                type: string
                format: text
                description: File in a text format
        '204':
          description: No Label For Given Parcel
        '400':
          description: Bad Request
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                properties:
                  errors:
                    type: array
                    description: Array of errors.
                    items:
                      $ref: '#/components/schemas/Error400'
        '401':
          description: Unauthorized
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/AuthError'
        '403':
          description: Forbidden
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                properties:
                  errors:
                    type: array
                    description: Array of errors.
                    items:
                      $ref: '#/components/schemas/Error403'
        '404':
          description: Parcel Not Found or Parcel Label Is Not Ready Yet
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                properties:
                  errors:
                    type: array
                    description: Array of errors.
                    items:
                      $ref: '#/components/schemas/Error404'
        '504':
          description: Gateway Timeout
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                properties:
                  errors:
                    type: array
                    description: Array of errors.
                    items:
                      $ref: '#/components/schemas/Error504'
  '/parcel-management/parcels/protocol':
    get:
      tags:
        - Parcel management
      summary: 'Get parcels protocol'
      description: >-
        Use this resource to get parcels protocol.
      operationId: getParcelsProtocol
      parameters:
        - name: parcelId
          in: query
          description: >-
            Ids of parcels. Passing more than one value will generate protocol for all of them.
            Example: `parcelId=1233&parcelId=1234` - returns protocol for parcels with ID `1233` and `1234`.
          required: true
          schema:
            type: array
            maxItems: 100
            items:
              type: string
              maxLength: 100
      responses:
        '200':
          description: OK
          content:
            application/pdf:
              schema:
                type: string
                format: binary
                description: File in a binary format
        '204':
          description: No Protocol For Given Parcels
        '401':
          description: Unauthorized
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/AuthError'
        '400':
          description: Bad Request
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                properties:
                  errors:
                    type: array
                    description: Array of errors.
                    items:
                      $ref: '#/components/schemas/Error400'
        '403':
          description: Forbidden
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                properties:
                  errors:
                    type: array
                    description: Array of errors.
                    items:
                      $ref: '#/components/schemas/Error403'
        '404':
          description: Parcels Not Found or Parcels Protocol Is Not Ready Yet
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                properties:
                  errors:
                    type: array
                    description: Array of errors.
                    items:
                      $ref: '#/components/schemas/Error404'
        '504':
          description: Gateway Timeout
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                properties:
                  errors:
                    type: array
                    description: Array of errors.
                    items:
                      $ref: '#/components/schemas/Error504'
  '/parcel-management/parcel-cancel-commands/{commandId}':
    put:
      tags:
        - Parcel management
      summary: "Cancel parcel"
      description:
        'Use this resource to cancel parcel.'
      operationId: cancelParcel
      parameters:
        - name: commandId
          in: path
          description: Command UUID.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/vnd.allegro.public.v1+json:
            schema:
              $ref: '#/components/schemas/CancelParcelParameters'
        required: true
      responses:
        '201':
          description: Created
          headers:
            Retry-After:
              schema:
                type: integer
              description: Suggested time interval (in seconds) between follow-up command status queries.
        '400':
          description: Bad request
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                properties:
                  errors:
                    type: array
                    description: Array of errors.
                    items:
                      $ref: '#/components/schemas/Error400'
        '401':
          description: Unauthorized
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/AuthError'
        '403':
          description: Forbidden
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                properties:
                  errors:
                    type: array
                    description: Array of errors.
                    items:
                      $ref: '#/components/schemas/Error403'
    get:
      tags:
        - Parcel management
      summary: "Get parcel cancellation status"
      description:
        'Use this resource to get parcel cancellation status.'
      operationId: getParcelCancellationStatus
      parameters:
        - name: commandId
          in: path
          description: Command UUID.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          headers:
            Retry-After:
              schema:
                type: integer
              description: Suggested time interval (in seconds) between follow-up command status queries.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                properties:
                  id:
                    type: string
                    description: Sent command UUID.
                    example: "b572cdd0-7f2c-4800-9165-15795bd95f3c"
                  status:
                    type: string
                    description: Cancelation status.
                    enum:
                      - "IN_PROGRESS"
                      - "SUCCESS"
                      - "ERROR"
                    example: "ERROR"
                  errors:
                    type: array
                    description: Array of errors.
                    items:
                      $ref: '#/components/schemas/Error200'
        '400':
          description: Bad Request
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                properties:
                  errors:
                    type: array
                    description: Array of errors.
                    items:
                      $ref: '#/components/schemas/Error400'
        '401':
          description: Unauthorized
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/AuthError'
        '403':
          description: Forbidden
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                properties:
                  errors:
                    type: array
                    description: Array of errors.
                    items:
                      $ref: '#/components/schemas/Error403'
        '404':
          description: Not Found
        '504':
          description: Gateway Timeout
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                properties:
                  errors:
                    type: array
                    description: Array of errors.
                    items:
                      $ref: '#/components/schemas/Error504'
  '/sale/matching-categories':
    get:
      tags:
        - Categories and parameters
      summary: "Get categories suggestions"
      description:
        'Use this resource to receive suggested categories for given phrase.'
      operationId: categorySuggestionUsingGET
      parameters:
        - name: name
          in: query
          description: Product name for which you want to get suggested categories.
          required: true
          schema:
            type: string
            example: "bwm x3"
      responses:
        '200':
          description: Category suggestion returned successfully.
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/CategorySuggestionResponse'
        '401':
          description: Unauthorized
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
        '403':
          description: Forbidden
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'
        '406':
          description: Not Acceptable
          content:
            application/vnd.allegro.public.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorsHolder'

components:
  securitySchemes:
    bearer-token-for-user:
      type: oauth2
      description: >-
        For more information, see https://developer.allegro.pl/auth/#app to read about authorization code flow
        or https://developer.allegro.pl/auth/#DeviceFlow to read about the device code flow.
      flows:
        authorizationCode:
          authorizationUrl: https://allegro.pl/auth/oauth/authorize
          tokenUrl: https://allegro.pl/auth/oauth/token
          scopes: {}
        x-deviceCode:
          authorizationUrl: https://allegro.pl/skojarz-aplikacje
          tokenUrl: https://allegro.pl/auth/oauth/token
          scopes: {}
    bearer-token-for-application:
      type: oauth2
      description: For more information, see https://developer.allegro.pl/auth/#clientCredentialsFlow
      flows:
        clientCredentials:
          tokenUrl: https://allegro.pl/auth/oauth/token
          scopes: {}
  requestBodies:
    Pos:
      content:
        application/vnd.allegro.public.v1+json:
          schema:
            $ref: '#/components/schemas/Pos'
      description: Point of service
      required: true
    OfferAttachmentRequest:
      content:
        application/vnd.allegro.public.v1+json:
          schema:
            $ref: '#/components/schemas/OfferAttachmentRequest'
      description: offer attachment
      required: true
    Offer:
      content:
        application/vnd.allegro.public.v1+json:
          schema:
            $ref: '#/components/schemas/Offer'
      description: offer
      required: true
    AdditionalServicesGroupRequest:
      content:
        application/vnd.allegro.public.v1+json:
          schema:
            $ref: '#/components/schemas/AdditionalServicesGroupRequest'
      description: Additional service group body
      required: true
    VariantSetRequest:
      content:
        application/vnd.allegro.public.v1+json:
          schema:
            $ref: '#/components/schemas/VariantSet'
          examples:
            offerParameterOnly:
              summary: 'offer parameter only'
              value:
                name: 't-shirt'
                offers:
                  - id: '2'
                  - id: '3'
                parameters:
                  - id: '21'
            colorPatternParameterOnly:
              summary: 'color/pattern parameter only'
              value:
                name: 't-shirt'
                offers:
                  - id: '2'
                    colorPattern: 'red'
                  - id: '4'
                    colorPattern: 'blue'
                parameters:
                  - id: 'color/pattern'
            offerAndColorPatternParameters:
              summary: 'offer and color/pattern parameters'
              value:
                name: 't-shirt'
                offers:
                  - id: '2'
                    colorPattern: 'red'
                  - id: '3'
                    colorPattern: 'red'
                  - id: '4'
                    colorPattern: 'blue'
                  - id: '5'
                    colorPattern: 'blue'
                parameters:
                  - id: 'color/pattern'
                  - id: '21'
      required: true
    MessageRequest:
      content:
        application/vnd.allegro.public.v1+json:
          schema:
            $ref: '#/components/schemas/MessageRequest'
      description: Message request
      required: true
    AttachmentDeclaration:
      content:
        application/vnd.allegro.public.v1+json:
          schema:
            $ref: '#/components/schemas/AttachmentDeclaration'
      description: A detailed declaration of a file to be uploaded
      required: true
    OfferImageUploadRequest:
      required: true
      content:
        application/vnd.allegro.public.v1+json:
          schema:
            $ref: '#/components/schemas/OfferImageLinkUploadRequest'
        image/jpeg:
          schema:
            type: string
            format: binary
            description: File in a binary format
        image/png:
          schema:
            type: string
            format: binary
            description: File in a binary format
    UserRatingAnswerRequest:
      content:
        application/vnd.allegro.public.v1+json:
          schema:
            $ref: '#/components/schemas/UserRatingAnswerRequest'
      description: 'User rating answer request.'
      required: true
    UserRatingRemovalRequest:
      content:
        application/vnd.allegro.public.v1+json:
          schema:
            $ref: '#/components/schemas/UserRatingRemovalRequest'
      description: 'User rating removal request.'
      required: true
  schemas:
    InitializeRefund:
      required:
        - payment
        - reason
      properties:
        payment:
          $ref: '#/components/schemas/RefundPayment'
        reason:
          type: string
          description: Reason for a payment refund.
          enum:
            - "REFUND"
            - "COMPLAINT"
            - "PRODUCT_NOT_AVAILABLE"
            - "PAID_VALUE_TOO_LOW"
        lineItems:
          type: array
          description: List of order's line items which can be refunded.
          items:
            $ref: '#/components/schemas/RefundLineItem'
        delivery:
          type: object
          properties:
            value:
              $ref: '#/components/schemas/RefundDeliveryValue'
          description: Payment refund for delivery.
        overpaid:
          type: object
          properties:
            value:
              $ref: '#/components/schemas/RefundOverpaidValue'
          description: Payment refund for overpaid.
        surcharges:
          type: array
          description: List of surcharges for payment which can be refunded.
          items:
            $ref: '#/components/schemas/PaymentsSurcharge'
        additionalServices:
          type: object
          properties:
            value:
              $ref: '#/components/schemas/RefundAdditionalServicesValue'
          description: Payment refund for additional services.
    RefundClaim:
      type: object
      description: Detailed information about the refund application.
      properties:
        id:
          type: string
          format: uuid
          description: ID of the returned refund application.
          example: '09f0b4cc-7880-11e9-8f9e-2a86e4085a59'
        status:
          type: string
          description: Status of the returned refund application.

            - `IN_PROGRESS` - the application is being processed or awaits user or admin action.

            - `WAITING_FOR_PAYMENT_REFUND` - the application is being processed and awaits payment refund to buyer.

            - `GRANTED` - the application was accepted and a commission refund was granted as requested,
              or the application was rejected and the seller successfully appealed.

            - `REJECTED` - the application was rejected and no commission was refunded.

            - `REJECTED_AFTER_APPEAL` - the application was initially rejected and the seller unsuccessfully appealed.

            - `CANCELLED` - the application was cancelled by the seller.

            - `APPEALED` - the application was rejected and the seller appealed, but the appeal has not yet finished processing.
          enum:
            - "IN_PROGRESS"
            - "WAITING_FOR_PAYMENT_REFUND"
            - "GRANTED"
            - "REJECTED"
            - "REJECTED_AFTER_APPEAL"
            - "CANCELLED"
            - "APPEALED"
        quantity:
          type: integer
          format: int32
          description: Quantity of product for which the seller filed the refund application.
        commission:
          type: object
          description: Money value of the returned refund application.
          properties:
            amount:
              type: string
              description: Monetary amount of the returned refund application.
              example: '100.00'
            currency:
              type: string
              description: Three-letter currency code (ISO-4217) of the returned refund application.
              example: 'PLN'
        buyer:
          type: object
          description: Buyer associated with the refund application.
          properties:
            id:
              type: string
              description: ID of the buyer associated with the refund application.
              example: '12345678'
            login:
              type: string
              description: Login of the buyer associated with the refund application.
              example: 'JanKowalski'
        createdAt:
          type: string
          format: date-time
          description: Date when the refund application was created.
        lineItem:
          type: object
          description: Purchase associated with the refund application.
          properties:
            id:
              type: string
              description: ID of the purchase associated with the refund application.
              example: '09f0b4cc-7880-11e9-8f9e-2a86e4085a59'
            quantity:
              type: integer
              format: int32
              description: Total quantity of product purchased by the buyer.
                Equal to or greater than quantity for which the seller filed the refund application.
            boughtAt:
              type: string
              format: date-time
              description: Date when the purchase was made.
            offer:
              type: object
              description: Offer associated with the purchase.
              properties:
                id:
                  type: string
                  description: ID of the offer associated with the purchase.
                  example: '12345678'
                name:
                  type: string
                  description: Name of the offer associated with the purchase.
    RefundClaimRequest:
      type: object
      properties:
        lineItem:
          type: object
          description: Purchase for which a refund application will be created.
          properties:
            id:
              type: string
              description: ID of the purchase for which a refund application will be created.
        quantity:
          type: integer
          format: int32
          description: Quantity of product for which the refund application will be created. Must be greater than zero.
    RefundDetails:
      type: object
      description: Detailed information about the refund.
      required:
        - id
        - reason
        - status
        - createdAt
        - totalValue
      properties:
        id:
          type: string
          format: uuid
          description: The payment refund identifier.
          example: 09f0b4cc-7880-11e9-8f9e-2a86e4085a59
        payment:
          $ref: '#/components/schemas/RefundPayment'
        reason:
          type: string
          description: Reason for a payment refund.
          enum:
            - "REFUND"
            - "COMPLAINT"
            - "PRODUCT_NOT_AVAILABLE"
            - "PAID_VALUE_TOO_LOW"
        status:
          type: string
          description: Current status of payment refund.
          enum:
            - "SUCCESS"
            - "CANCELED"
            - "PARTIAL"
            - "IN_PROGRESS"
            - "VALIDATE_FAILED"
            - "NEW"
        createdAt:
          type: string
          format: date-time
          example: '2017-05-17T08:36:57.292+02:00'
          description: Date and time when the refund was created provided in ISO 8601 format.
        totalValue:
          $ref: '#/components/schemas/RefundTotalValue'
        lineItems:
          type: array
          description: List of order's line items which can be refunded.
          items:
            $ref: '#/components/schemas/RefundLineItem'
        delivery:
          type: object
          properties:
            value:
              $ref: '#/components/schemas/RefundDeliveryValue'
          description: Payment refund for delivery.
        overpaid:
          type: object
          properties:
            value:
              $ref: '#/components/schemas/RefundOverpaidValue'
          description: Payment refund for overpaid.
        surcharges:
          type: array
          description: List of surcharges for payment which can be refunded.
          items:
            $ref: '#/components/schemas/PaymentsSurcharge'
        additionalServices:
          type: object
          properties:
            value:
              $ref: '#/components/schemas/RefundAdditionalServicesValue'
          description: Payment refund for additional services.
    RefundLineItem:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
          format: uuid
          description: The line-item identifier.
          example: 09f0b4cc-7880-11e9-8f9e-2a86e4085a59
        type:
          type: string
          description: Type for line items refund. QUANTITY is provided when you can refund one or more items. AMOUNT is provided when you can refund a partial price.
          example: QUANTITY
          enum:
            - "AMOUNT"
            - "QUANTITY"
        quantity:
          type: number
          example: 5
          description: This field is provided for QUANTITY type only. It specifies how many items will be refunded.
        value:
          required:
            - amount
            - currency
          type: object
          description: This field is available for AMOUNT type only and specifies the amount refunded to the customer.
          example: null
          properties:
            amount:
              type: string
              description: The amount provided in a string format to avoid rounding errors.
            currency:
              type: string
              description: The currency provided as a 3-letter code in accordance with ISO 4217 standard (https://en.wikipedia.org/wiki/ISO_4217).
    RefundPayment:
        type: object
        description: Payment affected by refund operation.
        title: RefundPayment
        properties:
          id:
            type: string
            format: uuid
            description: The payment identifier.
            example: a6bee8b2-8b4e-11e9-8918-07b31163120a
    PaymentsSurcharge:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The payment identifier.
          example: 09f0b4cc-7880-11e9-8f9e-2a86e4085a59
        value:
          $ref: '#/components/schemas/RefundSurchargeValue'
    AdditionalServiceDefinitionRequest:
      type: object
      required:
        - id
      properties:
        id:
          type: string
    AdditionalServiceRequest:
      type: object
      required:
        - configurations
        - definition
        - description
      properties:
        definition:
          $ref: '#/components/schemas/AdditionalServiceDefinitionRequest'
        description:
          type: string
          maxLength: 1000
        configurations:
          type: array
          items:
            $ref: '#/components/schemas/Configuration'
    AdditionalServiceResponse:
      type: object
      properties:
        configurations:
          type: array
          items:
            $ref: '#/components/schemas/Configuration'
        definition:
          $ref: '#/components/schemas/BasicDefinitionResponse'
        description:
          type: string
    AdditionalServicesGroup:
      type: object
      properties:
        id:
          type: string
          description: Id of additional service group
    AdditionalServicesGroupRequest:
      type: object
      required:
        - additionalServices
        - name
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        additionalServices:
          type: array
          items:
            $ref: '#/components/schemas/AdditionalServiceRequest'
    AdditionalServicesGroupResponse:
      type: object
      properties:
        additionalServices:
          type: array
          items:
            $ref: '#/components/schemas/AdditionalServiceResponse'
        createdAt:
          type: string
          format: date-time
        id:
          type: string
        updatedAt:
          type: string
          format: date-time
        name:
          type: string
        seller:
          $ref: '#/components/schemas/Reference'
    AdditionalServicesGroups:
      type: object
      properties:
        additionalServicesGroups:
          type: array
          items:
            $ref: '#/components/schemas/AdditionalServicesGroupResponse'
    Address:
      type: object
      required:
        - city
        - countryCode
        - state
        - zipCode
      properties:
        street:
          type: string
          maxLength: 80
        city:
          type: string
          maxLength: 40
        zipCode:
          type: string
          maxLength: 10
        state:
          type: string
          maxLength: 40
        countryCode:
          type: string
        coordinates:
          $ref: '#/components/schemas/Coordinates'
    AfterSalesServices:
      type: object
      description: The definitions of the different after sales services assigned to the offer.
      properties:
        impliedWarranty:
          $ref: '#/components/schemas/ImpliedWarranty'
        returnPolicy:
          $ref: '#/components/schemas/ReturnPolicy'
        warranty:
          $ref: '#/components/schemas/Warranty'
    AfterSalesServicesAttachment:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The Id of the attachment.
          example: 54702c96-4ccd-4c0e-b4c7-382a71e810b5
        name:
          type: string
          description: Attachment file name.
        url:
          type: string
          description: Direct link to the attachment.
    ImpliedWarranty:
      type: object
      description: The implied warranty information.
      properties:
        id:
          type: string
          format: uuid
          description: The ID of the implied warranty definition.
          example: 09f0b4cc-7880-11e9-8f9e-2a86e4085a59
    ReturnPolicy:
      type: object
      description: The return policy information.
      properties:
        id:
          type: string
          format: uuid
          description: The ID of the return policy definition.
          example: 09f0b4cc-7880-11e9-8f9e-2a86e4085a59
    Warranty:
      type: object
      description: The warranty information.
      properties:
        id:
          type: string
          format: uuid
          description: The ID of the warranty definition.
          example: 09f0b4cc-7880-11e9-8f9e-2a86e4085a59
    WarrantyRequest:
      type: object
      properties:
        name:
          type: string
          description: Warranty name.
          maxLength: 200
        type:
          $ref: '#/components/schemas/WarrantyType'
        individual:
          $ref: '#/components/schemas/WarrantyPeriod'
        corporate:
          $ref: '#/components/schemas/WarrantyPeriod'
        attachment:
          $ref: '#/components/schemas/WarrantyAttachment'
        description:
          type: string
          maxLength: 10240
          description: Warranty description.
    WarrantyResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The ID of the warranty definition.
          example: 09f0b4cc-7880-11e9-8f9e-2a86e4085a59
        seller:
          $ref: '#/components/schemas/Seller'
        name:
          type: string
          description: Warranty name.
          maxLength: 200
        type:
          $ref: '#/components/schemas/WarrantyType'
        individual:
          $ref: '#/components/schemas/WarrantyPeriod'
        corporate:
          $ref: '#/components/schemas/WarrantyPeriod'
        attachment:
          $ref: '#/components/schemas/AfterSalesServicesAttachment'
        description:
          type: string
          description: Warranty description.
    WarrantyType:
      type: string
      description: Defines who is warrantor.
      enum:
        - 'MANUFACTURER'
        - 'SELLER'
    WarrantyPeriod:
      type: object
      properties:
        period:
          type: string
          description: Period in ISO 8601 format.
          example: 'P12M'
        lifetime:
          type: boolean
          description: Indices if it is lifetime warranty.
          example: false
    WarrantyAttachment:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The Id of the attachment received in a response from *POST /afters-sales-service-conditions/attachments*
          example: 54702c96-4ccd-4c0e-b4c7-382a71e810b5
        name:
          type: string
          description: Attachment file name
          example: 'warranty.pdf'
    ImpliedWarrantyRequest:
      type: object
      properties:
        name:
          type: string
          description: Warranty name.
          maxLength: 200
        individual:
          $ref: '#/components/schemas/ImpliedWarrantyPeriod'
        corporate:
          $ref: '#/components/schemas/ImpliedWarrantyPeriod'
        address:
          $ref: '#/components/schemas/AfterSalesServicesAddress'
        description:
          type: string
          maxLength: 10240
          description: Implied warranty description.
    ImpliedWarrantyResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The ID of the implied warranty definition.
          example: 09f0b4cc-7880-11e9-8f9e-2a86e4085a59
        seller:
          $ref: '#/components/schemas/Seller'
        name:
          type: string
          description: Implied warranty name.
          maxLength: 200
        individual:
          $ref: '#/components/schemas/ImpliedWarrantyPeriod'
        corporate:
          $ref: '#/components/schemas/ImpliedWarrantyPeriod'
        address:
          $ref: '#/components/schemas/AfterSalesServicesAddress'
        description:
          type: string
          description: Implied warranty description.
    ImpliedWarrantyPeriod:
      type: object
      properties:
        period:
          type: string
          description: Period in ISO 8601 format. Only periods in full years are accepted.
          example: 'P2Y'
    AfterSalesServicesAddress:
      type: object
      required:
        - name
        - street
        - postCode
        - city
        - countryCode
      properties:
        name:
          type: string
          maxLength: 200
          description: Company or person name.
          example: "Allegro.pl sp. z o.o."
        street:
          type: string
          maxLength: 200
          description: Street name.
          example: "Grunwaldzka 182"
        postCode:
          type: string
          description: Post code.
          example: '11-232'
        city:
          type: string
          maxLength: 200
          description: City name.
          example: "PoznaÅ„"
        countyCode:
          type: string
          description: Country code.
          example: "PL"
    ReturnPolicyRequest:
      type: object
      properties:
        name:
          type: string
          description: Return policy name.
          maxLength: 200
        availability:
          $ref: '#/components/schemas/ReturnPolicyAvailability'
        withdrawalPeriod:
          type: string
          description: Period in ISO 8601 format. Only periods in full days are accepted.
          example: 'P14D'
        returnCost:
          $ref: '#/components/schemas/ReturnPolicyReturnCost'
        attachment:
          $ref: '#/components/schemas/AfterSalesServicesAttachment'
        address:
          $ref: '#/components/schemas/AfterSalesServicesAddress'
        description:
          type: string
          maxLength: 10240
          description: Return policy description.
    ReturnPolicyResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The ID of the return policy definition.
          example: 09f0b4cc-7880-11e9-8f9e-2a86e4085a59
        seller:
          $ref: '#/components/schemas/Seller'
        name:
          type: string
          description: Return policy name.
          maxLength: 200
        availability:
          $ref: '#/components/schemas/ReturnPolicyAvailability'
        withdrawalPeriod:
          type: string
          description: Period in ISO 8601 format.
          example: 'P14D'
        returnCost:
          $ref: '#/components/schemas/ReturnPolicyReturnCost'
        attachment:
          $ref: '#/components/schemas/AfterSalesServicesAttachment'
        address:
          $ref: '#/components/schemas/AfterSalesServicesAddress'
        description:
          type: string
          maxLength: 10240
          description: Return policy description.
    ReturnPolicyAvailability:
      type: object
      properties:
        range:
          type: string
          description: Indicates if return policy is full or restricted.
          enum:
            - 'FULL'
            - 'RESTRICTED'
        restrictionCause:
          type: string
          description: Type of return policy restrictions. Required if range of policy is set to RESTRICTED.
          enum:
            - 'SEALED_MEDIA'
            - 'SEALED_ITEM_NO_RETURN_DUE_HEALTH_OR_HYGIENE'
            - 'CUSTOM_ITEM'
            - 'SHORT_SHELF_LIFE'
            - 'INSEPARABLY_LINKED'
            - 'ALCOHOL'
            - 'PRESS'
            - 'FULLY_IMPLEMENTED_SERVICE'
            - 'MEDICINAL_PRODUCT'
            - 'BOOKED_SERVICE'
            - 'NOT_RECORDED_DIGITAL_CONTENT'
    ReturnPolicyReturnCost:
      type: object
      properties:
        coveredBy:
          type: string
          description: Indicates who covers the return delivery costs.
          enum:
            - 'SELLER'
            - 'BUYER'
    Attachment:
      type: object
      properties:
        id:
          type: string
          description: The ID of an attachment received in a response from *POST /sale/offer-attachments*
          example: 1928302_MANUAL_45d7a0f543e1b0d05e12a1aef5642efe63389a1d419fe9286d0f158044391fdce
    UserRatingAnswerRequest:
      type: object
      description: "Answer for user's rating."
      required:
        - message
      properties:
        message:
          type: string
          description: 'Answer message.'
          maxLength: 500
    Answer:
      type: object
      description: 'Seller''s answer, if null seller did not publish answer'
      required:
        - createdAt
        - message
      properties:
        createdAt:
          type: string
          format: date-time
          example: '2017-05-17T08:36:57.292+02:00'
          description: Answer creation datetime in ISO 8601 format
        message:
          type: string
          description: Answer message
    AvailableConstraint:
      type: object
      properties:
        type:
          type: string
          description: >-
            One of the type COUNTRY_SAME_QUANTITY or
            COUNTRY_DELIVERY_SAME_QUANTITY
        availableDeliveryMethods:
          type: array
          items:
            type: string
    AverageRates:
      type: object
      properties:
        delivery:
          type: number
          format: double
          example: 4.7
          description: The average value of delivery rate.
          minimum: 0
          maximum: 5
        deliveryCost:
          type: number
          format: double
          example: 5
          description: The average value of delivery cost rate.
          minimum: 0
          maximum: 5
        description:
          type: number
          format: double
          example: 4.5
          description: The average value of description rate.
          minimum: 0
          maximum: 5
        service:
          type: number
          format: double
          example: 4.8
          description: The average value of service rate.
          minimum: 0
          maximum: 5
      description: >-
        The rates broken down into detailed categories. Note that this information is only available if the seller
        has received enough detailed ratings.
    BasicDefinitionResponse:
      type: object
      properties:
        id:
          type: string
    Benefit:
      type: object
      required:
        - specification
      properties:
        specification:
          $ref: '#/components/schemas/BenefitSpecification'
    BenefitSpecification:
      type: object
      description: "One of: WholesalePriceListBenefitSpecification, BundleBenefitSpecification, MultiPackBenefitSpecification"
      properties:
        type:
          type: string
          description: Type of benefit.
      required:
        - type
      discriminator:
        propertyName: type
        mapping:
          WHOLESALE_PRICE_LIST: '#/components/schemas/WholesalePriceListBenefitSpecification'
          ORDER_FIXED_DISCOUNT: '#/components/schemas/BundleBenefitSpecification'
          UNIT_PERCENTAGE_DISCOUNT: '#/components/schemas/MultiPackBenefitSpecification'
    WholesalePriceListBenefitSpecification:
      allOf:
        - $ref: "#/components/schemas/BenefitSpecification"
        - type: object
          required:
            - name
            - thresholds
            - configuration
            - trigger
          properties:
            type:
              type: string
              default: 'WHOLESALE_PRICE_LIST'
            name:
              type: string
              description: 'Price list name (visible to you only).'
              example: "Cardboard boxes"
            thresholds:
              type: array
              description: 'List of discount thresholds. A threshold with higher quantity.lowerBound than another must also have higher discount.percentage.'
              items:
                type: object
                properties:
                  quantity:
                    type: object
                    required:
                      - lowerBound
                    properties:
                      lowerBound:
                        type: number
                        example: 100
                        minimum: 2
                        maximum: 100000
                        description: 'Minimum number of units of an offer for which the threshold is applicable.'
                  discount:
                    type: object
                    required:
                      - percentage
                    properties:
                      percentage:
                        type: string
                        example: "5"
                        description: 'Discount percentage applied when the threshold is applied. The fractional part must be equal to 0.'
    BundleBenefitSpecification:
      allOf:
        - $ref: "#/components/schemas/BenefitSpecification"
        - type: object
          required:
            - price
          properties:
            type:
              type: string
              default: 'ORDER_FIXED_DISCOUNT'
            value:
              $ref: '#/components/schemas/Price'
    MultiPackBenefitSpecification:
      allOf:
        - $ref: "#/components/schemas/BenefitSpecification"
        - type: object
          required:
            - configuration
            - trigger
          properties:
            type:
              type: string
              default: 'UNIT_PERCENTAGE_DISCOUNT'
            configuration:
              type: object
              description: What rebate will be given.
              required:
                - percentage
              properties:
                percentage:
                  type: number
                  example: 100
                  description: discount percentage
            trigger:
              description: Describes what will cause the rebate.
              type: object
              required:
                - forEachQuantity
                - discountedNumber
              properties:
                forEachQuantity:
                  type: number
                  description: >-
                    For every pack of this quantity new rebate will be given.
                  example: 3
                discountedNumber:
                  type: number
                  description: Describes how many offers in pack should be discounted by discount percentage.
                  example: 1
    Caption:
      type: object
      required:
        - index
        - value
      properties:
        index:
          type: string
        value:
          type: string
      title: Caption
    CategoriesDto:
      type: object
      description: The list of categories.
      properties:
        categories:
          type: array
          items:
            $ref: '#/components/schemas/CategoryDto'
    Category:
      type: object
      required:
        - id
      properties:
        id:
          type: string
    CategoryDto:
      type: object
      properties:
        id:
          type: string
          description: >-
            The ID of the category. This can be either in UUID format or an integer format. You should be ready to
            accept any string value as the category ID.
          example: "12"
        leaf:
          type: boolean
          description: Indicates whether the category is at the lowest level. Leaf categories do not have any children. Offers can be listed only in leaf categories.
        name:
          type: string
          description: Name of the category in Polish.
          example: PozostaÅ‚e
        options:
          $ref: '#/components/schemas/CategoryOptionsDto'
        parent:
          type: object
          properties:
            id:
              type: string
              description: The ID of the parent category.
              example: "709"
          description: The parent category data.
      description: The category data.
    CategoryOptionsDto:
      type: object
      properties:
        advertisement:
          type: boolean
          description: Indicates whether offers of type ADVERTISEMENT can be listed in this category.
        advertisementPriceOptional:
          type: boolean
          description: >-
            Indicates whether advertisements listed in this category must have a price given. If the value is `true`
            then you don't have to provide a price when listing an advertisement in this category.
        variantsByColorPatternAllowed:
          type: boolean
          description: >-
            Indicates whether you can combine offers from this category into variant sets based on the color and
            pattern.
        offersWithProductPublicationEnabled:
          type: boolean
          description: Information whether the category supports assigning offers to a product.
        productCreationEnabled:
          type: boolean
          description: Indicates whether the category supports creating products.
        productEANRequired:
          type: boolean
          description: Indicates whether at least one EAN is required when creating products.
        customParametersEnabled:
          type: boolean
          description: Indicates whether custom parameters can be added to offers in this category.
      description: A list of the different options which can be used with this category.
    CategorySuggestionResponse:
      type: object
      required:
        - matching_categories
      properties:
        matching_categories:
          type: array
          description: List of categories matching with given phrase.
          items:
            type: object
            properties:
              id:
                type: string
                example: "2"
                description: Id of category.
              name:
                type: string
                example: Samochody Osobowe
                description: Category name.
              parent:
                type: object
                description: Parent category object.
                example:
                  id:
                    type: string
                    example: "1"
                    description: Id of category.
                  name:
                    type: string
                    example: Motoryzacja
                    description: Category name.
                  parent:
                    type: object
                    description: Parent category object.
            required:
              - id
              - name
    CompatibilityListSupportedCategoriesDto:
      type: object
      properties:
        supportedCategories:
          type: array
          description: 'List with information about categories where compatibility list is supported. <a href=" https://developer.allegro.pl/compatibility_list/" target="_blank">Read more</a>.'
          items:
            type: object
            properties:
              categoryId:
                type: string
                description: 'Identifier of the category, where you can use
                              the compatibility list in an offer listed in the category or
                              in all subcategories, which belongs to returned category.'
                example: '620'
              name:
                type: string
                description: 'Name of supported category.'
                example: 'CzÄ™Å›ci samochodowe'
              itemsType:
                type: string
                description: 'Type of the compatible item.'
                example: 'CAR'
              inputType:
                type: string
                enum: [TEXT, ID]
                description: 'Type of the representation of compatible item.
                              <ul>
                                <li>`TEXT` - item on compatibility list has to be provided as plain text.</li>
                                <li>`ID` - item on compatibility list has to be provided as identifier of compatible product.
                                    To obtain it please use <a href="/documentation/#tag/Compatibility-List/paths/~1sale~1compatible-products/get">compatible-products</a> resource together with `itemsType` supported in particular category.
                                </li>
                              </ul>
                              '
                example: 'TEXT'
              validationRules:
                type: object
                description: 'Additional information about constraints assigned to the category.'
                properties:
                  maxRows:
                    type: integer
                    description: 'Maximum number of items allowed on compatibility list.'
                    example: 2000
                  maxCharactersPerLine:
                    type: integer
                    description: 'Maximum length of single item on the list.'
                    example: 160
          example:
              - categoryId: '620'
                name: 'CzÄ™Å›ci samochodowe'
                itemsType: 'CAR'
                inputType: 'ID'
                validationRules:
                  maxRows: 2000
              - categoryId: '257358'
                name: 'PiÃ³ra wycieraczek'
                itemsType: 'CAR'
                inputType: 'ID'
                validationRules:
                  maxRows: 2000
              - categoryId: '158'
                name: 'CzÄ™Å›ci motocyklowe'
                itemsType: 'MOTORCYCLE'
                inputType: 'ID'
                validationRules:
                  maxRows: 2000
              - categoryId: '9108'
                name: 'Tusze'
                itemsType: 'PRINTER'
                inputType: 'TEXT'
                validationRules:
                  maxRows: 200
                  maxCharactersPerLine: 100
    CompatibleProductsGroupsDto:
      type: object
      properties:
        groups:
          type: array
          description: 'List of groups for given type of compatible products.'
          items:
            type: object
            properties:
              id:
                type: string
                description: 'Identifier of the group.'
                minLength: 32
                maxLength: 32
                example: 'b0dfe6de8fb2f2b1309ad94c6cc4e09d'
              text:
                type: string
                description: 'Name of the group.'
                example: 'ABARTH'
          example:
            - id: 'b0dfe6de8fb2f2b1309ad94c6cc4e09d'
              text: 'ABARTH'
            - id: '4144e097d2fa7a491cec2a7a4322f2bc'
              text: 'AC'
            - id: 'de3e2253f276cd1c757f58860d77b9bb'
              text: 'ACURA'
        count:
          type: integer
          description: 'Number of returned elements.'
          example: 3
        totalCount:
          type: integer
          description: 'Total number of available elements.'
          example: 256
    CompatibleProductsListDto:
      type: object
      properties:
        compatibleProducts:
          type: array
          description: 'List of compatible products for given type and parameters.'
          items:
            $ref: '#/components/schemas/CompatibleProductDto'
          example:
            - id: 'fc1058e6-a901-4b58-be4d-3d7e1368f63e'
              text: 'AUDI A6 (4G2, 4GC, C7) 2014/09-2018/09 3.0 TDI quattro 326KM/240kW'
              group:
                id: '19d71c872aa6c78663876a7e7bc7776d'
              attributes:
                - id: 'POWER_KW'
                  values:
                    - '240'
                - id: 'MODEL_FROM'
                  values:
                    - '2010/11'
                - id: 'BRAND'
                  values:
                    - 'AUDI'
                - id: 'POWER_HP'
                  values:
                    - '326'
                - id: 'MODEL_TO'
                  values:
                    - '2018/09'
                - id: 'ENGINE_CODE'
                  values:
                    - 'CVUB'
                - id: 'K_TYP_NR'
                  values:
                    - '108441'
                - id: 'VERSION_FROM'
                  values:
                    - '2014/09'
                - id: 'VERSION_TO'
                  values:
                    - '2018/09'
                - id: 'MODEL'
                  values:
                    - 'A6 (4G2, 4GC, C7)'
                - id: 'BODY'
                  values:
                    - 'sedan'
                - id: 'TYPE'
                  values:
                    - '3.0 TDI quattro'
        count:
          type: integer
          description: 'Number of returned elements.'
          example: 1
        totalCount:
          type: integer
          description: 'Total number of available elements.
                        Field is not present when `phrase` parameter is used.'
          example: 1448
    CompatibleProductDto:
      type: object
      properties:
        id:
          type: string
          description: 'Identifier of the compatible product.'
          example: 'fc1058e6-a901-4b58-be4d-3d7e1368f63e'
        text:
          type: string
          description: 'Textual representation of the compatible product.'
          example: 'AUDI A6 (4G2, 4GC, C7) 2014/09-2018/09 3.0 TDI quattro 326KM/240kW'
        group:
          type: object
          description: 'Group to which compatible product is assigned to.'
          properties:
            id:
              type: string
              description: 'Identifier of the group.'
              example: '19d71c872aa6c78663876a7e7bc7776d'
        attributes:
          type: array
          description: "List of compatible products attributes."
          items:
            type: object
            properties:
              id:
                type: string
                description: "Identifier of an attribute"
                example: "BRAND"
              values:
                type: array
                description: "List of attribute's values."
                items:
                  type: string
                  example: "AUDI"
          example:
            - id: 'BRAND'
              values:
                - 'AUDI'
    Cells:
      type: object
      required:
        - cells
      properties:
        cells:
          type: array
          items:
            type: string
      title: Cells
    ChangePrice:
      type: object
      required:
        - input
      properties:
        id:
          type: string
          format: uuid
          description: The unique command id provided in the input.
          example: "6365996a-6cae-11e9-a923-1681be663d3e"
        input:
          $ref: '#/components/schemas/ChangePriceInput'
        output:
          $ref: '#/components/schemas/CommandOutput'
    ChangePriceInput:
      type: object
      required:
        - buyNowPrice
      properties:
        buyNowPrice:
          $ref: '#/components/schemas/Price'
      description: The input of the command, i.e. the new Buy Now price for the offer.
    ChangePriceWithoutOutput:
      type: object
      required:
        - input
      properties:
        id:
          type: string
          format: uuid
          description: The unique command id generated by you. This should be the same UUID as used in the path.
          example: "6365996a-6cae-11e9-a923-1681be663d3e"
        input:
          $ref: '#/components/schemas/ChangePriceInput'
    CommandOutput:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/ProcessingStatus'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
      description: The output of the command.
    CommandTask:
      type: object
      properties:
        field:
          type: string
          description: Modified field as JSON path.
        finishedAt:
          type: string
          format: date-time
          description: >-
            Date of completion of the modification. Format (ISO 8601) -
            yyyy-MM-dd'T'HH:mm:ss.SSSZ
        message:
          type: string
          description: General fail reason. You should check the errors structure to get more detailed information of the encountered errors.
        offer:
          $ref: '#/components/schemas/OfferId'
        scheduledAt:
          type: string
          format: date-time
          description: >-
            Date of the modification schedule. Format (ISO 8601) -
            yyyy-MM-dd'T'HH:mm:ss.SSSZ
        status:
          type: string
          description: 'Available statuses: NEW, SUCCESS, FAIL'
        errors:
          description: The list of error objects explaining the problems with command processing for the given offer.
          type: array
          items:
            $ref: '#/components/schemas/Error'
      description: Status of single command task.
    CompatibilityList:
      type: object
      properties:
        type:
          type: string
          default: 'MANUAL'
          description: 'Type of the compatibility list, two values are acceptable: `MANUAL`, `PRODUCT_BASED`.
                        <ul>
                          <li>`MANUAL` -  for offers not associated with product - compatibility list is created with
                                          items provided by user directly in the body of the request.</li>
                          <li>`PRODUCT_BASED` - for offers associated with product - if compatibility list is provided in
                                                the product details (GET/sale/products/{productId}), it needs to
                                                be included in the offer in unchanged form.
                          </li>
                        </ul>'
      discriminator:
        propertyName: type
        mapping:
          MANUAL: '#/components/schemas/CompatibilityListManual'
          PRODUCT_BASED: '#/components/schemas/CompatibilityListProductBased'
    CompatibilityListManual:
      allOf:
      - $ref: '#/components/schemas/CompatibilityList'
      - type: object
        required:
        - items
        properties:
          items:
            type: array
            items:
              $ref: '#/components/schemas/CompatibilityListItem'
            description: 'List of the compatible items.
                         Maximum number of elements on the list depends on type of included compatible items.
                         Configuration and details concerning the compatible items in selected category are provided in the response for GET
                         <a href="/documentation/#tag/Compatibility-List/paths/~1sale~1compatibility-list~1supported-categories/get">
                         supported-categories</a> resource in `validationRules` object.'
        description: 'List of items compatible with offer.'
    CompatibilityListProductBased:
      allOf:
      - $ref: '#/components/schemas/CompatibilityList'
      - type: object
        required:
        - id
        properties:
          id:
            type: string
            description: 'Id of product-based compatibility list.'
            example: '460b2511-b786-47b9-9d7e-1f868728cfd6-f103931434fbf4aa06764f3df74d371df23aa138a9cd46dbe570f51af79db1c4-2'
          items:
            type: array
            items:
              $ref: '#/components/schemas/CompatibilityListItemProductBased'
            description: 'Text representation of the compatibility list items. Provided for informational purposes only -
                            ignored when creating (Post) or updating (Put) compatibility list in the offer.'
    CompatibilityListItem:
      type: object
      properties:
        type:
          type: string
      discriminator:
        propertyName: type
        mapping:
          TEXT: '#/components/schemas/CompatibilityListTextItem'
          ID: '#/components/schemas/CompatibilityListIdItem'
    CompatibilityListItemProductBased:
      type: object
      properties:
        text:
          type: string
          description: "Text description of the compatible item."
          example: "AUDI 90 (89, 89Q, 8A, B3) 1988/06-1991/09 2.3 E 20V quattro 170KM/125kW 1501"
    CompatibilityListTextItem:
      allOf:
        - $ref: '#/components/schemas/CompatibilityListItem'
        - type: object
          required:
            - text
          properties:
            type:
              type: string
              default: "TEXT"
            text:
              type: string
              description: 'Text description of the compatible item.
                Maximum length of the text depends on category where compatible item is used.
                Should be used in categories where TEXT version of compatible list is supported.
                See <a href="/documentation/#tag/Compatibility-List/paths/~1sale~1compatibility-list~1supported-categories/get">
                supported-categories</a> resource. <a href="../../compatibility_list" target="_blank">Read more</a>.'
              example: 'CITROÃ‹N C6 (TD_) 2005/09-2011/12 2.7 HDi 204KM/150kW'
    CompatibilityListIdItem:
      allOf:
        - $ref: '#/components/schemas/CompatibilityListItem'
        - type: object
          required:
            - id
          properties:
            type:
              type: string
              default: "ID"
            id:
              type: string
              description: 'Id of the compatible item. Should be used in categories
                            where ID version of compatible list is supported.
                            See <a href="/documentation/#tag/Compatibility-List/paths/~1sale~1compatibility-list~1supported-categories/get">
                            supported-categories</a> resource. <a href="../../compatibility_list" target="_blank">Read more</a>.'
              example: '0006563f-f2b9-44ea-ae67-4678679be1f1'
            text:
              type: string
              description: 'Text description of the compatible item. When creating (Post) or updating (Put) a compatibility list the field is ignored.'
              example: 'CITROÃ‹N C6 (TD_) 2005/09-2011/12 2.7 HDi 204KM/150kW'
            additionalInfo:
              type: array
              items:
                $ref: '#/components/schemas/CompatibilityListIdItemAdditionalInfo'
              description: 'Details of the compatible item represented by ID.'
    CompatibilityListIdItemAdditionalInfo:
      type: object
      required:
        - value
      properties:
        value:
          type: string
          description: 'Additional information describing the compatible item. E.g. for cars it can be an engine code or an equipment version.'
          example: 'only for versions with BDX engine code'
    Configuration:
      type: object
      properties:
        constraints:
          $ref: '#/components/schemas/ConstraintCriteria'
        price:
          $ref: '#/components/schemas/Price'
    ConstraintCriteria:
      type: object
      properties:
        country:
          type: string
        type:
          type: string
          enum:
            - COUNTRY_SAME_QUANTITY
            - COUNTRY_DELIVERY_SAME_QUANTITY
        deliveryMethods:
          type: array
          items:
            $ref: '#/components/schemas/JustId'
    ContactRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 250
        emails:
          type: array
          maxItems: 1
          items:
            $ref: '#/components/schemas/EmailRequest'
        phones:
          type: array
          maxItems: 2
          items:
            $ref: '#/components/schemas/PhonesRequest'
    ContactResponse:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        emails:
          type: array
          items:
            $ref: '#/components/schemas/EmailResponse'
        phones:
          type: array
          items:
            $ref: '#/components/schemas/PhonesResponse'
    ContactResponseList:
      type: object
      properties:
        contacts:
          type: array
          items:
            $ref: '#/components/schemas/ContactResponse'
    Coordinates:
      type: object
      required:
        - lat
        - lon
      properties:
        lat:
          type: number
          format: double
        lon:
          type: number
          format: double
    DefinitionsResponse:
      type: object
      properties:
        definitions:
          type: array
          items:
            $ref: '#/components/schemas/FullDefinitionResponse'
    Delivery:
      type: object
      properties:
        additionalInfo:
          type: string
          maxLength: 650
        handlingTime:
          type: string
          example: PDT12H30M5S
          description: >-
            Handling time, ISO 8601 duration format.
            This field must be set to one of the following:
            PT0S for immediately, PT24H, P2D, P3D, P4D, P5D, P7D, P10D, P14D, P21D, P30D, P60D.
        shipmentDate:
          type: string
          format: date-time
          example: '2018-04-01T08:00:00Z'
          description: 'Shipment date, Format (ISO 8601) - yyyy-MM-dd''T''HH:mm:ss.SSSZ'
        shippingRates:
          $ref: '#/components/schemas/JustId'
    DescriptionSection:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/DescriptionSectionItem'
    DescriptionSectionItem:
      type: object
      description: 'One of: TextItem, ImageItem'
      properties:
        type:
          type: string
      required:
        - type
      discriminator:
        propertyName: type
        mapping:
          TEXT: '#/components/schemas/DescriptionSectionItemText'
          IMAGE: '#/components/schemas/DescriptionSectionItemImage'
    DescriptionSectionItemText:
      allOf:
        - $ref: '#/components/schemas/DescriptionSectionItem'
        - type: object
          properties:
            type:
              type: string
              default: 'TEXT'
            content:
              type: string
    DescriptionSectionItemImage:
      allOf:
        - $ref: '#/components/schemas/DescriptionSectionItem'
        - type: object
          properties:
            type:
              type: string
              default: 'IMAGE'
            url:
              type: string
    EmailRequest:
      type: object
      properties:
        address:
          type: string
          maxLength: 128
          description: The contact's email address. The user part (before `@`) cannot be longer than 64 characters.
    EmailResponse:
      type: object
      properties:
        address:
          type: string
    Error:
      type: object
      properties:
        code:
          type: string
          description: The error code. You can use this code when contacting us about any problems with our systems.
          example: "NotAcceptableException"
        details:
          type: string
          description: >-
            For some cases, this field provides more details regarding the error. This field can be empty.
          example: null
        message:
          type: string
          description: >-
            A message directed to the developer of the program. This message will always be in English and give you
            some more technical details on what exactly has happened.
          example: Not acceptable representation requested. Please check 'Accept' request header
        path:
          type: string
          description: >-
            This field will point to a specific field in object if the error is connected to a problem with such specific
            field. This field can be empty
          example: null
        userMessage:
          type: string
          description: >-
            The message that can be presented directly to your user. It will not contain any technical information. This
            message is translated based on the value of the "Accept-Language" header. By default message in English is
            returned.
          example: The request contains incorrect data. Contact the author of the application.
    Errors:
      type: array
      description: The list of all the error objects explaining the error.
      items:
        $ref: '#/components/schemas/Error'
    ErrorsHolder:
      type: object
      properties:
        errors:
          $ref: '#/components/schemas/Errors'
      title: ErrorsHolder
    AuthError:
      type: object
      required:
        - error
      properties:
        error:
          type: string
          description: Authorization error code
          example: "unauthorized"
        error_description:
          type: string
          description: Authorization error message
          example: "Full authentication is required to access this resource"
    Fee:
      type: object
      properties:
        amount:
          type: string
        currency:
          type: string
      title: Fee
    FullDefinitionResponse:
      type: object
      properties:
        availableConstraints:
          type: array
          items:
            $ref: '#/components/schemas/AvailableConstraint'
        description:
          type: string
        id:
          type: string
        name:
          type: string
        updatedAt:
          type: string
          format: date-time
    FeePreviewResponse:
      type: object
      properties:
        commissions:
          type: array
          description: 'An array of commissions.'
          items:
            $ref: '#/components/schemas/CommissionResponse'
        quotes:
          type: array
          description: 'An array of quotes.'
          items:
            $ref: '#/components/schemas/QuoteResponse'
    CommissionResponse:
      properties:
        name:
          type: string
          description: 'Commission fee name.'
          example: 'Prowizja od sprzedaÅ¼y'
        fee:
          $ref: '#/components/schemas/Price'
    QuoteResponse:
      type: object
      properties:
        name:
          type: string
          description: 'Quote fee name.'
          example: 'OpÅ‚ata za wystawienie.'
        fee:
          $ref: '#/components/schemas/Price'
        cycleDuration:
          type: string
          description: 'Duration in ISO 8601 format.'
          example: 'PT240H'
        classifiedsPackage:
          $ref: '#/components/schemas/ClassifiedPackage'
    GeneralReport:
      type: object
      properties:
        id:
          type: string
          description: Command ID
        taskCount:
          $ref: '#/components/schemas/TaskCount'
      description: Command execution summary
    Header:
      type: object
      required:
        - name
      properties:
        name:
          type: string
      title: Header
    ImageUrl:
      type: object
      properties:
        url:
          type: string
      description: Image url
    ImpliedWarrantyBasic:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    JustId:
      type: object
      properties:
        id:
          type: string
    ExternalId:
      type: object
      description: The information on the offer in an external system.
      properties:
        id:
          type: string
          maxLength: 100
          description: The ID of the offer in the external system.
          example: "AH-129834"
    Location:
      type: object
      description: for offer with a delivery method it is a parcel dispatch location. For offers with personal pick-up it is a pick-up location, additionally we recommend to use points of service (<a href="../../documentation/#tag/Points-of-service" target="_blank">https://developer.allegro.pl/documentation/#tag/Points-of-service</a>)
      properties:
        city:
          type: string
          maxLength: 35
        countryCode:
          type: string
        postCode:
          type: string
        province:
          type: string
          maxLength: 50
          description: >-
            This field is mandatory if countryCode is set to "PL", for other values, currently, it is ignored.
            For countryCode equalling "PL", this field must be set to one of the following: DOLNOSLASKIE,
            KUJAWSKO_POMORSKIE, LUBELSKIE, LUBUSKIE,
            LODZKIE, MALOPOLSKIE, MAZOWIECKIE, OPOLSKIE,
            PODKARPACKIE, PODLASKIE, POMORSKIE, SLASKIE,
            SWIETOKRZYSKIE, WARMINSKO_MAZURSKIE,
            WIELKOPOLSKIE, ZACHODNIOPOMORSKIE.
    Modification:
      type: object
      properties:
        additionalServicesGroup:
          $ref: '#/components/schemas/AdditionalServicesGroup'
        delivery:
          $ref: '#/components/schemas/ModificationDelivery'
        discounts:
          $ref: '#/components/schemas/ModificationDiscounts'
        payments:
          $ref: '#/components/schemas/ModificationPayments'
        promotion:
          $ref: '#/components/schemas/ModificationPromotion'
        sizeTable:
          $ref: '#/components/schemas/ModificationSizeTable'
        publication:
          $ref: '#/components/schemas/ModificationPublication'
      description: Contains fields to change
    ModificationDelivery:
      type: object
      properties:
        shippingRates:
          $ref: '#/components/schemas/ShippingRates'
      description: Contains shipping rates to change
    ModificationDiscounts:
      type: object
      properties:
        wholesalePriceList:
          type: object
          properties:
            id:
              type: string
              description: Promotion id of a wholesale price list to assign to the offer or `null` to unassign wholesale price list from the offer.
      description: Allows you to assign/unassign discounts (rebates) to/from offers.
    ModificationPublication:
      type: object
      properties:
        duration:
          type: string
          description: 'Offer duration time provided in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.'
          enum:
            - PT72H
            - PT120H
            - PT168H
            - PT240H
            - PT480H
            - PT720H
            - P3D
            - P5D
            - P7D
            - P10D
            - P20D
            - P30D
        durationUnlimited:
          type: boolean
          example: false
          description: 'Unlimited duration time.'
      description: 'Allows you to change duration of offers. You can include only property in a request "duration" or "durationUnlimited".'
    ModificationPayments:
      type: object
      properties:
        invoice:
          type: string
          description: 'Invoice type: VAT, VAT_MARGIN, WITHOUT_VAT, NO_INVOICE'
          enum:
            - VAT
            - VAT_MARGIN
            - WITHOUT_VAT
            - NO_INVOICE
        tax:
          $ref: '#/components/schemas/Tax'
    ModificationPromotion:
      type: object
      properties:
        bold:
          type: boolean
          example: false
          description: 'Bold flag: true, false, null'
        departmentPage:
          type: boolean
          example: false
          description: 'DepartmentPage flag: true, false, null'
        emphasized:
          type: boolean
          example: false
          description: 'Emphasized flag: true, false, null'
        emphasizedHighlightBoldPackage:
          type: boolean
          example: false
          description: 'EmphasizedHighlightBoldPackage flag: true, false, null'
        highlight:
          type: boolean
          example: false
          description: 'Highlight flag: true, false, null'
    ModificationSizeTable:
      type: object
      properties:
        id:
          type: string
          description: Id of size table
    OfferAttachment:
      type: object
      properties:
        id:
          type: string
          maxLength: 64
        type:
          $ref: '#/components/schemas/AttachmentType'
        file:
          $ref: '#/components/schemas/AttachmentFile'
    PublicOfferPreviewRequest:
      properties:
        offer:
          $ref: '#/components/schemas/Offer'
        classifiedsPackages:
          $ref: '#/components/schemas/ClassifiedsPackages'
    ClassifiedsPackages:
      type: object
      properties:
        basePackage:
          $ref: '#/components/schemas/ClassifiedPackage'
        extraPackages:
          type: array
          description: 'An array of extra packages.'
          items:
            $ref: '#/components/schemas/ClassifiedPackage'
    ClassifiedPackage:
      type: object
      properties:
        id:
          type: string
          description: 'The classifieds package ID.'
          example: 'e76d443b-c088-4da5-95f7-cc9aaf73bf7b'
    OfferAttachmentRequest:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/AttachmentType'
        file:
          $ref: '#/components/schemas/AttachmentFileRequest'
    AttachmentType:
      type: string
      description: offer attachment type
      enum:
        - MANUAL
        - SPECIAL_OFFER_RULES
        - COMPETITION_RULES
        - BOOK_EXCERPT
        - USER_MANUAL
        - INSTALLATION_INSTRUCTIONS
        - GAME_INSTRUCTIONS
    AttachmentFile:
      type: object
      properties:
        name:
          type: string
          maxLength: 200
        url:
          type: string
          maxLength: 200
    AttachmentFileRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 200
    OfferImageLinkUploadRequest:
      type: object
      required:
        - url
      properties:
        url:
          type: string
          description: >-
            URL of the image.
            It has to contain domain name, not an IP address.
            Currently we support http and https protocols. When using https the certificate chain needs to be valid.
    OfferImageUploadResponse:
      type: object
      properties:
        expiresAt:
          type: string
          format: date-time
          description: >-
            Date of file expiration (removal from the server).
            We will remove it unless you use it in your offer.
        location:
          type: string
          description: Link to the uploaded image
    Offer:
      type: object
      required:
        - name
      properties:
        additionalServices:
          $ref: '#/components/schemas/JustId'
        afterSalesServices:
          $ref: '#/components/schemas/AfterSalesServices'
        attachments:
          type: array
          description: List of offer attachments. You can attach up to 7 files to the offer â€“ one per each attachment type as described in <a href="/documentation/#operation/createOfferAttachmentUsingPOST" target="_blank">uploading offer attachments flow</a>.
          items:
            $ref: '#/components/schemas/Attachment'
        category:
          $ref: '#/components/schemas/Category'
        compatibilityList:
          $ref: '#/components/schemas/CompatibilityList'
        contact:
          $ref: '#/components/schemas/JustId'
        createdAt:
          type: string
          format: date-time
          description: >-
            Creation date: Format (ISO 8601) - yyyy-MM-dd'T'HH:mm:ss.SSSZ.
            Cannot be modified.
        customParameters:
          type: array
          description: List of custom parameters. You can add up to 4 custom parameters, each containing exactly one value.
          items:
            $ref: '#/components/schemas/CustomParameter'
        delivery:
          $ref: '#/components/schemas/Delivery'
        description:
          $ref: '#/components/schemas/StandardizedDescription'
        ean:
          type: string
          maxLength: 18
        external:
          $ref: '#/components/schemas/ExternalId'
        fundraisingCampaign:
          $ref: '#/components/schemas/JustId'
        id:
          type: string
        images:
          type: array
          items:
            $ref: '#/components/schemas/ImageUrl'
        location:
          $ref: '#/components/schemas/Location'
        name:
          type: string
          description: Name of the offer. Words used in the name field cannot be longer than 50 characters.
          maxLength: 50
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/Parameter'
        payments:
          $ref: '#/components/schemas/Payments'
        product:
          $ref: '#/components/schemas/JustId'
        promotion:
          $ref: '#/components/schemas/Promotion'
        publication:
          $ref: '#/components/schemas/Publication'
        sellingMode:
          $ref: '#/components/schemas/SellingModeWithNetPrice'
        tax:
          $ref: '#/components/schemas/Tax'
        sizeTable:
          $ref: '#/components/schemas/JustId'
        stock:
          $ref: '#/components/schemas/Stock'
        tecdocSpecification:
          $ref: '#/components/schemas/TecdocSpecification'
        updatedAt:
          type: string
          format: date-time
          description: >-
            Last update date: Format (ISO 8601) - yyyy-MM-dd'T'HH:mm:ss.SSSZ.
            Cannot be modified
        validation:
          $ref: '#/components/schemas/Validation'
      description: Single offer data.
    OfferChangeCommand:
      type: object
      properties:
        modification:
          $ref: '#/components/schemas/Modification'
        offerCriteria:
          type: array
          description: List of offer criteria
          items:
            $ref: '#/components/schemas/OfferCriterium'
      description: Modification command payload
    OfferPriceChangeCommand:
      type: object
      properties:
        modification:
          $ref: '#/components/schemas/PriceModification'
        offerCriteria:
          type: array
          description: List of offer criteria
          items:
            $ref: '#/components/schemas/OfferCriterium'
      description: Price modification command payload
    PriceModification:
      type: object
      description: >-
        The way the offer price should be changed. One of three ways is possible:
        new price, increase/decrease price, percentage change and only one can be chosen at once.
      required:
        - type
      discriminator:
        propertyName: type
        mapping:
          FIXED_PRICE: '#/components/schemas/PriceModificationFixedPrice'
          INCREASE_PRICE: '#/components/schemas/PriceModificationValueChangeIncrease'
          DECREASE_PRICE: '#/components/schemas/PriceModificationValueChangeDecrease'
          INCREASE_PERCENTAGE: '#/components/schemas/PriceModificationPercentageChangeIncrease'
          DECREASE_PERCENTAGE: '#/components/schemas/PriceModificationPercentageChangeDecrease'
      properties:
        type:
          type: string
          description: Type of the modification.
    PriceModificationFixedPrice:
      allOf:
        - $ref: '#/components/schemas/PriceModification'
        - type: object
          properties:
            type:
              type: string
              default: 'FIXED_PRICE'
            price:
              $ref: '#/components/schemas/PriceModificationFixedPriceHolder'
    PriceModificationValueChangeIncrease:
      allOf:
        - $ref: '#/components/schemas/PriceModification'
        - type: object
          properties:
            type:
              type: string
              default: 'INCREASE_PRICE'
            value:
              $ref: '#/components/schemas/PriceModificationValueChangeHolder'
    PriceModificationValueChangeDecrease:
      allOf:
        - $ref: '#/components/schemas/PriceModification'
        - type: object
          properties:
            type:
              type: string
              default: 'DECREASE_PRICE'
            value:
              $ref: '#/components/schemas/PriceModificationValueChangeHolder'
    PriceModificationPercentageChangeIncrease:
      allOf:
        - $ref: '#/components/schemas/PriceModification'
        - type: object
          properties:
            type:
              type: string
              default: 'INCREASE_PERCENTAGE'
            percentage:
              $ref: '#/components/schemas/PriceModificationPercentageChangeHolder'
    PriceModificationPercentageChangeDecrease:
      allOf:
        - $ref: '#/components/schemas/PriceModification'
        - type: object
          properties:
            type:
              type: string
              default: 'DECREASE_PERCENTAGE'
            percentage:
              $ref: '#/components/schemas/PriceModificationPercentageChangeHolder'
    PriceModificationFixedPriceHolder:
      allOf:
        - $ref: '#/components/schemas/Price'
      description: 'New offer buy now price, related to type FIXED_PRICE.'
    PriceModificationValueChangeHolder:
      allOf:
        - $ref: '#/components/schemas/Price'
      description: 'Change of offer buy now price, related to types: INCREASE_PRICE, DECREASE_PRICE.'
    PriceModificationPercentageChangeHolder:
      type: string
      description: 'Percentage change of offer buy now price, related to types: INCREASE_PERCENTAGE, DECREASE_PERCENTAGE. Provided in a string format to avoid rounding errors.'
    OfferQuantityChangeCommand:
      type: object
      properties:
        modification:
          $ref: '#/components/schemas/QuantityModification'
        offerCriteria:
          type: array
          description: List of offer criteria
          items:
            $ref: '#/components/schemas/OfferCriterium'
      description: Quantity modification command payload
    QuantityModification:
      type: object
      description: >-
        The way the offer quantity should be changed. One of two ways is possible:
        new quantity, increase/decrease quantity and only one can be chosen at once.
      properties:
        changeType:
          description: modification type
          type: string
          enum:
            - 'FIXED'
            - 'GAIN'
        value:
          type: integer
    SellerRebateOfferCriterion:
      type: object
      required:
        - type
      properties:
        offers:
          type: array
          description: >-
            Set of offers â€“ only if `type` is `CONTAINS_OFFERS`
          items:
            type: object
            required:
              - id
            properties:
              id:
                type: string
                description: Offer id
                example: "1233432"
              quantity:
                type: number
                description: >-
                  that many pieces of your offer will be part of the bundle, valid only for bundle `ORDER_FIXED_DISCOUNT` promotions
                example: 5
              promotionEntryPoint:
                type: boolean
                description: >-
                  offers with this flag set to true will have a section that allows the users to purchase your bundle,
                  valid only for bundle `ORDER_FIXED_DISCOUNT` promotions
                example: false
        type:
          type: string
          description: 'Criteria type: CONTAINS_OFFERS or OFFERS_ASSIGNED_EXTERNALLY'
          enum:
            - CONTAINS_OFFERS
            - OFFERS_ASSIGNED_EXTERNALLY
    OfferCriterium:
      type: object
      properties:
        offers:
          type: array
          description: Set of offers
          items:
            $ref: '#/components/schemas/OfferId'
        type:
          type: string
          description: 'Criteria type: CONTAINS_OFFERS'
          enum:
            - CONTAINS_OFFERS
      description: Contains offers criteria
    OfferId:
      type: object
      properties:
        id:
          type: string
          description: Offer id
    OfferQuoteDto:
      type: object
      properties:
        enabled:
          type: boolean
        fee:
          $ref: '#/components/schemas/Fee'
        name:
          type: string
        nextDate:
          type: string
          format: date-time
        offer:
          $ref: '#/components/schemas/OfferId'
        type:
          type: string
      title: OfferQuoteDto
    OfferQuotesDto:
      type: object
      properties:
        count:
          type: integer
          format: int32
        quotes:
          type: array
          items:
            $ref: '#/components/schemas/OfferQuoteDto'
      title: OfferQuotesDto
    OpenHour:
      type: object
      required:
        - dayOfWeek
        - from
        - to
      properties:
        dayOfWeek:
          type: string
          description: >-
            Days of the week: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY,
            SATURDAY, SUNDAY. Date format ISO 8601
        from:
          type: string
          description: 'Date format (ISO 8601) - HH:mm:ss.SSS'
        to:
          type: string
          description: 'Date format (ISO 8601) - HH:mm:ss.SSS'
    Order:
      type: object
      required:
        - id
        - offers
      properties:
        id:
          type: string
          description: Order id
        offers:
          type: array
          description: List of order offers
          items:
            $ref: '#/components/schemas/Offer'
    Parameter:
      type: object
      required:
        - id
      properties:
        id:
          type: string
        rangeValue:
          $ref: '#/components/schemas/ParameterRangeValue'
        values:
          type: array
          items:
            type: string
        valuesIds:
          type: array
          items:
            type: string
      description: Offer's parameter.
    CategoryParameter:
      type: object
      required:
        - type
      discriminator:
        propertyName: type
        mapping:
          integer: '#/components/schemas/IntegerCategoryParameter'
          float: '#/components/schemas/FloatCategoryParameter'
          string: '#/components/schemas/StringCategoryParameter'
          dictionary: '#/components/schemas/DictionaryCategoryParameter'
      properties:
        id:
          type: string
          description: The ID of the parameter.
          example: "11323"
        name:
          type: string
          description: The name of the parameter in Polish.
          example: "Stan"
        type:
          type: string
          description: >-
            The type of the parameter. Other fields in this structure may appear based on the type of the parameter.
        required:
          type: boolean
          description: >-
            Indicates whether the value of this parameter must be set in an offer. Offers without required parameters
            set cannot be published.
        requiredForProduct:
          type: boolean
          description: >-
            Indicates whether the value of this parameter must be set in a product. Product without required parameters
            set cannot be created.
        unit:
          type: string
          description: The unit in which values of the parameter are used. May be `null`.
          example: "kg"
        options:
          $ref: '#/components/schemas/CategoryParameterOptions'
    CategoryProductParameter:
      type: object
      required:
        - type
      discriminator:
        propertyName: type
        mapping:
          integer: '#/components/schemas/IntegerCategoryProductParameter'
          float: '#/components/schemas/FloatCategoryProductParameter'
          string: '#/components/schemas/StringCategoryProductParameter'
          dictionary: '#/components/schemas/DictionaryCategoryProductParameter'
      properties:
        id:
          type: string
          description: The ID of the parameter.
          example: "11323"
        name:
          type: string
          description: The name of the parameter in Polish.
          example: "Numer katalogowy"
        type:
          type: string
          description: >-
            The type of the product parameter. Other fields in this structure may appear based on the type of the parameter.
        required:
          type: boolean
          description: >-
            Indicates whether the value of this parameter must be set in a product. Product without required parameters
            set cannot be created.
        unit:
          type: string
          description: The unit in which values of the parameter are used. May be `null`.
          example: "kg"
    DictionaryCategoryProductParameter:
      allOf:
        - $ref: '#/components/schemas/CategoryProductParameter'
        - type: object
          properties:
            type:
              type: string
              default: dictionary
            restrictions:
              type: object
              description: The restrictions on values of this parameter.
              properties:
                multipleChoices:
                  type: boolean
                  description: Indicates whether this parameter can have more than one value.
            dictionary:
              type: array
              description: Defines the values accepted for this parameter.
              items:
                type: object
                properties:
                  id:
                    type: string
                    description: >-
                      The ID of the dictionary value. Use it to set the value in an offer or in a product.
                    example: "11323_1"
                  value:
                    type: string
                    description: The label of the dictionary value in Polish.
                    example: "Nowy"
    IntegerCategoryProductParameter:
      allOf:
        - $ref: '#/components/schemas/CategoryProductParameter'
        - type: object
          properties:
            type:
              type: string
              default: integer
            restrictions:
              type: object
              description: The restrictions on values of this parameter.
              properties:
                min:
                  type: integer
                  description: The minimum value of this parameter.
                  example: 8
                max:
                  type: integer
                  description: The maximum value of this parameter.
                  example: 128
                range:
                  type: boolean
                  description: >-
                    Indicates whether this is a range parameter. If this is `true`, then you have to provide two values
                    for this parameter - `from` and `to`. Both these values have to be between the `min` and `max`.
    FloatCategoryProductParameter:
      allOf:
        - $ref: '#/components/schemas/CategoryProductParameter'
        - type: object
          properties:
            type:
              type: string
              default: float
            restrictions:
              type: object
              description: The restrictions on values of this parameter.
              properties:
                min:
                  type: number
                  description: The minimum value of this parameter.
                  example: 0.0
                max:
                  type: number
                  description: The maximum value of this parameter.
                  example: 10000.0
                range:
                  type: boolean
                  description: >-
                    Indicates whether this is a range parameter. If this is `true`, then you have to provide two values
                    for this parameter - `from` and `to`. Both these values have to be between the `min` and `max`.
                precision:
                  type: integer
                  description: Number of digits you can provide after a comma that can be transferred in the parameter value.
                  example: 3
    StringCategoryProductParameter:
      allOf:
        - $ref: '#/components/schemas/CategoryProductParameter'
        - type: object
          properties:
            type:
              type: string
              default: string
            restrictions:
              type: object
              description: The restrictions on values of this parameter.
              properties:
                minLength:
                  type: integer
                  description: The minimum length of the parameter value.
                  example: 3
                maxLength:
                  type: integer
                  description: The maximum length of the parameter value.
                  example: 250
                allowedNumberOfValues:
                  type: integer
                  description: Indicates how many different values can be provided for this parameter.
                  example: 5
    CategoryParameterOptions:
      type: object
      properties:
        variantsAllowed:
          type: boolean
          description: Parameters with this option enabled can be used for offer variants creation.
        variantsEqual:
          type: boolean
          description: All offer variants must have the same values in parameters with this option enabled.
        ambiguousValueId:
          type: string
          description: >-
            Indicates what value in the dictionary is defined as an ambiguous one.
            Only parameters with dictionaries might have this option defined.
          example: "128788_36"
        dependsOnParameterId:
          type: string
          description: >-
            Values in the dictionary depend on the parameter referenced by this field.
            Only parameters with dictionaries can have this option defined.
          example: "211062"
        describesProduct:
          type: boolean
          description: Indicates if parameter is used to define products.
        customValuesEnabled:
          type: boolean
          description: Indicates if a custom value can be added to a parameter with an ambiguous value.
      description: A list of the different options which can be used with this parameter.
    DictionaryCategoryParameter:
      allOf:
        - $ref: '#/components/schemas/CategoryParameter'
        - type: object
          properties:
            type:
              type: string
              default: dictionary
            restrictions:
              type: object
              description: The restrictions on values of this parameter.
              properties:
                multipleChoices:
                  type: boolean
                  description: Indicates whether this parameter can have more than one value.
            dictionary:
              type: array
              description: Defines the values accepted for this parameter.
              items:
                type: object
                properties:
                  id:
                    type: string
                    description: >-
                      The ID of the dictionary value. Use it to set the value in an offer or in a product.
                    example: "11323_1"
                  value:
                    type: string
                    description: The label of the dictionary value in Polish.
                    example: "Nowy"
                  dependsOnValueIds:
                    type: array
                    items:
                      type: string
                      description: >-
                        The ID of the dictionary value from parameter that this parameter depends on.
                        This value might be set in the offer, but only when the referenced value is set as well.
                      example: "211062_246554"
    IntegerCategoryParameter:
      allOf:
        - $ref: '#/components/schemas/CategoryParameter'
        - type: object
          properties:
            type:
              type: string
              default: integer
            restrictions:
              type: object
              description: The restrictions on values of this parameter.
              properties:
                min:
                  type: integer
                  description: The minimum value of this parameter.
                  example: 8
                max:
                  type: integer
                  description: The maximum value of this parameter.
                  example: 128
                range:
                  type: boolean
                  description: >-
                    Indicates whether this is a range parameter. If this is `true`, then you have to provide two values
                    for this parameter - `from` and `to`. Both these values have to be between the `min` and `max`.
    FloatCategoryParameter:
      allOf:
        - $ref: '#/components/schemas/CategoryParameter'
        - type: object
          properties:
            type:
              type: string
              default: float
            restrictions:
              type: object
              description: The restrictions on values of this parameter.
              properties:
                min:
                  type: number
                  description: The minimum value of this parameter.
                  example: 0.0
                max:
                  type: number
                  description: The maximum value of this parameter.
                  example: 10000.0
                range:
                  type: boolean
                  description: >-
                    Indicates whether this is a range parameter. If this is `true`, then you have to provide two values
                    for this parameter - `from` and `to`. Both these values have to be between the `min` and `max`.
                precision:
                  type: integer
                  description: Number of digits you can provide after a comma that can be transferred in the parameter value.
                  example: 3
    StringCategoryParameter:
      allOf:
        - $ref: '#/components/schemas/CategoryParameter'
        - type: object
          properties:
            type:
              type: string
              default: string
            restrictions:
              type: object
              description: The restrictions on values of this parameter.
              properties:
                minLength:
                  type: integer
                  description: The minimum length of the parameter value.
                  example: 3
                maxLength:
                  type: integer
                  description: The maximum length of the parameter value.
                  example: 250
                allowedNumberOfValues:
                  type: integer
                  description: Indicates how many different values can be provided for this parameter.
                  example: 5
    ParameterRangeValue:
      type: object
      required:
        - from
        - to
      properties:
        from:
          type: string
        to:
          type: string
      description: Parameter's range value
    CategoryParameterList:
      type: object
      properties:
        parameters:
          type: array
          description: The list of parameters supported by the category.
          items:
            $ref: '#/components/schemas/CategoryParameter'
    CategoryProductParameterList:
      type: object
      properties:
        parameters:
          type: array
          description: The list of product parameters supported by the category.
          items:
            $ref: '#/components/schemas/CategoryProductParameter'
    Payment:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          description: 'Available forms of payment: CASH - cash, CARD - card.'
    Payments:
      type: object
      properties:
        invoice:
          type: string
          description: 'Invoice type, one of: VAT, VAT_MARGIN, WITHOUT_VAT, NO_INVOICE'
    PhonesRequest:
      type: object
      properties:
        number:
          type: string
          maxLength: 250
          description: A valid phone number
    PhonesResponse:
      type: object
      properties:
        number:
          type: string
    Pos:
      type: object
      required:
        - address
        - confirmationType
        - name
        - openHours
        - status
        - type
      properties:
        id:
          type: string
          description: >-
            UUID. When creating a point of service (Post) the field is ignored.
            It is required when updating (Put) a point of service.
        externalId:
          type: string
          description: ID from external client system.
          maxLength: 80
        name:
          type: string
          maxLength: 80
        seller:
          $ref: '#/components/schemas/Seller'
        type:
          type: string
          description: Indicates point type. The only valid value so far is PICKUP_POINT.
        address:
          $ref: '#/components/schemas/Address'
        phoneNumber:
          type: string
          maxLength: 16
        email:
          type: string
          maxLength: 64
        openHours:
          type: array
          description: Possible empty list of opening hours.
          items:
            $ref: '#/components/schemas/OpenHour'
        serviceTime:
          type: string
          description: >-
            Delivery time / Time period for receipt. Date format ISO 8601 e.g.
            'PT24H'
        payments:
          type: array
          description: An empty list of payment types is available.
          items:
            $ref: '#/components/schemas/Payment'
        confirmationType:
          type: string
          description: >-
            Confirmation method: AWAIT_CONTACT - We will inform you about the
            time of receipt, CALL_US - Please make an appointment,
            CONTACT_NOT_REQUIRED - Contact is not required.
        status:
          type: string
          description: >-
            Point of service status: ACTIVE - active, TEMPORARILY_CLOSED -
            temporarily closed, CLOSED_DOWN - closed down, DELETED - deleted.
        createdAt:
          type: string
          description: >-
            Creation date. Date format (ISO 8601) - yyyy-MM-dd'T'HH:mm:ss.SSSZ
            When creating (Post) or updating (Put) a point of service (Post) the field is ignored.
        updatedAt:
          type: string
          description: >-
            Modification date. Date format (ISO 8601) - yyyy-MM-dd'T'HH:mm:ss.SSSZ
            When creating (Post) or updating (Put) a point of service (Post) the field is ignored.
    Price:
      type: object
      description: The price data.
      required:
        - amount
        - currency
      properties:
        amount:
          type: string
          description: The amount provided in a string format to avoid rounding errors.
          example: '123.45'
        currency:
          type: string
          format: ISO 4217
          description: The currency provided as a 3-letter code in accordance with ISO 4217 standard (https://en.wikipedia.org/wiki/ISO_4217).
          example: 'PLN'
    ProcessingStatus:
      type: string
      description: The processing status of the command.
      enum:
        - QUEUEING
        - RUNNING
        - VALIDATED_AND_RUNNING
        - RUNNING_BUT_WITH_ERRORS
        - SUCCESSFUL
        - PARTIAL_SUCCESS
        - ERROR
    Promotion:
      type: object
      properties:
        bold:
          type: boolean
        departmentPage:
          type: boolean
        emphasized:
          type: boolean
        emphasizedHighlightBoldPackage:
          type: boolean
        highlight:
          type: boolean
    PublicTableDto:
      type: object
      required:
        - headers
        - name
        - orientation
        - values
      properties:
        headers:
          type: array
          items:
            $ref: '#/components/schemas/Header'
        id:
          type: string
        image:
          $ref: '#/components/schemas/PublicTableImageDto'
        name:
          type: string
        orientation:
          type: string
          enum:
            - HORIZONTAL
            - VERTICAL
        values:
          type: array
          items:
            $ref: '#/components/schemas/Cells'
      title: PublicTableDto
    PublicTableImageDto:
      type: object
      required:
        - captions
        - url
      properties:
        captions:
          type: array
          items:
            $ref: '#/components/schemas/Caption'
        url:
          type: string
      title: PublicTableImageDto
    PublicTablesDto:
      type: object
      required:
        - tables
      properties:
        tables:
          type: array
          items:
            $ref: '#/components/schemas/PublicTableDto'
      title: PublicTablesDto
    Publication:
      type: object
      properties:
        duration:
          type: string
          example: PDT12H30M5S
          description: 'Publication duration, ISO 8601 duration format'
        endingAt:
          type: string
          format: date-time
          description: >-
            Publication ending date: Format (ISO 8601) -
            yyyy-MM-dd'T'HH:mm:ss.SSSZ. Cannot be modified
        startingAt:
          type: string
          format: date-time
          description: >-
            Publication starting date: Format (ISO 8601) -
            yyyy-MM-dd'T'HH:mm:ss.SSSZ. Cannot be modified
        status:
          $ref: '#/components/schemas/OfferStatus'
        endedBy:
          type: string
          enum:
          - USER
          - ADMIN
          - EXPIRATION
          - ERROR
          description: >-
            Indicates the reason for ending the offer:
             - `USER` - offer ended by the seller.
             - `ADMIN` - offer ended by an admin.
             - `EXPIRATION` - offer ended because all available items had been sold out or offer duration had expired (valid for
               offers with specified duration).
             - `ERROR` - offer ended due to internal problem with offer publication. The publication command responded with
               success status, but further processing failed.
        republish:
          type: boolean
          example: false
          description: >-
            Whether to republish an offer after ending. Automatically republish offers or auctions:</br>
            - `BUY_NOW` offer type are republished with initial stock, regardless of how many items you have sold.</br>
            - `AUCTION` offer type are republished only if they were not concluded with purchase.</br>
            - `ADVERTISEMENT` offer type cannot be republished.
    PublicationChangeCommandDto:
      type: object
      properties:
        offerCriteria:
          type: array
          description: List of offer criteria
          items:
            $ref: '#/components/schemas/OfferCriterium'
        publication:
          $ref: '#/components/schemas/Publication_modification'
      description: Publication modification command payload
    Rates:
      type: object
      properties:
        delivery:
          type: integer
          format: int32
          example: 5
          description: Delivery rate value
          enum:
            - 1
            - 2
            - 3
            - 4
            - 5
        deliveryCost:
          type: integer
          format: int32
          example: 5
          description: Delivery cost rate value
          enum:
            - 1
            - 2
            - 3
            - 4
            - 5
        description:
          type: integer
          format: int32
          example: 5
          description: Description rate value
          enum:
            - 1
            - 2
            - 3
            - 4
            - 5
        service:
          type: integer
          format: int32
          example: 5
          description: Service rate value
          enum:
            - 1
            - 2
            - 3
            - 4
            - 5
    Reference:
      type: object
      properties:
        id:
          type: string
    Removal:
      type: object
      required:
        - possibleTo
      properties:
        possibleTo:
          type: string
          format: date-time
          example: '2017-05-17T08:36:57.292+02:00'
          description: Date until a removal request can be submitted in ISO 8601 format
        request:
          $ref: '#/components/schemas/RemovalRequest'
    RemovalRequest:
      type: object
      description: 'Submitted removal request, null if removal was not requested'
      required:
        - createdAt
        - message
      properties:
        createdAt:
          type: string
          format: date-time
          example: '2017-05-17T08:36:57.292+02:00'
          description: Removal request creation datetime in ISO 8601 format
        message:
          type: string
          description: Message containing explanation for removing rating
    UserRatingRemovalRequest:
      type: object
      required:
        - request
      properties:
        request:
          type: object
          required:
            - message
          properties:
            message:
              type: string
              description: 'Message containing explanation for removing rating.'
              maxLength: 500
    ReturnPolicyBasic:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    SearchResult:
      properties:
        posList:
          type: array
          items:
            $ref: '#/components/schemas/Pos'
    Seller:
      type: object
      required:
        - id
      properties:
        id:
          type: string
    SellerCreateRebateRequestDto:
      type: object
      required:
        - benefits
        - offerCriteria
      properties:
        benefits:
          description: What kind of rebate will be given
          type: array
          items:
            $ref: '#/components/schemas/Benefit'
        offerCriteria:
          description: What offers will be included
          type: array
          items:
            $ref: '#/components/schemas/SellerRebateOfferCriterion'
    SellerRebateDto:
      type: object
      required:
        - benefits
        - id
        - offerCriteria
        - status
      properties:
        benefits:
          description: What kind of rebate will be given
          type: array
          items:
            $ref: '#/components/schemas/Benefit'
        createdAt:
          type: string
          description: when was this rebate created
          format: date-time
          example: '2019-05-01T10:12:32.321Z'
        id:
          type: string
          description: Rebate identifier
          example: '7c9a76d3-9fd0-4d13-a4ce-5d49bec12c79'
        offerCriteria:
          description: What offers will be included
          type: array
          items:
            $ref: '#/components/schemas/SellerRebateOfferCriterion'
        status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
            - SUSPENDED
    SellerRebatesDto:
      type: object
      required:
        - promotions
        - totalCount
      properties:
        promotions:
          type: array
          items:
            $ref: '#/components/schemas/SellerRebateDto'
        totalCount:
          type: integer
          format: int64
    ShippingRate:
      type: object
      properties:
        deliveryMethod:
          type: object
          properties:
            id:
              type: string
              description: ID of the delivery method
        maxQuantityPerPackage:
          type: integer
          description: >-
            Maximum quantity per package for the given delivery
            method. Minimum value is 1.
          minimum: 1
        firstItemRate:
          type: object
          description: >-
            Rate for the first item in the parcel for the given
            delivery method
          properties:
            amount:
              type: string
              description: Amount
            currency:
              type: string
              description: ISO 4217 currency code
        nextItemRate:
          type: object
          description: >-
            Rate for every other item, after the first, in the
            same parcel for the given delivery method
          properties:
            amount:
              type: string
              description: Amount
            currency:
              type: string
              description: ISO 4217 currency code
        shippingTime:
          type: object
          description: >-
            Custom shipping time for the given delivery method (allowed only for methods with shippingRatesConstraints.shippingTime.customizable set to true in the delivery-methods resource).
            If not set the default shipping time specified in the delivery-methods resource is used.
          properties:
            from:
              type: string
              description: 'ISO 8601 duration format, e.g. P3D for 3 days'
            to:
              type: string
              description: 'ISO 8601 duration format, e.g. P3D for 3 days'
      required:
        - deliveryMethod
        - firstItemRate
        - maxQuantityPerPackage
        - nextItemRate
    ShippingRates:
      type: object
      properties:
        id:
          type: string
          description: Id of shipping rates
    OfferShippingRates:
      type: object
      properties:
        rates:
          type: array
          description: >-
            If empty there is the shipping rates set attached to offer.
            You should use the GET /sale/offers/{offerId} resource to retrieve the shipping rates set ID.
          items:
            $ref: '#/components/schemas/ShippingRate'
    ShippingRatesSet:
      type: object
      properties:
        id:
          type: string
          description: >-
            Shipping rates set ID (UUID)
            When creating a shipping rates set (Post) the field is ignored.
            It is required when updating (Put) a shipping rates.
        name:
          type: string
          minLength: 1
          maxLength: 64
          description: >-
            User defined name of the shipping rates set.
            It may only contain: letters, numbers, hyphens, dots, commas and spaces.
        rates:
          type: array
          items:
            $ref: '#/components/schemas/ShippingRate'
        lastModified:
          type: string
          description: >-
            Date and time of the last modification of the set in UTC
            ISO 8601 format.
            When creating (Post) or updating (Put) a shipping rates set the field is ignored.
      required:
        - rates
    DeliverySettingsDto:
      type: object
      properties:
        freeDelivery:
          type: object
          description: A minimum total order amount required to qualify for free delivery.
          properties:
            amount:
              type: string
              description: The amount provided in a string format to avoid rounding errors.
              example: '123.45'
            currency:
              type: string
              format: ISO 4217
              description: The currency provided as a 3-letter code in accordance with ISO 4217 standard (https://en.wikipedia.org/wiki/ISO_4217).
              example: 'PLN'
        joinPolicy:
          type: object
          description: Policy of calculating delivery costs.
          properties:
            strategy:
              type: string
              description: >-
                Strategy used to calculate delivery cost for items from offers with different delivery costs.

                The possible values:
                  * `MAX` - The buyer will pay for the most expensive delivery
                  * `MIN` - The buyer will pay for the cheapest delivery
                  * `SUM` - Items will be sent in separate parcels and delivery costs will be sum of delivery costs for each item.
              enum:
                - MIN
                - MAX
                - SUM
        customCost:
          description: Policy of custom delivery cost.
          type: object
          properties:
            allowed:
              type: boolean
              example: false
              description: >-
                If true the customer can enter a custom shipping cost.
        updatedAt:
          type: string
          description: >-
            Date and time of the last modification of the set in UTC
            ISO 8601 format.
            When updating (Put) settings the field is ignored.
    StandardizedDescription:
      type: object
      description: The description section cannot have more than 40000 bytes in length.
      properties:
        sections:
          type: array
          items:
            $ref: '#/components/schemas/DescriptionSection'
    Stock:
      type: object
      properties:
        available:
          type: integer
          format: int32
        unit:
          type: string
          description: 'Stock unit, one of: UNIT, PAIR, SET'
    TaskCount:
      type: object
      properties:
        failed:
          type: integer
          format: int32
          description: Current number of failed offers updates
        success:
          type: integer
          format: int32
          description: Current number of success offers updates
        total:
          type: integer
          format: int32
          description: Total number of scheduled offers updates
      description: Offers updates summary
    TaskReport:
      type: object
      properties:
        tasks:
          type: array
          description: List of task results
          items:
            $ref: '#/components/schemas/CommandTask'
      description: Contains list of task results
    UUID:
      type: string
      format: uuid
      description: >-
        Universally Unique Identifier (UUID) generated by you that can be used
        to enforce idempotency. UUID specification:
        http://www.ietf.org/rfc/rfc4122.txt
    User:
      type: object
      required:
        - id
        - login
      properties:
        id:
          type: string
          description: Buyer id
        login:
          type: string
          description: Buyer's login
    UserRating:
      type: object
      required:
        - buyer
        - comment
        - createdAt
        - id
        - recommended
      properties:
        answer:
          $ref: '#/components/schemas/Answer'
        buyer:
          $ref: '#/components/schemas/User'
        comment:
          type: string
          description: Buyer's text comment
        createdAt:
          type: string
          format: date-time
          example: '2017-05-17T08:36:57.292+02:00'
          description: Creation datetime in ISO 8601 format
        excludedFromAverageRates:
          type: boolean
          example: false
          description: >-
            If true this rating was not included in calculating average user
            rates
        id:
          type: string
          description: Rating id
        order:
          $ref: '#/components/schemas/Order'
        rates:
          $ref: '#/components/schemas/Rates'
        recommended:
          type: boolean
          example: false
          description: Whether buyer recommends the order
        removal:
          $ref: '#/components/schemas/Removal'
    UserRatingListResponse:
      type: object
      required:
        - ratings
      properties:
        ratings:
          type: array
          description: >-
            List of ratings that match requested filter. Empty when no rating
            matched.
          items:
            $ref: '#/components/schemas/UserRating'
    UserRatingSummaryResponse:
      type: object
      required:
        - notRecommended
        - recommended
        - recommendedPercentage
      properties:
        averageRates:
          $ref: '#/components/schemas/AverageRates'
        notRecommended:
          description: Summary of data concerning users that do not recommend the seller.
          type: object
          required:
            - total
            - unique
          properties:
            total:
              type: integer
              format: int64
              example: 100
              description: Total number of negative feedbacks received.
            unique:
              type: integer
              format: int64
              example: 80
              description: Number of unique users.
        recommended:
          description: Summary of data concerning users that recommend the seller.
          type: object
          required:
            - total
            - unique
          properties:
            total:
              type: integer
              format: int64
              example: 100
              description: Total number of positive feedbacks received.
            unique:
              type: integer
              format: int64
              example: 75
              description: Number of unique users.
        recommendedPercentage:
          type: string
          example: '99,8'
          description: Percentage of unique buyers recommending the seller.
    Validation:
      type: object
      required:
        - errors
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
        warnings:
          type: array
          items:
            $ref: '#/components/schemas/ValidationWarning'
        validatedAt:
          type: string
          format: date-time
    ValidationError:
      type: object
      properties:
        code:
          type: string
        details:
          type: string
        message:
          type: string
        path:
          type: string
        userMessage:
          type: string
    ValidationWarning:
      type: object
      properties:
        code:
          type: string
        details:
          type: string
        message:
          type: string
        path:
          type: string
        userMessage:
          type: string
    WarrantyBasic:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    Describes_listing_fee:
      type: object
      required:
        - fee
        - name
        - type
        - cycleDuration
      properties:
        fee:
          $ref: '#/components/schemas/Fee'
        name:
          type: string
        type:
          type: string
        cycleDuration:
          type: string
          example: "PT240H"
          description: Pricing cycle duration, ISO 8601 duration format
    Describes_success_commission_fee:
      type: object
      required:
        - fee
        - name
        - type
      properties:
        fee:
          $ref: '#/components/schemas/Fee'
        name:
          type: string
        type:
          type: string
    ImpliedWarrantiesList_ImpliedWarrantyBasic_:
      type: object
      properties:
        count:
          type: integer
          format: int32
        impliedWarranties:
          type: array
          items:
            $ref: '#/components/schemas/ImpliedWarrantyBasic'
    ParametersForPreviewPrice:
      type: object
      required:
        - category
        - unitPrice
      properties:
        category:
          $ref: '#/components/schemas/Category'
        condition:
          type: string
          description: 'Offer condition, if is new, used or other.'
          enum:
            - NEW
            - USED
            - OTHER
        duration:
          type: string
          enum:
            - PT72H
            - PT120H
            - PT168H
            - PT240H
            - PT336H
            - PT480H
            - PT720H
        hasAnyQuantity:
          type: boolean
        numberOfBigPhotos:
          type: integer
          format: int32
          description: 'If set, minimum value 0'
        numberOfPhotos:
          type: integer
          format: int32
          description: 'If set, minimum value 0'
        quantity:
          type: integer
          format: int32
          description: 'Quantity of items to be sold. If set, minimum value 1'
        shop:
          type: boolean
          example: false
          description: >-
            Deprecated. Value 'true' sets the 'offer.type' field to 'shop',
            value 'false' to 'offer'. This field is ignored if 'offer.type'
            field is set.
        soldQuantity:
          type: integer
          format: int32
          description: >-
            Quantity of sold items. Relates to commission success fee. If set,
            minimum value 1
        type:
          type: string
          description: >-
            Offer type. 'type' or 'shop' fields must be provided. Takes
            precedence over 'shop' field. Note: if type = 'advertisement' then
            either 'quantity' or 'soldQuantity' field must be set.
          enum:
            - shop
            - offer
            - advertisement
        unitPrice:
          type: number
        bold:
          type: boolean
        highlight:
          type: boolean
        departmentPage:
          type: boolean
        emphasized:
          type: boolean
        emphasizedHighlightBoldPackage:
          type: boolean
        multiVariant:
          type: boolean
    Publication_modification:
      type: object
      properties:
        action:
          type: string
          description: Action to perform
          enum:
            - ACTIVATE
            - END
        scheduledFor:
          type: string
          format: date-time
          description: >-
            Date and time for scheduling ACTIVATE action, will be ignored for
            another actions
      description: Contains publication's fields to change
    ReturnPoliciesList_ReturnPolicyBasic_:
      type: object
      properties:
        count:
          type: integer
          format: int32
        returnPolicies:
          type: array
          items:
            $ref: '#/components/schemas/ReturnPolicyBasic'
    WarrantiesList_WarrantyBasic_:
      type: object
      properties:
        count:
          type: integer
          format: int32
        warranties:
          type: array
          items:
            $ref: '#/components/schemas/WarrantyBasic'
    Wrapper_type_for_preview_conditions:
      type: object
      properties:
        includeQuotingBundles:
          type: boolean
          example: false
          description: >-
            Include in calculation user's active bundles which allow to publish
            for free offer or use for free promotion options.
        offer:
          $ref: >-
            #/components/schemas/ParametersForPreviewPrice
    Wraps_listing_and_commissions_fees:
      type: object
      required:
        - commissions
        - quotes
      properties:
        commissions:
          type: array
          items:
            $ref: '#/components/schemas/Describes_success_commission_fee'
        quotes:
          type: array
          items:
            $ref: '#/components/schemas/Describes_listing_fee'
    VariantSet:
      type: object
      required:
        - offers
        - name
        - parameters
      properties:
        offers:
          type: array
          items:
            $ref: '#/components/schemas/VariantSet_Offer'
        name:
          type: string
          maxLength: 50
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/VariantSet_Parameter'
    VariantSetResponse:
      allOf:
        - type: object
          properties:
            id:
              type: string
        - $ref: '#/components/schemas/VariantSet'
    VariantSet_Offer:
      type: object
      required:
        - id
      properties:
        id:
          type: string
        colorPattern:
          type: string
          maxLength: 50
          description: >-
            Label that allows to group variants via image. All variants having the same image should have identical identifier in this field.
    VariantSet_Parameter:
      type: object
      required:
        - id
      properties:
        id:
          type: string
    VariantSets:
      type: object
      properties:
        count:
          type: integer
          description: Total number of variant sets matching the query.
        offerVariants:
          type: array
          items:
            $ref: '#/components/schemas/VariantSets_VariantSet'
      example:
        count: 10
        offerVariants:
          - id: 459fd49f-461f-4230-b22a-daff449b8548
            name: t-shirts
          - id: 70e6effe-7ae6-45f6-8566-80867f466d0a
            name: shoes
    VariantSets_VariantSet:
      type: object
      properties:
        id:
          type: string
          description: Variant set id.
        name:
          type: string
          description: Variant set name.
    ListingOffer:
      type: object
      properties:
        id:
          type: string
          description: The offer ID.
          example: "2865624934"
        name:
          type: string
          description: The title of the offer.
          example: Buty damskie adidas
        seller:
          $ref: '#/components/schemas/OfferSeller'
        promotion:
          $ref: '#/components/schemas/OfferPromotion'
        delivery:
          $ref: '#/components/schemas/OfferDelivery'
        images:
          type: array
          description: >-
            The gallery of images. Only the URL of the original sized image is provided.
            The first image represents the thumbnail image used on listing.
          items:
            $ref: '#/components/schemas/OfferImages'
        sellingMode:
          $ref: '#/components/schemas/OfferSellingMode'
        stock:
          $ref: '#/components/schemas/OfferStock'
        vendor:
          $ref: '#/components/schemas/OfferVendor'
        category:
          $ref: '#/components/schemas/OfferCategory'
        publication:
          $ref: '#/components/schemas/OfferPublication'
    ListingCategoryWithCount:
      type: object
      properties:
        id:
          type: string
          description: The category ID.
          example: "257929"
        name:
          type: string
          description: The category name.
          example: Sportowe
        count:
          type: integer
          example: 123
          description: Results count in this category.
    ListingCategory:
      type: object
      properties:
        id:
          type: string
          description: The Category ID.
          example: "257929"
        name:
          type: string
          description: The category name.
          example: Sportowe
    ListingResponse:
      type: object
      properties:
        items:
          $ref: '#/components/schemas/ListingResponseOffers'
        categories:
          $ref: '#/components/schemas/ListingResponseCategories'
        filters:
          type: array
          description: >-
            An array of filters with counters available for given search. This can be used
            to refine the search results.
          items:
            $ref: '#/components/schemas/ListingResponseFilters'
        searchMeta:
          $ref: '#/components/schemas/ListingResponseSearchMeta'
        sort:
          type: array
          description: Available sorting options.
          items:
            $ref: '#/components/schemas/ListingResponseSort'
    OfferSeller:
      properties:
        id:
          type: string
          description: The seller ID.
          example: "41846511"
        login:
          type: string
          description: The seller login.
          example: "myLogin"
        company:
          type: boolean
          description: Indicates whether the seller represents a registered business.
        superSeller:
          type: boolean
          description: Indicates whether the seller has the "Super Sprzedawca" status.
      description: Information about the seller.
    OfferStock:
      properties:
        unit:
          type: string
          enum:
            - UNIT
            - PAIR
            - SET
          description: The unit type of the stock.
        available:
          type: integer
          description: The available stock value.
          example: 23
      description: Information about the stock.
    OfferPromotion:
      properties:
        emphasized:
          type: boolean
          description: Indicates whether the offer is promoted.
        bold:
          type: boolean
          description: Indicates whether the offer has bold title option.
        highlight:
          type: boolean
          description: Indicates whether the offer has highlight option.
      description: Information about promotion options for the item.
    OfferLowestPrice:
      properties:
        amount:
          type: string
          description: The amount provided in a string format to avoid rounding errors.
          example: '123.45'
        currency:
          type: string
          format: ISO 4217
          description: The currency provided as a 3-letter code in accordance with ISO 4217 standard (https://en.wikipedia.org/wiki/ISO_4217).
          example: 'PLN'
      description: >-
        The lowest shipping cost available. Lack of this entity means that the offer has no
        shipping options (i.e. it is an advertisement or an offer with electronic delivery
        only).
    OfferPrice:
      properties:
        amount:
          type: string
          description: The amount provided in a string format to avoid rounding errors.
          example: '123.45'
        currency:
          type: string
          format: ISO 4217
          description: The currency provided as a 3-letter code in accordance with ISO 4217 standard (https://en.wikipedia.org/wiki/ISO_4217).
          example: 'PLN'
      description: >-
        The price of the offer. It is the buy now price for *BUY_NOW* selling format and
        current auction price for *AUCTION* format.
    OfferFixedPrice:
      properties:
        amount:
          type: string
          description: The amount provided in a string format to avoid rounding errors.
          example: '123.45'
        currency:
          type: string
          format: ISO 4217
          description: The currency provided as a 3-letter code in accordance with ISO 4217 standard (https://en.wikipedia.org/wiki/ISO_4217).
          example: 'PLN'
      description: >-
        Fixed (buy now) price of the offer in case of *AUCTION* selling format
        with buy now option enabled.
    OfferDelivery:
      properties:
        availableForFree:
          type: boolean
          description: Indicates whether the offer has free shipping option.
        lowestPrice:
          $ref: '#/components/schemas/OfferLowestPrice'
      description: Information about shipping options for the offer.
    OfferImages:
      properties:
        url:
          type: string
          description: The URL of the original sized image.
          example: https://a.allegroimg.com/original/0129e7/f15ce8924166850eec3fb82bcd5s/BUTY-ADIDAS-DAMSKIE
    OfferSellingMode:
      properties:
        format:
          $ref: '#/components/schemas/SellingModeFormat'
        price:
          $ref: '#/components/schemas/OfferPrice'
        fixedPrice:
          $ref: '#/components/schemas/OfferFixedPrice'
        popularity:
          type: integer
          description: Popularity of the offer for *BUY_NOW* selling format.
          example: 38
        bidCount:
          type: integer
          description: Number of bidders for *AUCTION* selling format.
          example: 12
      description: This section describes the selling format and prices.
    OfferCategory:
      type: object
      description: The category to which the offer is assigned.
      properties:
        id:
          type: string
          example: "257929"
          description: The category ID.
    OfferVendor:
      properties:
        id:
          type: string
          enum:
            - CHARYTATYWNI_ALLEGRO
            - ALLEGRO_LOKALNIE
          description: Identifier of the external service.
        url:
          type: string
          description: URL to the web page of the offer.
          example: http://charytatywni.allegro.pl/oferta-charytatywna-i1234567
      description: This section is available only for the charity and allegrolokalnie.pl offers.
    OfferPublication:
      properties:
        endingAt:
          type: string
          format: ISO 8601
          description: Publication ending date and time in UTC.
          example: "2019-05-15T18:09:41.000Z"
      description: >-
        This section is available only for offers with a defined end of
        publication.
    ListingResponseOffers:
      properties:
        promoted:
          type: array
          description: List of promoted offers.
          items:
            $ref: '#/components/schemas/ListingOffer'
        regular:
          type: array
          description: List of regular (non-promoted) offers.
          items:
            $ref: '#/components/schemas/ListingOffer'
      description: The lists of search results.
    ListingResponseCategories:
      properties:
        subcategories:
          type: array
          description: >-
            Categories with counters, which can be used to refine search
            results.
          items:
            $ref: '#/components/schemas/ListingCategoryWithCount'
        path:
          type: array
          description: Categories path to the current listing category (breadcrumbs).
          items:
            $ref: '#/components/schemas/ListingCategory'
      description: Information about categories.
    ListingResponseFiltersValues:
      properties:
        name:
          type: string
          description: >-
            Name of the option;
            for NUMERIC parameters - word indicating start or end of range (i.e. *from*, *to*).
          example: raty zero
        value:
          type: string
          description: >-
            Filter value. Should be used as query parameter value in the
            request. This can be:

             - for MULTI and SINGLE parameters - a value identifier (e.g. KUJAWSKO_POMORSKIE option in location.province
             filter),
             - for other types - a value entered by user.
          example: INSTALLMENTS_ZERO
        idSuffix:
          type: string
          description: Suffix used as a second part of query parameter name to be used in the request
            (the first part is the filter ID). Applicable for NUMERIC values only.
          example: .to
        count:
          type: integer
          description: Number of search results matching this filter value.
          example: 123
        selected:
          type: boolean
          description: Indicates whether this filter value was used in the current request.
    ListingResponseFilters:
      properties:
        id:
          type: string
          description: Identifier of the filter. Should be used as query parameter key,
            optionally followed by idSuffix from parameter value (only for NUMERIC filters).
          example: campaign
        type:
          type: string
          enum:
            - MULTI
            - SINGLE
            - NUMERIC
            - NUMERIC_SINGLE
            - TEXT
          description: >-
            The type of the filter:

             - *MULTI* - multiple choice filter,
             - *SINGLE* - single select (dropdown) filter,
             - *NUMERIC* - range of numeric values (search offers with value matching this range),
             - *NUMERIC_SINGLE* - single numeric value (search offers with given value matching the range defined in offer),
             - *TEXT* - filter allowing user to input any text.
        name:
          type: string
          description: Name of the filter.
          example: kampania
        values:
          type: array
          description: Available filter values.
          items:
            $ref: '#/components/schemas/ListingResponseFiltersValues'
        minValue:
          type: number
          description: Minimum valid value for filters of type NUMERIC.
          example: 0
        maxValue:
          type: number
          description: Maximum valid value for filters of type NUMERIC.
          example: 1000
        unit:
          type: string
          description: Unit of the NUMERIC/NUMERIC_SINGLE filter.
          example: "zÅ‚"
    ListingResponseSearchMeta:
      properties:
        availableCount:
          type: integer
          description: >-
            The number of results available for navigation. If this number is less
            than total count, the search criteria (categories, filters, etc.) should
            be narrowed down to make all results available.
          example: 6000
        totalCount:
          type: integer
          description: The total number of search results with given parameters.
          example: 319203
        fallback:
          type: boolean
          description: >-
            Indicates whether the search fallback was used. If true, no items
            matching exact given phrase were found and related items are
            presented.
      description: Search metadata.
    ListingResponseSort:
      properties:
        value:
          type: string
          description: The query parameter value which should be used for this sorting option.
          example: -relevance
        name:
          type: string
          description: The sorting option name in Polish.
          example: trafnoÅ›Ä‡
        order:
          type: string
          description: The order label in Polish specifying ascending or descending mode.
          example: najwiÄ™ksza
        selected:
          type: boolean
          description: Indicates whether this sorting option was used in the current request.
      description: Available sort options.
    OfferAdditionalServices:
      type: object
      description: The definition of the additional services assigned to the offer.
      properties:
        id:
          type: string
          format: uuid
          description: The ID of the additional services definition.
          example: 09f0b4cc-7880-11e9-8f9e-2a86e4085a59
    OffersSearchResultDto:
      type: object
      properties:
        offers:
          type: array
          description: The list of seller's offers matching the request's criteria.
          items:
            $ref: '#/components/schemas/OfferListingDto'
        count:
          type: integer
          description: Number of offers in the search result.
          example: 1
        totalCount:
          type: integer
          description: The total number of offers matching the request's criteria.
          example: 1234
    OfferListingDto:
      type: object
      description: An offer.
      properties:
        id:
          type: string
          description: The offer ID.
          example: "2865624934"
        name:
          type: string
          description: The title of the offer.
          example: Buty damskie adidas
        category:
          $ref: '#/components/schemas/OfferCategory'
        primaryImage:
          $ref: '#/components/schemas/OfferListingDtoImage'
        sellingMode:
          $ref: '#/components/schemas/SellingMode'
        saleInfo:
          $ref: '#/components/schemas/OfferListingDtoV1SaleInfo'
        stock:
          $ref: '#/components/schemas/OfferListingDtoV1Stock'
        stats:
          $ref: '#/components/schemas/OfferListingDtoV1Stats'
        publication:
          $ref: '#/components/schemas/OfferListingDtoV1Publication'
        afterSalesServices:
          $ref: '#/components/schemas/AfterSalesServices'
        additionalServices:
          $ref: '#/components/schemas/OfferAdditionalServices'
        external:
          $ref: '#/components/schemas/ExternalId'
        delivery:
          $ref: '#/components/schemas/OfferListingDtoV1Delivery'
    OfferListingDtoImage:
      type: object
      description: The image used as a thumbnail on the listings.
      properties:
        url:
          type: string
          description: The url to the image in its original size.
          example: https://a.allegroimg.com/original/05a2af/929c6dae4fb8721a8539582eb421
    SellingMode:
      type: object
      description: Information on the offer's selling mode.
      properties:
        format:
          $ref: '#/components/schemas/SellingModeFormat'
        price:
          $ref: '#/components/schemas/BuyNowPrice'
        minimalPrice:
          $ref: '#/components/schemas/MinimalPrice'
        startingPrice:
          $ref: '#/components/schemas/StartingPrice'
    SellingModeWithNetPrice:
      type: object
      description: Information on the offer's selling mode.
      properties:
        format:
          $ref: '#/components/schemas/SellingModeFormat'
        price:
          $ref: '#/components/schemas/BuyNowPrice'
        minimalPrice:
          $ref: '#/components/schemas/MinimalPrice'
        startingPrice:
          $ref: '#/components/schemas/StartingPrice'
        netPrice:
          $ref: '#/components/schemas/NetPrice'
    BuyNowPrice:
      allOf:
        - $ref: '#/components/schemas/Price'
      description: The buy now or advertisement price (depending on the offer's format).
    MinimalPrice:
      allOf:
        - $ref: '#/components/schemas/Price'
      description: The minimal price for offers in auction format.
    StartingPrice:
      allOf:
        - $ref: '#/components/schemas/Price'
      description: The starting price for offers in auction format.
    NetPrice:
      allOf:
        - $ref: '#/components/schemas/Price'
      description: >-
        The buy now net price computed based on tax.
        Provided for informational purposes only - ignored when creating (POST) or updating (PUT).
    CurrentPrice:
      allOf:
        - $ref: '#/components/schemas/Price'
      description: The current highest bid in auction format.
    MaxPrice:
      allOf:
        - $ref: '#/components/schemas/Price'
      description: Maximum amount that user is willing to pay for the auction.
    SellingModeFormat:
      type: string
      description: The selling format of the offer.
      enum:
        - 'BUY_NOW'
        - 'AUCTION'
        - 'ADVERTISEMENT'
    Tax:
      type: object
      description: VAT tax rate.
      properties:
        percentage:
          type: string
          description: The buy now tax rate, Format 0.00.
          example: '23.00'
    OfferListingDtoV1Delivery:
      type: object
      description: Delivery information.
      properties:
        shippingRates:
          $ref: '#/components/schemas/ShippingRates'
    OfferListingDtoV1SaleInfo:
      type: object
      description: Additional information about offers in auction format.
      properties:
        currentPrice:
          $ref: '#/components/schemas/CurrentPrice'
        biddersCount:
          type: integer
          description: The number of bidders.
          example: 4
    OfferListingDtoV1Stock:
      type: object
      description: Information on the offer's stock.
      properties:
        available:
          type: integer
          description: The available stock value.
          example: 23
        sold:
          type: integer
          description: The number of sold items in the last 30 days.
          example: 3
    OfferListingDtoV1Stats:
      type: object
      description: The offer's statistics.
      properties:
        watchersCount:
          type: integer
          description: The number of users who added this offer to their watch lists.
          example: 99
        visitsCount:
          type: integer
          description: The number of unique users viewing this offer in the past 30 days.
    OfferListingDtoV1Publication:
      type: object
      description: Information on the offer's publication status and dates.
      properties:
        status:
          $ref: '#/components/schemas/OfferStatus'
        startingAt:
          type: string
          description: The date and time of activation in UTC for a planned listing.
          format: ISO 8601
          example: 2019-05-29T12:00:00Z
        startedAt:
          type: string
          format: ISO 8601
          description: The actual date and time of activation in UTC.
          example: 2019-05-29T12:00:00Z
        endingAt:
          type: string
          format: ISO 6801
          description: The date and time of a planned ending in UTC.
          example: 2019-06-30T12:00:00Z
        endedAt:
          type: string
          format: ISO 8601
          description: The actual date and time of last ending in UTC.
          example: 2019-06-30T12:10:00Z
    OfferStatus:
      type: string
      description: >-
        The publication status of the current offer. The possible values:

          - *INACTIVE* - a draft offer
          - *ACTIVATING* - the offer is planned for listing or is during the process of activation
          - *ACTIVE* - the offer is active
          - *ENDED* - the offer was active and is now ended (for whatever reason)
      enum:
        - 'INACTIVE'
        - 'ACTIVATING'
        - 'ACTIVE'
        - 'ENDED'
    OrderEventsList:
      type: object
      required:
        - events
      properties:
        events:
          type: array
          items:
            $ref: '#/components/schemas/OrderEvent'
      description: Order events list
    OrderEvent:
      type: object
      required:
        - id
        - order
        - type
        - occurredAt
      properties:
        id:
          type: string
          description: event id
        order:
          $ref: '#/components/schemas/OrderEventData'
        type:
          $ref: '#/components/schemas/OrderEventType'
        occurredAt:
          type: string
          format: date-time
          example: '2018-10-12T10:12:32.321Z'
          description: 'Date when the event occurred'
      description: Order event
    OrderEventData:
      type: object
      required:
        - buyer
        - lineItems
        - seller
      properties:
        seller:
          $ref: '#/components/schemas/SellerReference'
        buyer:
          $ref: '#/components/schemas/BuyerReference'
        lineItems:
          type: array
          items:
            $ref: '#/components/schemas/OrderLineItem'
        checkoutForm:
          $ref: '#/components/schemas/CheckoutFormReference'
      description: Order event data
    SellerReference:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          example: "437848322"
      description: Seller identifier
    OfferReference:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          example: "3213213"
        name:
          type: string
          description: 'Offer name'
          example: "Name of purchased offer"
        external:
          $ref: '#/components/schemas/ExternalId'
      description: Offer identifier
    BuyerReference:
      type: object
      required:
        - email
        - login
        - guest
        - id
      properties:
        id:
          type: string
          description: buyer id
          example: "23123123"
        email:
          type: string
          example: "user-email@allegro.pl"
        login:
          type: string
          example: "User_Login"
        guest:
          type: boolean
          description: is a guest account?
          example: false
      description: Buyer data
    OrderLineItem:
      type: object
      required:
        - offer
        - price
        - id
        - quantity
      properties:
        id:
          type: string
          format: uuid
          description: Order item identifier
          example: "62ae358b-8f65-4fc4-9c77-bedf604a2e2b"
        offer:
          $ref: '#/components/schemas/OfferReference'
        quantity:
          type: number
          format: integer
          description: quantity
          example: 1
        originalPrice:
          $ref: '#/components/schemas/Price'
        price:
          $ref: '#/components/schemas/Price'
        boughtAt:
          type: string
          format: date-time
          description: ISO date when offer was bought
          example: "2018-01-01T10:23:43.123Z"
      description: Order item
    OrderEventStats:
      type: object
      properties:
        latestEvent:
          $ref: '#/components/schemas/LatestOrderEvent'
      description: Event statistics, currently contains only basic information about the latest event.
    LatestOrderEvent:
      type: object
      required:
        - id
        - occurredAt
      properties:
        id:
          type: string
          description: event id
        occurredAt:
          type: string
          format: date-time
          example: '2018-10-12T10:12:32.321Z'
          description: 'Date when the event occurred'
      description: Basic information about the latest order event.
    CheckoutFormReference:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          example: "88ae369b-8f65-4fc4-9c77-bedf604a2e2b"
          description: Checkout form identifier
        revision:
          type: string
          example: "819b5836"
          description: Checkout form revision
    CheckoutFormStatus:
      enum:
        - BOUGHT
        - FILLED_IN
        - READY_FOR_PROCESSING
        - CANCELLED
      example: "READY_FOR_PROCESSING"
      description: >
        Describes status of the form delivery and purchase options based on payment and purchase status.
        * `BOUGHT` - purchase without checkout form filled in
        * `FILLED_IN` - checkout form filled in but payment is not completed yet so data could still change
        * `READY_FOR_PROCESSING` - payment completed. Purchase is ready for processing.
        * `CANCELLED` - purchase cancelled by buyer.
    OrderEventType:
      enum:
        - BOUGHT
        - FILLED_IN
        - READY_FOR_PROCESSING
        - BUYER_CANCELLED
        - FULFILLMENT_STATUS_CHANGED
      example: "READY_FOR_PROCESSING"
      description: >
        Type of order event.
        * `BOUGHT` - purchase without checkout form filled in
        * `FILLED_IN` - checkout form filled in but payment is not completed yet so data could still change
        * `READY_FOR_PROCESSING` - payment completed. Purchase is ready for processing.
        * `BUYER_CANCELLED` - purchase cancelled by buyer
        * `FULFILLMENT_STATUS_CHANGED`: fulfillment status changed.
    CheckoutForms:
      type: object
      required:
        - count
        - totalCount
        - checkoutForms
      properties:
        checkoutForms:
          type: array
          items:
            $ref: '#/components/schemas/CheckoutForm'
        count:
          type: number
          format: integer
          description: number of returned objects
          example: 1
        totalCount:
          type: number
          format: integer
          description: >
            Number of all objects of requested status(es) available (regardless of the provided limit and offset)
          example: 1
    CheckoutForm:
      type: object
      required:
        - id
        - buyer
        - status
        - lineItems
        - surcharges
        - discounts
        - summary
      properties:
        id:
          type: string
          format: uuid
          description: Checkout form id
          example: "29738e61-7f6a-11e8-ac45-09db60ede9d6"
        messageToSeller:
          type: string
          description: Message from buyer to seller
          example: "Please send me an item in red color"
        buyer:
          $ref: '#/components/schemas/CheckoutFormBuyerReference'
        payment:
          $ref: '#/components/schemas/CheckoutFormPaymentReference'
        status:
          $ref: '#/components/schemas/CheckoutFormStatus'
        fulfillment:
            $ref: '#/components/schemas/CheckoutFormFulfillment'
        delivery:
          $ref: '#/components/schemas/CheckoutFormDeliveryReference'
        invoice:
          $ref: '#/components/schemas/CheckoutFormInvoiceInfo'
        lineItems:
          type: array
          items:
            $ref: '#/components/schemas/CheckoutFormLineItem'
        surcharges:
          type: array
          items:
            $ref: '#/components/schemas/CheckoutFormPaymentReference'
        discounts:
          type: array
          items:
            $ref: '#/components/schemas/CheckoutFormDiscount'
        summary:
          $ref: '#/components/schemas/CheckoutFormSummary'
        updatedAt:
          type: string
          description: 'Provided in [ISO 8601 format](link: https://en.wikipedia.org/wiki/ISO_8601).'
          example: '2011-12-03T10:15:30.133Z'
        revision:
          type: string
          example: "819b5836"
          description: Checkout form revision
    CheckoutFormBuyerReference:
      type: object
      required:
        - id
        - email
        - login
        - guest
      properties:
        id:
          type: string
          description: buyer id
          example: "23123123"
        email:
          type: string
          example: "user-email@allegro.pl"
        login:
          type: string
          example: "User_Login"
        firstName:
          type: string
          description: Buyer's first name
          example: "Jan"
        lastName:
          type: string
          description: Buyer's last name
          example: "Kowalski"
        companyName:
          type: string
          description: Company name
          example: null
        guest:
          type: boolean
          description: is a guest account?
          example: false
        personalIdentity:
          type: string
          description: Buyer's personal identity number (PESEL)
          example: "67062589524"
        phoneNumber:
          type: string
          description: Phone number
          example: null
        address:
          $ref: '#/components/schemas/CheckoutFormBuyerAddressReference'
      description: Buyer data
    CheckoutFormBuyerAddressReference:
      type: object
      properties:
        street:
          type: string
          description: Street
          example: "Solna"
        city:
          type: string
          description: City name
          example: "PoznaÅ„"
        postCode:
          type: string
          description: Postal code
          example: "60-166"
        countryCode:
          type: string
          description: Country code
          example: "PL"
      description: Buyer address
    CheckoutFormPaymentReference:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
          format: uuid
          description: Payment id
          example: "0f8f1d13-7e9e-11e8-9b00-c5b0dfb78ea6"
        type:
          $ref: '#/components/schemas/CheckoutFormPaymentType'
        provider:
          $ref: '#/components/schemas/CheckoutFormPaymentProvider'
        finishedAt:
          type: string
          format: date-time
          example: '2018-10-12T10:12:32.321Z'
          description: 'Date when the event occurred'
        paidAmount:
          $ref: '#/components/schemas/Price'
    CheckoutFormPaymentType:
      description: Payment type
      type: string
      enum:
        - CASH_ON_DELIVERY
        - WIRE_TRANSFER
        - ONLINE
        - SPLIT_PAYMENT
    CheckoutFormPaymentProvider:
      description: Payment provider
      type: string
      enum:
        - P24
        - PAYU
        - OFFLINE
    CheckoutFormFulfillment:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/CheckoutFormFulfillmentStatus'
        shipmentSummary:
          $ref: '#/components/schemas/CheckoutFormFulfillmentShipmentSummary'
    CheckoutFormFulfillmentStatus:
      enum:
        - NEW
        - PROCESSING
        - READY_FOR_SHIPMENT
        - SENT
        - CANCELLED
      example: "SENT"
      description: >
        Order seller status.
    CheckoutFormFulfillmentShipmentSummary:
      type: object
      properties:
        lineItemsSent:
          $ref: '#/components/schemas/CheckoutFormFulfillmentShipmentSummaryLineItemsSent'
    CheckoutFormFulfillmentShipmentSummaryLineItemsSent:
      enum:
        - NONE
        - SOME
        - ALL
      example: "SOME"
      description: >
        Indicates how many line items have tracking number specified.
    CheckoutFormDeliveryReference:
      type: object
      properties:
        address:
          $ref: '#/components/schemas/CheckoutFormDeliveryAddress'
        method:
          $ref: '#/components/schemas/CheckoutFormDeliveryMethod'
        pickupPoint:
          $ref: '#/components/schemas/CheckoutFormDeliveryPickupPoint'
        cost:
          $ref: '#/components/schemas/Price'
        time:
          $ref: '#/components/schemas/CheckoutFormDeliveryTime'
        smart:
          type: boolean
          description: Buyer used a SMART option
          example: true
        calculatedNumberOfPackages:
          type: integer
          format: int32
          description: Calculated number of packages.
          example: 1
    CheckoutFormDeliveryAddress:
      type: object
      required:
        - firstName
        - lastName
        - street
        - city
        - zipCode
        - countryCode
      properties:
        firstName:
          type: string
          description: Receiver's first name
          example: "Jan"
        lastName:
          type: string
          description: Receiver's last name
          example: "Kowalski"
        street:
          type: string
          description: Street name
          example: "Grunwaldzka 182"
        city:
          type: string
          description: City name
          example: "PoznaÅ„"
        zipCode:
          type: string
          description: Postal code
          example: "60-166"
        countryCode:
          type: string
          description: Country code
          example: "PL"
        companyName:
          type: string
          description: Company name
          example: null
        phoneNumber:
          type: string
          description: Phone number
          example: null
    CheckoutFormDeliveryMethod:
      type: object
      properties:
        id:
          type: string
          description: Delivery method id
          example: "1fa56f79-4b6a-4821-a6f2-ca9c16d5c925"
        name:
          type: string
          description: Delivery method name
          example: "Allegro Paczkomaty InPost"
    CheckoutFormDeliveryPickupPoint:
      type: object
      properties:
        id:
          type: string
          description: Delivery point id
          example: "POZ08A"
        name:
          type: string
          description: Delivery point name
          example: "Paczkomat POZ08A"
        description:
          type: string
          description: Delivery point description
          example: "Stacja paliw BP"
        address:
          $ref: '#/components/schemas/CheckoutFormDeliveryPickupPointAddress'
    CheckoutFormDeliveryPickupPointAddress:
      type: object
      properties:
        street:
          type: string
          description: Delivery point street name
          example: "Grunwaldzka 108"
        zipCode:
          type: string
          description: Delivery point postal code
          example: "60-166"
        city:
          type: string
          description: City name
          example: "PoznaÅ„"
    CheckoutFormDeliveryTime:
      type: object
      properties:
        guaranteed:
          $ref: '#/components/schemas/CheckoutFormDeliveryTimeGuaranteed'
    CheckoutFormDeliveryTimeGuaranteed:
      type: object
      description: Guaranteed date when first delivery attempt takes place. This is always filled for X-press Couriers delivery method.
      properties:
        from:
          type: string
          format: date-time
          description: ISO date when the earliest delivery attempt can take place.
          example: "2018-01-01T16:00:00Z"
        to:
          type: string
          format: date-time
          description: ISO date when the latest delivery attempt can take place.
          example: "2018-01-01T18:00:00Z"
    CheckoutFormInvoiceInfo:
      type: object
      required:
        - required
      properties:
        required:
          type: boolean
          description: Is invoice required by buyer?
          example: true
        address:
          $ref: '#/components/schemas/CheckoutFormInvoiceAddress'
    CheckoutFormInvoiceAddress:
      type: object
      required:
        - street
        - city
        - zipCode
        - countryCode
      properties:
        street:
          type: string
          description: Street name
          example: "Grunwaldzka 182"
        city:
          type: string
          description: City name
          example: "PoznaÅ„"
        zipCode:
          type: string
          description: Postal code
          example: "60-166"
        countryCode:
          type: string
          description: Country code
          example: "PL"
        company:
          $ref: '#/components/schemas/CheckoutFormInvoiceAddressCompany'
        naturalPerson:
          $ref: '#/components/schemas/CheckoutFormInvoiceAddressNaturalPerson'
    CheckoutFormInvoiceAddressCompany:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Name of a company for which invoice should be issued
          example: "Udix Sp. z o.o."
        taxId:
          type: string
          description: Tax id
          example: null
    CheckoutFormInvoiceAddressNaturalPerson:
      type: object
      required:
        - firstName
        - lastName
      properties:
        firstName:
          type: string
          description: Invoice receiver first name
          example: "Jan"
        lastName:
          type: string
          description: Invoice receiver last name
          example: "Kowalski"
    CheckoutFormLineItem:
      type: object
      required:
        - id
        - offer
        - quantity
        - originalPrice
        - price
      properties:
        id:
          type: string
          format: uuid
          description: Line item identifier
          example: "62ae358b-8f65-4fc4-9c77-bedf604a2e2b"
        offer:
          $ref: '#/components/schemas/OfferReference'
        quantity:
          type: number
          format: integer
          description: quantity
          example: 1
        originalPrice:
          $ref: '#/components/schemas/Price'
        price:
          $ref: '#/components/schemas/Price'
        selectedAdditionalServices:
          type: array
          items:
            $ref: '#/components/schemas/CheckoutFormAdditionalService'
        boughtAt:
          type: string
          format: date-time
          description: ISO date when offer was bought
          example: "2018-01-01T10:23:43.123Z"
      description: Order item
    CheckoutFormAdditionalService:
      type: object
      properties:
        definitionId:
          type: string
          description: Additional service id
          example: "CARRY_IN"
        name:
          type: string
          description: Additional service name
          example: "Wniesienie"
        price:
          $ref: '#/components/schemas/Price'
        quantity:
          type: integer
          format: int32
          description: Quantity of an additional service
          example: 1
    CheckoutFormDiscount:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - COUPON
            - BUNDLE
            - MULTIPACK
            - CROSSMULTIPACK
          description: >
            Describes type of discount used in checkout form. The types of discounts can be as follows:
            * `COUPON` - coupon was used during payment
            * `BUNDLE` - some of the line items were bought as a bundle
            * `MULTIPACK` - at least one line item was bought with multipack option
            * `CROSSMULTIPACK` - some of line items each from different offers were bought together as multipack
    CheckoutFormSummary:
      type: object
      required:
        - totalToPay
      properties:
        totalToPay:
          allOf:
            - $ref: '#/components/schemas/Price'
            - type: object
              description: Total to pay including additional services and delivery
    DisputeListResponse:
      type: object
      properties:
        disputes:
          type: array
          items:
            $ref: '#/components/schemas/Dispute'
    Dispute:
      type: object
      properties:
        id:
          type: string
          description: Identifier of the dispute
        subject:
          $ref: '#/components/schemas/Subject'
        status:
          type: string
          enum:
            - CLOSED
            - ONGOING
            - UNRESOLVED
        buyer:
          $ref: '#/components/schemas/DisputeUser'
        seller:
          $ref: '#/components/schemas/DisputeUser'
        checkoutForm:
          $ref: '#/components/schemas/DisputeCheckoutForm'
        message:
          $ref: '#/components/schemas/DisputeFirstMessage'
        messagesCount:
          type: integer
          format: int32
      required:
        - id
        - subject
        - status
        - buyer
        - seller
        - checkoutForm
        - message
        - messagesCount
    Subject:
      type: object
      description: Subject of the dispute
      properties:
        name:
          type: string
          description: Subject name
          example: "nie otrzymaÅ‚em towaru po wpÅ‚acie"
    DisputeUser:
      type: object
      properties:
        id:
          type: string
        login:
          type: string
    DisputeMessageList:
      type: object
      properties:
        messages:
          type: array
          items:
            $ref: '#/components/schemas/DisputeMessage'
    DisputeFirstMessage:
      type: object
      description: Initial dispute message with text OR attachment OR both
      properties:
        id:
          type: string
        text:
          type: string
        attachment:
          $ref: '#/components/schemas/DisputeAttachment'
        author:
          $ref: '#/components/schemas/DisputeAuthor'
        createdAt:
          type: string
          format: date-time
          example: "2018-02-10T12:12:12Z"
      required:
        - id
        - author
        - createdAt
    DisputeMessage:
      type: object
      description: Initial dispute message with text OR attachment OR both
      properties:
        id:
          type: string
        text:
          type: string
        attachment:
          $ref: '#/components/schemas/DisputeAttachment'
        author:
          $ref: '#/components/schemas/DisputeMessageAuthor'
        createdAt:
          type: string
          format: date-time
          example: "2018-02-10T12:12:12Z"
      required:
        - id
        - author
        - createdAt
    DisputeMessageAuthor:
      type: object
      description: Author of the message
      properties:
        login:
          type: string
          description: Not present if role is ADMIN or SYSTEM
        role:
          $ref: '#/components/schemas/MessageAuthorRole'
      required:
        - role
    DisputeAttachment:
      type: object
      properties:
        fileName:
          type: string
          maxLength: 255
        url:
          type: string
          description: Direct link to the attachment
          example: "https://upload.allegro.pl/sale/dispute-attachments/eeed0007-4404-4176-a1eb-11d26f056c0d"
      required:
        - fileName
        - url
    DisputeAttachmentId:
      type: object
      properties:
        id:
          type: string
      required:
        - id
    AttachmentDeclaration:
      type: object
      properties:
        fileName:
          type: string
        size:
          type: integer
      required:
        - fileName
        - size
    DisputeCheckoutForm:
      type: object
      properties:
        id:
          type: string
        createdAt:
          type: string
          format: date-time
          example: "2018-02-10T12:12:12Z"
      required:
        - id
        - createdAt
    DisputeAuthor:
      type: object
      properties:
        login:
          type: string
          description: Not present if role is ADMIN
        role:
          $ref: '#/components/schemas/DisputeAuthorRole'
      required:
        - role
    DisputeAuthorRole:
      type: string
      enum:
        - BUYER
        - ADMIN
    MessageAuthorRole:
      type: string
      enum:
        - BUYER
        - SELLER
        - ADMIN
        - SYSTEM
    MessageRequest:
      type: object
      description: "Request body to add message to the dispute. Presence of text or attachment fields or both is required."
      properties:
        text:
          type: string
          maxLength: 20000
        attachment:
          $ref: '#/components/schemas/DisputeAttachmentId'
        type:
          type: string
          enum:
            - REGULAR
            - END_REQUEST
      required:
        - text
        - attachment
        - type
    TagRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 25
        hidden:
          type: boolean
    TagId:
      type: object
      required:
        - id
      properties:
        id:
          type: string
    TagResponse:
      type: object
      required:
        - id
        - name
        - hidden
      properties:
        id:
          type: string
        name:
          type: string
        hidden:
          type: boolean
    TagListResponse:
      type: object
      required:
        - tags
      properties:
        tags:
          type: array
          items:
            $ref: '#/components/schemas/TagResponse'
    TagIdsRequest:
      type: object
      required:
        - tags
      properties:
        tags:
          type: array
          items:
            $ref: '#/components/schemas/TagId'
    LineItemIdMappings:
      type: object
      properties:
        mappings:
          type: array
          items:
            type: object
            properties:
              dealId:
                type: string
                description: WebAPI deal id
                example: "12345678"
              lineItemId:
                type: string
                format: uuid
                description: Order API line item id
                example: "4e9d1d43-0da5-466e-9c4a-679625b7a617"
            required:
              - dealId
              - lineItemId
    PromotionResponseDto:
      type: object
      required:
        - id
      properties:
        id:
          type: string
    CampaignResponseDto:
      type: object
      required:
        - id
      properties:
        id:
          type: string
    SinglePromotionCampaignResponseDto:
      type: object
      required:
        - campaign
        - promotion
        - status
      properties:
        campaign:
          $ref: '#/components/schemas/CampaignResponseDto'
        promotion:
          $ref: '#/components/schemas/PromotionResponseDto'
        status:
          type: string
          enum:
            - PENDING
            - ACTIVE
            - SUSPENDED
    PromotionCampaignsResponseDto:
      type: object
      required:
        - promotionCampaigns
        - totalCount
      properties:
        promotionCampaigns:
          type: array
          items:
            $ref: '#/components/schemas/SinglePromotionCampaignResponseDto'
        totalCount:
          type: integer
          format: int64
    PromotionCampaignResponseDto:
      type: object
      required:
        - campaign
        - link
        - promotion
        - status
      properties:
        campaign:
          $ref: '#/components/schemas/CampaignResponseDto'
        link:
          type: string
        promotion:
          $ref: '#/components/schemas/PromotionResponseDto'
        status:
          type: string
          enum:
            - REQUESTED
            - SUSPENDED
            - VERIFICATION
            - ACCEPTED
            - ACTIVE
            - FINISHED
            - DECLINED
    CampaignRequestDto:
      type: object
      required:
        - id
      properties:
        id:
          type: string
    PromotionRequestDto:
      type: object
      required:
        - id
      properties:
        id:
          type: string
    PromotionCampaignRequestDto:
      type: object
      required:
        - campaign
        - promotion
      properties:
        promotion:
          $ref: '#/components/schemas/PromotionRequestDto'
        campaign:
          $ref: '#/components/schemas/CampaignRequestDto'
    CheckoutFormAddWaybillRequest:
      type: object
      required:
        - carrierId
        - waybill
        - lineItems
        - lineItem.id
      properties:
        carrierId:
          type: string
          description: >-
            Supported carriers are available via <a href="#operation/getOrdersCarriersUsingGET" target="_blank">shipping carriers resource</a>.
        waybill:
          type: string
          description: >-
            Waybill number (parcel tracking number).
            Cannot be empty and must be no longer than 64 characters. It can contain any word
            character (equal to [a-zA-Z0-9_]) and special characters: parentheses and hyphen-minus.
          maxLength: 64
        carrierName:
          type: string
          maxLength: 30
          description: >-
            Carrier name to be provided only if carrierId is OTHER, otherwise itâ€™s ignored.
            Must be no longer than 30 characters.
        lineItems:
          type: array
          description: >-
            List of order line items. They must be from the order specified in the path parameter. List cannot be empty.
          items:
            properties:
              id:
                type: string
                description: >-
                  Identifier of an order line item.
    OrdersShippingCarrier:
      type: object
      properties:
        id:
          type: string
          description: >-
            Identifier of a carrier - unique to every carrier.


            Itâ€™s highly recommended to use an identifier different from `OTHER`, because its parcel status may be updated automatically.
            Carrier identifier `OTHER` is reserved for cases when seller uses a custom carrier or not yet integrated with Allegro.
        name:
          type: string
          description: Name of a carrier.
    CheckoutFormAddWaybillCreated:
      type: object
      properties:
        id:
          type: string
          description: Identifier of a shipment.
        waybill:
          type: string
          description: >-
            Waybill number (parcel tracking number).
            Cannot be empty and must be no longer than 64 characters. It can contain any word
            character (equal to [a-zA-Z0-9_]) and special characters: parentheses and hyphen-minus.
        carrierId:
          type: string
          description: >-
            Supported carriers are available via <a href="#operation/getOrdersCarriersUsingGET" target="_blank">shipping carriers resource</a>.
        carrierName:
          type: string
          description: >-
            Carrier name to be provided only if carrierId is OTHER, otherwise itâ€™s ignored.
            Must be no longer than 30 characters.
        lineItems:
          description: >-
            List of order line items. They must be from the order specified in the path parameter. List cannot be empty.
          items:
            properties:
              id:
                type: string
                description: Identifier of an order line item.
        createdAt:
          type:
            string
          description: Date and time of the parcel tracking number registration in UTC (ISO8601 format).
    OrdersShippingCarriersResponse:
      type: object
      properties:
        carriers:
          type: array
          description: >-
            List of shipping carriers.
          items:
            $ref: '#/components/schemas/OrdersShippingCarrier'
    CheckoutFormOrderWaybillResponse:
      type: object
      properties:
        shipments:
          type: array
          description: >-
            List of parcel tracking numbers currently assigned to the order.
          items:
            $ref: '#/components/schemas/CheckoutFormAddWaybillCreated'
    GetSaleProductsResponse:
      type: object
      required:
        - products
      properties:
        products:
          type: array
          items:
            $ref: '#/components/schemas/BaseSaleProductResponseDto'
        categories:
          $ref: '#/components/schemas/SaleProductResponseCategoriesDto'
        filters:
          type: array
          items:
            $ref: '#/components/schemas/ListingResponseFilters'
        nextPage:
          type: object
          properties:
            id:
              type: string
              description: A "cursor" to the next set of results.
    ProposeSaleProductRequest:
      type: object
      required:
        - name
        - category
        - parameters
        - images
      properties:
        name:
          type: string
          description: Suggested product name.
          example: iPhone 5s
          maxLength: 50
        category:
          $ref: '#/components/schemas/Category'
        eans:
          type: array
          description: A list of codes that identify this product. Currently this can include EAN, ISBN, and UPC identifier types.
          items:
            type: string
          example:
            - "0019062113399"
            - "0000007905193"
        images:
          type: array
          items:
            $ref: '#/components/schemas/ImageUrl'
          description: List of product images. At least one image is required.
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/ProductParameter'
          description: List of product parameters.
        description:
          $ref: '#/components/schemas/StandardizedDescription'
    SaleProductDto:
      type: object
      required:
        - id
        - name
        - category
      properties:
        id:
          type: string
          example: c9e39cae-9cb6-11e9-a2a3-2a2ae2dbcce4
          description: Product id.
        name:
          type: string
          description: Product name.
          example: iPhone 5s
        category:
          $ref: '#/components/schemas/Category'
        eans:
          type: array
          description: A list of codes that identify this product. Currently this can include EAN, ISBN, and UPC identifier types.
          items:
            type: string
          example:
            - "0019062113399"
            - "0000007905193"
        images:
          type: array
          items:
            $ref: '#/components/schemas/ImageUrl'
          description: List of product images.
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/ProductParameterDto'
          description: List of product parameters.
        offerRequirements:
          $ref: '#/components/schemas/OfferRequirements'
        compatibilityList:
          $ref: '#/components/schemas/SaleProductCompatibilityList'
        tecdocSpecification:
          $ref: '#/components/schemas/TecdocSpecification'
        description:
          $ref: '#/components/schemas/StandardizedDescription'
    SaleProductResponseDto:
      allOf:
        - $ref: '#/components/schemas/BaseSaleProductResponseDto'
        - type: object
          properties:
            eans:
              type: array
              description: A list of codes that identify this product. Currently this can include EAN, ISBN, and UPC identifier types.
              items:
                type: string
    BaseSaleProductResponseDto:
      type: object
      required:
        - id
        - name
        - category
      properties:
        id:
          type: string
        name:
          type: string
          description: Name of the product.
          maxLength: 50
        category:
          $ref: '#/components/schemas/Category'
        images:
          type: array
          items:
            $ref: '#/components/schemas/ImageUrl'
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/ProductParameterDto'
    SaleProductCompatibilityList:
      type: object
      required:
      - id
      - type
      description: "Compatibility list assigned to this product, based on information from TecDoc database."
      properties:
        id:
          type: string
          description: 'Id of product-based compatibility list.'
          example: '460b2511-b786-47b9-9d7e-1f868728cfd6-f103931434fbf4aa06764f3df74d371df23aa138a9cd46dbe570f51af79db1c4-2'
        type:
          type: string
          description: 'Type of compatibility list.'
          default: "PRODUCT_BASED"
        items:
          type: array
          items:
            $ref: '#/components/schemas/CompatibilityListItemProductBased'
          description: "List of the compatible items."
    SaleProductResponseCategoriesDto:
      properties:
        subcategories:
          type: array
          description: A list of categories that contain results for given search parameters.
          items:
            $ref: '#/components/schemas/ProductsCategorySubcategories'
        path:
          type: array
          description: The path of current category used as categrory filter in search.
          items:
            $ref: '#/components/schemas/ProductsCategoryPath'
    ProductsCategorySubcategories:
      type: object
      properties:
        id:
          type: string
          description: Category id.
        name:
          type: string
          description: Category name.
        count:
          type: integer
          description: Total number of products matching query criteria in this category.
          format: int32
    ProductsCategoryPath:
      type: object
      properties:
        id:
          type: string
          description: Category id.
        name:
          type: string
          description: Category name.
    ProductParameter:
      type: object
      required:
        - id
      properties:
        id:
          type: string
        rangeValue:
           $ref: '#/components/schemas/ParameterRangeValue'
        values:
          type: array
          items:
            type: string
        valuesIds:
          type: array
          items:
            type: string
        valuesLabels:
          type: array
          items:
            type: string
        unit:
          type: string
        options:
          type: object
          properties:
            identifiesProduct:
              type: boolean
      description: Product's parameter
    ProductParameterDto:
      type: object
      required:
        - id
      properties:
        id:
          type: string
        name:
          type: string
        rangeValue:
          $ref: '#/components/schemas/ParameterRangeValue'
        values:
          type: array
          items:
            type: string
        valuesIds:
          type: array
          items:
            type: string
        valuesLabels:
          type: array
          items:
            type: string
        unit:
          type: string
        options:
          type: object
          properties:
            identifiesProduct:
              type: boolean
      description: Product's parameter
    SaleProductOffer:
      type: object
      required:
        - stock
      properties:
        payments:
          $ref: '#/components/schemas/Payments'
        sellingMode:
          $ref: '#/components/schemas/SellingMode'
        stock:
          $ref: '#/components/schemas/Stock'
        location:
          $ref: '#/components/schemas/Location'
        publication:
          $ref: '#/components/schemas/Publication'
        images:
          type: array
          items:
            type: string
        description:
          $ref: '#/components/schemas/StandardizedDescription'
        name:
          type: string
          description: Name of the offer. Words used in the name field cannot be longer than 50 characters.
          maxLength: 50
        external:
          $ref: '#/components/schemas/ExternalId'
      description: Single offer data.
    SaleProductOfferRequest:
      allOf:
        - $ref: '#/components/schemas/SaleProductOffer'
        - type: object
          properties:
            product:
              $ref: '#/components/schemas/ProductOffer'
            afterSalesServices:
              $ref: '#/components/schemas/AfterSalesServicesProductOfferRequest'
            delivery:
              $ref: '#/components/schemas/DeliveryProductOfferRequest'
            parameters:
              type: array
              items:
                $ref: '#/components/schemas/ParameterProductOfferRequest'
    SaleProductOfferResponse:
      allOf:
        - $ref: '#/components/schemas/SaleProductOffer'
        - type: object
          properties:
            id:
              type: string
            product:
              $ref: '#/components/schemas/ProductOfferResponse'
            afterSalesServices:
              $ref: '#/components/schemas/AfterSalesServices'
            delivery:
              type: object
              properties:
                handlingTime:
                  type: string
                  example: PDT12H30M5S
                  description: 'Handling time, ISO 8601 duration format'
                shippingRates:
                  $ref: '#/components/schemas/JustId'
            validation:
              $ref: '#/components/schemas/Validation'
            createdAt:
              type: string
              format: date-time
              description: >-
                Creation date: Format (ISO 8601) - yyyy-MM-dd'T'HH:mm:ss.SSSZ.
                Cannot be modified.
            updatedAt:
              type: string
              format: date-time
              description: >-
                Last update date: Format (ISO 8601) - yyyy-MM-dd'T'HH:mm:ss.SSSZ.
                Cannot be modified.
    ProductOffer:
      type: object
      properties:
        id:
          type: string
          example: c9e39cae-9cb6-11e9-a2a3-2a2ae2dbcce4
          description: Product id.
        name:
          type: string
          description: Product name.
          example: iPhone 5s
        category:
          $ref: '#/components/schemas/Category'
        images:
          type: array
          items:
            type: string
          description: List of product images.
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/ParameterProductOfferRequest'
          description: List of product parameters.
    ProductOfferResponse:
      type: object
      properties:
        id:
          type: string
          example: c9e39cae-9cb6-11e9-a2a3-2a2ae2dbcce4
          description: Product id.
        publication:
          type: object
          properties:
            status:
              type: string
              enum:
                - PROPOSED
                - LISTED
                - NOT_LISTED
              description: >-
                The publication status of the submitted product:
                 - `PROPOSED` - we created new product proposal and assigned it to an offer
                 - `LISTED` - we identified the product in our database and assigned it to an offer
                 - `NOT_LISTED` - we didnâ€™t create a new product proposal and didnâ€™t assign any product from our database to an offer
    AfterSalesServicesProductOfferRequest:
      type: object
      description: The definitions of the different after sales services assigned to the offer.
      properties:
        impliedWarranty:
          allOf:
            - $ref: '#/components/schemas/ImpliedWarranty'
            - type: object
              properties:
                name:
                  type: string
                  description: The name of the implied warranty definition.
        returnPolicy:
          allOf:
            - $ref: '#/components/schemas/ReturnPolicy'
            - type: object
              properties:
                name:
                  type: string
                  description: The name of the return policy definition.
        warranty:
          allOf:
            - $ref: '#/components/schemas/Warranty'
            - type: object
              properties:
                name:
                  type: string
                  description: The name of the warranty definition.
    DeliveryProductOfferRequest:
      type: object
      properties:
        handlingTime:
          type: string
          example: PDT12H30M5S
          description: 'Handling time, ISO 8601 duration format.'
        shippingRates:
          allOf:
            - $ref: '#/components/schemas/JustId'
            - type: object
              properties:
                name:
                  type: string
                  description: The name of the shipping rate.
        additionalInfo:
          type: string
          maxLength: 650
          description: "Additional information about delivery."
    ParameterProductOfferRequest:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
          description: The name of the parameter.
        rangeValue:
          $ref: '#/components/schemas/ParameterRangeValue'
        values:
          type: array
          items:
            type: string
        valuesIds:
          type: array
          items:
            type: string
      description: Offer's parameter.
    OfferRequirements:
      description: 'Conditions which an offer must meet to be assigned with the product, i.e. Condition parameter must be set to New.'
      properties:
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/ProductParameter'
    AdditionalEmailsResponse:
      type: object
      required:
        - additional-emails
      properties:
        additional-emails:
          type: array
          items:
            $ref: '#/components/schemas/AdditionalEmail'
    AdditionalEmail:
      type: object
      description: Details of a single additional email address.
      required:
        - id
        - email
        - createdAt
      properties:
        id:
          type: string
        email:
          type: string
        createdAt:
          type: string
    AdditionalEmailRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          description: >-
            A valid email address you want to add to your account. Maximum length of the part before the `@` sign is
            64 characters.
    ClassifiedPackages:
      type: object
      required:
      - basePackage
      properties:
        basePackage:
          $ref: '#/components/schemas/ClassifiedPackage'
        extraPackages:
          type: array
          items:
            $ref: '#/components/schemas/ClassifiedPackage'
    ClassifiedResponse:
      type: object
      required:
      - basePackage
      - extraPackages
      properties:
        basePackage:
          $ref: '#/components/schemas/ClassifiedPackage'
        extraPackages:
          type: array
          items:
            $ref: '#/components/schemas/ClassifiedPackage'
      title: ClassifiedResponse
    ClassifiedExtension:
      type: object
      properties:
        description:
          type: string
          description: 'The classified extension description.'
          example: 'Autocentrum.pl'
        name:
          type: string
          description: 'The classified extension name.'
          example: 'autocentrumExport'
      title: ClassifiedExtension
    ClassifiedPackageConfig:
      type: object
      required:
      - id
      - name
      - type
      properties:
        extensions:
          type: array
          items:
            $ref: '#/components/schemas/ClassifiedExtension'
        id:
          type: string
          description: 'The classifieds package ID.'
          example: '6174be19-56f9-484b-b72c-43b0b00785e8'
        name:
          type: string
          description: 'The classifieds package name.'
          example: 'Power'
        promotions:
          type: array
          description: 'A list of additional promotions included in the package.'
          items:
            $ref: '#/components/schemas/ClassifiedPromotion'
        publication:
          $ref: '#/components/schemas/ClassifiedPublication'
        type:
          type: string
          enum:
          - BASE
          - EXTRA
      title: ClassifiedPackageConfig
    ClassifiedPackageConfigs:
      type: object
      required:
      - packages
      properties:
        packages:
          type: array
          items:
            $ref: '#/components/schemas/ClassifiedPackageConfig'
      title: ClassifiedPackageConfigs
    ClassifiedPromotion:
      type: object
      required:
      - duration
      - name
      properties:
        duration:
          type: string
          description: 'Duration in ISO 8601 format.'
          example: 'PT240H'
        name:
          type: string
          description: 'Name of the promotion.'
          example: 'emphasized'
      title: ClassifiedPromotion
    ClassifiedPublication:
      type: object
      required:
      - duration
      properties:
        duration:
          type: string
          description: 'Duration in ISO 8601 format.'
          example: 'PT240H'
      title: ClassifiedPublication
    PaymentOperations:
      type: object
      required:
        - count
        - totalCount
        - paymentOperations
      properties:
        paymentOperations:
          type: array
          description: Collection of payment operations.
          items:
            $ref: '#/components/schemas/BaseOperation'
        count:
          type: integer
          format: int32
          description: Number of payment operations returned in search result for the given parameters.
          example: 50
        totalCount:
          type: integer
          format: int32
          description: Total number of payment operations for the given parameters.
          example: 123
    BaseOperation:
      type: object
      required:
        - type
        - group
        - occurredAt
        - wallet
        - value
      properties:
        type:
          type: string
          description: Type of the operation.
        group:
          type: string
          description: The group to which the given operation type belongs.
          enum:
            - "INCOME"
            - "OUTCOME"
            - "REFUND"
        wallet:
          $ref: '#/components/schemas/Wallet'
        value:
          $ref: '#/components/schemas/OperationValue'
        occurredAt:
          type: string
          format: date-time
          description: Date and time of the operation in ISO 8601 format.
          example: "2019-05-08T09:45:00.818Z"
      discriminator:
        propertyName: type
        mapping:
          CORRECTION: '#/components/schemas/CorrectionOperation'
          CONTRIBUTION: '#/components/schemas/ContributionOperation'
          PAYOUT: '#/components/schemas/PayoutOperation'
          PAYOUT_CANCEL: '#/components/schemas/PayoutOperationCancel'
          REFUND_INCREASE: '#/components/schemas/RefundIncreaseOperation'
          REFUND_CHARGE: '#/components/schemas/RefundChargeOperation'
          REFUND_CANCEL: '#/components/schemas/RefundCancelOperation'
          SURCHARGE: '#/components/schemas/SurchargeOperation'
          DEDUCTION_CHARGE: '#/components/schemas/DeductionChargeOperation'
          DEDUCTION_INCREASE: '#/components/schemas/DeductionIncreaseOperation'
    Wallet:
      type: object
      description: The state of the wallet after the operation.
      required:
        - paymentOperator
        - type
        - balance
      properties:
        paymentOperator:
          type: string
          description: The payment operator.
          enum:
            - PAYU
            - P24
        type:
          type: string
          description: The type of the wallet.
          enum:
            - AVAILABLE
            - WAITING
        balance:
          $ref: '#/components/schemas/WalletBalance'
    WalletBalance:
      title: MonetaryAmount
      allOf:
        - $ref: '#/components/schemas/Price'
        - type: object
      description: The wallet balance after the operation.
    OperationValue:
      title: MonetaryAmount
      allOf:
        - $ref: '#/components/schemas/Price'
        - type: object
      description: The operation value.
    RefundDeliveryValue:
      title: MonetaryAmount
      allOf:
        - $ref: '#/components/schemas/Price'
        - type: object
      description: Delivery amount for payment refund.
    RefundOverpaidValue:
      title: MonetaryAmount
      allOf:
        - $ref: '#/components/schemas/Price'
        - type: object
      description: Overpaid amount for payment refund.
    RefundAdditionalServicesValue:
      title: MonetaryAmount
      allOf:
        - $ref: '#/components/schemas/Price'
        - type: object
      description: Additional services amount for payment refund.
    RefundSurchargeValue:
      title: MonetaryAmount
      allOf:
        - $ref: '#/components/schemas/Price'
        - type: object
      description: Surcharge refund amount.
    RefundTotalValue:
      title: MonetaryAmount
      allOf:
        - $ref: '#/components/schemas/Price'
        - type: object
      description: Total amount for payment refund.
    CorrectionOperation:
      allOf:
        - $ref: '#/components/schemas/BaseOperation'
        - type: object
          properties:
            type:
              type: string
              default: 'CORRECTION'
    ContributionOperation:
      required:
        - payment
        - participant
      allOf:
        - $ref: '#/components/schemas/BaseOperation'
        - type: object
          properties:
            type:
              type: string
              default: 'CONTRIBUTION'
            payment:
              $ref: '#/components/schemas/OperationPayment'
            participant:
              $ref: '#/components/schemas/BuyerParticipant'
    PayoutOperation:
      required:
        - payout
      allOf:
        - $ref: '#/components/schemas/BaseOperation'
        - type: object
          properties:
            type:
              type: string
              default: 'PAYOUT'
            payout:
              $ref: '#/components/schemas/Payout'
    PayoutOperationCancel:
      required:
        - payout
      allOf:
        - $ref: '#/components/schemas/BaseOperation'
        - type: object
          properties:
            type:
              type: string
              default: 'PAYOUT_CANCEL'
            payout:
              $ref: '#/components/schemas/Payout'
    RefundIncreaseOperation:
      required:
        - payment
        - participant
      allOf:
        - $ref: '#/components/schemas/BaseOperation'
        - type: object
          properties:
            type:
              type: string
              default: 'REFUND_INCREASE'
            payment:
              $ref: '#/components/schemas/OperationPayment'
            participant:
              $ref: '#/components/schemas/SellerParticipant'
    RefundCancelOperation:
      required:
        - payment
      allOf:
        - $ref: '#/components/schemas/BaseOperation'
        - type: object
          properties:
            type:
              type: string
              default: 'REFUND_CANCEL'
            payment:
              $ref: '#/components/schemas/OperationPayment'
    RefundChargeOperation:
      required:
        - payment
        - participant
      allOf:
        - $ref: '#/components/schemas/BaseOperation'
        - type: object
          properties:
            type:
              type: string
              default: 'REFUND_CHARGE'
            payment:
              $ref: '#/components/schemas/OperationPayment'
            participant:
              $ref: '#/components/schemas/BuyerParticipant'
    SurchargeOperation:
      required:
        - payment
        - surcharge
        - participant
      allOf:
        - $ref: '#/components/schemas/BaseOperation'
        - type: object
          properties:
            type:
              type: string
              default: 'SURCHARGE'
            payment:
              $ref: '#/components/schemas/OperationPayment'
            surcharge:
              $ref: '#/components/schemas/Surcharge'
            participant:
              $ref: '#/components/schemas/BuyerParticipant'
    DeductionChargeOperation:
      required:
        - deduction
      allOf:
        - $ref: '#/components/schemas/BaseOperation'
        - type: object
          properties:
            type:
              type: string
              default: 'DEDUCTION_CHARGE'
            deduction:
              $ref: '#/components/schemas/Deduction'
    DeductionIncreaseOperation:
      required:
        - deduction
      allOf:
        - $ref: '#/components/schemas/BaseOperation'
        - type: object
          properties:
            type:
              type: string
              default: 'DEDUCTION_INCREASE'
            deduction:
              $ref: '#/components/schemas/Deduction'
    OperationPayment:
      type: object
      title: OperationPayment
      description: Payment.
      required:
        - id
      properties:
        id:
          type: string
          format: uuid
          description: The payment ID.
          example: 2e2fe432-2115-32f9-82ae-e350e7aa9ed0
    Participant:
      type: object
      required:
        - id
        - login
        - firstName
        - lastName
      properties:
        companyName:
          type: string
          description: Company name.
          example: Allegro
        login:
          type: string
          description: Login.
          example: User_login
        firstName:
          type: string
          description: First name.
          example: Jan
        lastName:
          type: string
          description: Last name.
          example: Nowak
        address:
          $ref: '#/components/schemas/OperationParticipantAddress'
    SellerParticipant:
      title: SellerParticipant
      description: The seller's data.
      allOf:
        - $ref: '#/components/schemas/Participant'
        - type: object
          properties:
            id:
              type: string
              description: The seller's ID.
    BuyerParticipant:
      title: BuyerParticipant
      description: The buyer's data.
      allOf:
        - $ref: '#/components/schemas/Participant'
        - type: object
          properties:
            id:
              type: string
              description: The buyers's ID.
    OperationParticipantAddress:
      type: object
      required:
        - street
        - city
        - postCode
      description: Address.
      properties:
        street:
          type: string
          description: Street.
          example: Grunwaldzka 108
        city:
          type: string
          description: City.
          example: PoznaÅ„
        postCode:
          type: string
          description: Postal code.
          example: 60-166
    Payout:
      type: object
      description: Payout.
      required:
        - id
      properties:
        id:
          type: string
          format: int32
          description: The payout ID.
    Surcharge:
      type: object
      description: Surcharge.
      required:
        - id
      properties:
        id:
          type: string
          format: uuid
          description: The surcharge ID.
          example: 2e2fe432-2115-32f9-82ae-e350e7aa9ed0
    Deduction:
      type: object
      description: Deduction.
      required:
        - id
      properties:
        id:
          type: string
          format: uuid
          description: The deduction ID.
          example: 2e2fe432-2115-32f9-82ae-e350e7aa9ed0
    TecdocSpecification:
      type: object
      required:
        - id
      description: 'Contains additional information describing products from automotive categories.
                    Technical specification is created based on TecDoc database and can only be
                    used while creating offer with assigned product to it.
                    <a href="../../productization" target="_blank">Read more</a>.'
      properties:
        id:
          type: string
          description: 'Identifier of technical specification.'
          example: '470b8513-b786-b7b9-9e7e-2f848729cfd6'
        items:
          type: array
          items:
            $ref: '#/components/schemas/TecdocSpecificationItem'
          description: 'Text representation of the technical specification. Provided for informational purposes only -
                        ignored when creating (Post) or updating (Put) compatibility list in the offer.'
    TecdocSpecificationItem:
      type: object
      properties:
        name:
          type: string
          description: 'Technical specification property name.'
          example: 'Wersja TecDoc'
        values:
          type: array
          items:
            type: string
          description: 'Technical specification property values.'
          example:
            - '0319'
    BlackListResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/BlacklistUser'
        note:
          type: string
          description: Note about reason of blacklisting.
          example: Rude person
        createdAt:
          type: string
          format: date-time
          description: Date and time of the creation in ISO 8601 format.
          example: "2019-05-08T09:45:43.818Z"
    BlackListPagedResponse:
      type: object
      properties:
        blacklistedUsers:
          type: array
          items:
            $ref: '#/components/schemas/BlackListResponse'
        offset:
          type: integer
        limit:
          type: integer
        total:
          type: integer
    BlacklistRequest:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/BlacklistUser'
        note:
          type: string
          description: Note about reason of blacklisting.
          example: Rude person
    BlacklistUser:
      type: object
      properties:
          id:
            type: number
            description: Id of excluded user.
            example: 123456
          login:
            type: string
            description: Login of excluded user.
            example: bad_buyer
    MeResponse:
      type: object
      properties:
        id:
          type: string
          description: User Id.
          example: "46968690"
        login:
          type: string
          description: User login.
          example: "Client:46968690"
        firstName:
          type: string
          description: User's first name.
          example: "Amadeusz"
        lastName:
          type: string
          description: User's last name.
          example: "IksiÅ„ski"
        email:
          type: string
          description: User's email.
          example: "user-email@allegro.pl"
        company:
            $ref: '#/components/schemas/Company'
    Company:
      type: object
      properties:
        name:
          type: string
          description: User's company name.
          example: "Allegro.pl sp. z o.o."
        taxId:
          type: string
          description: User's tax identification number.
          example: "5252674798"
    MyBidResponse:
      type: object
      description: bid response
      title: MyBidResponse
      required:
        - maxAmount
        - highBidder
        - auction
      properties:
        maxAmount:
          $ref: "#/components/schemas/MaxPrice"
        minimalPriceMet:
          type: boolean
          description: >-
            This indicates if the minimal price of the auction has been met or is not set at all. A minimal price can
            be set by the seller and is the minimum amount the seller is willing to sell the item for.
            If the highest bid is not higher than the minimal price when the auction ends, the listing ends and
            the item is not sold.
        highBidder:
          type: boolean
          description: Is this bid currently winning?
        auction:
          type: object
          title: AuctionDetails
          description: Auction details.
          required:
            - currentPrice
          properties:
            currentPrice:
              $ref: "#/components/schemas/CurrentPrice"
    SellerOfferEventsResponse:
      type: object
      required:
        - offerEvents
      properties:
        offerEvents:
          type: array
          description: The list of events.
          items:
            $ref: '#/components/schemas/SellerOfferBaseEvent'
    SellerOfferBaseEvent:
      type: object
      required:
        - id
        - type
        - occurredAt
      description: The data of an event.
      properties:
        id:
          type: string
          description: The ID of the event. It can be used in the `from` parameter of the query.
          example: "MTEzMjQzODU3NA"
          maxLength: 256
        occurredAt:
          type: string
          format: date-time
          description: The date and time when the event occurred, provided in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
          example: "2019-06-26T15:26:43.891Z"
        type:
          type: string
          description: The type of the event.
          example: "OFFER_ACTIVATED"
      discriminator:
        propertyName: type
        mapping:
          OFFER_ACTIVATED: '#/components/schemas/OfferActivatedEvent'
          OFFER_CHANGED: '#/components/schemas/OfferChangedEvent'
          OFFER_ENDED: '#/components/schemas/OfferEndedEvent'
          OFFER_STOCK_CHANGED: '#/components/schemas/OfferStockChangedEvent'
          OFFER_PRICE_CHANGED: '#/components/schemas/OfferPriceChangedEvent'
          OFFER_ARCHIVED: '#/components/schemas/OfferArchivedEvent'
          OFFER_BID_PLACED: '#/components/schemas/OfferBidPlacedEvent'
          OFFER_BID_CANCELED: '#/components/schemas/OfferBidCanceledEvent'
    OfferActivatedEvent:
      allOf:
        - $ref: '#/components/schemas/SellerOfferBaseEvent'
        - type: object
          required:
            - offer
          properties:
            type:
              type: string
              default: 'OFFER_ACTIVATED'
            offer:
              $ref: '#/components/schemas/OfferEventBaseOffer'
    OfferChangedEvent:
      allOf:
        - $ref: '#/components/schemas/SellerOfferBaseEvent'
        - type: object
          required:
            - offer
          properties:
            type:
              type: string
              default: 'OFFER_CHANGED'
            offer:
              $ref: '#/components/schemas/OfferEventBaseOffer'
    OfferEndedEvent:
      allOf:
        - $ref: '#/components/schemas/SellerOfferBaseEvent'
        - type: object
          required:
            - offer
          properties:
            type:
              type: string
              default: 'OFFER_ENDED'
            offer:
              $ref: '#/components/schemas/OfferEventEndedOffer'
    OfferStockChangedEvent:
      allOf:
        - $ref: '#/components/schemas/SellerOfferBaseEvent'
        - type: object
          required:
            - offer
          properties:
            type:
              type: string
              default: 'OFFER_STOCK_CHANGED'
            offer:
              $ref: '#/components/schemas/OfferEventBaseOffer'
    OfferPriceChangedEvent:
      allOf:
        - $ref: '#/components/schemas/SellerOfferBaseEvent'
        - type: object
          required:
            - offer
          properties:
            type:
              type: string
              default: 'OFFER_PRICE_CHANGED'
            offer:
              $ref: '#/components/schemas/OfferEventBaseOffer'
    OfferArchivedEvent:
      allOf:
        - $ref: '#/components/schemas/SellerOfferBaseEvent'
        - type: object
          required:
            - offer
          properties:
            type:
              type: string
              default: "OFFER_ARCHIVED"
            offer:
              $ref: '#/components/schemas/OfferEventBaseOffer'
    OfferBidPlacedEvent:
      allOf:
        - $ref: '#/components/schemas/SellerOfferBaseEvent'
        - type: object
          required:
            - offer
          properties:
            type:
              type: string
              default: "OFFER_BID_PLACED"
            offer:
              $ref: '#/components/schemas/OfferEventBaseOffer'
    OfferBidCanceledEvent:
      allOf:
        - $ref: '#/components/schemas/SellerOfferBaseEvent'
        - type: object
          required:
            - offer
          properties:
            type:
              type: string
              default: "OFFER_BID_CANCELED"
            offer:
              $ref: '#/components/schemas/OfferEventBaseOffer'
    OfferEventBaseOffer:
      type: object
      description: The data of the offer, for which the event occurred.
      required:
        - id
      properties:
        id:
          type: string
          example: "2865624934"
          description: The offer ID.
    OfferEventEndedOffer:
      allOf:
        - $ref: '#/components/schemas/OfferEventBaseOffer'
        - type: object
          required:
            - publication
          properties:
            publication:
              type: object
              description: Information about publication of the given offer.
              required:
                - endedBy
              properties:
                endedBy:
                  type: string
                  enum:
                  - USER
                  - ADMIN
                  - EXPIRATION
                  - ERROR
                  - UNKNOWN
                  description: >-
                    Indicates the reason for ending the offer:
                     - `USER` - offer ended by the seller.
                     - `ADMIN` - offer ended by an admin.
                     - `EXPIRATION` - offer ended because all available items had been sold out or offer duration had expired (valid for
                       offers with specified duration).
                     - `ERROR` - offer ended due to internal problem with offer publication. The publication command responded with
                       success status, but further processing failed.
                     - `UNKNOWN` - in rare cases the reason might be unknown.
    GetBadgeCampaignsList:
      type: object
      required:
      - badgeCampaigns
      properties:
        badgeCampaigns:
          type: array
          items:
            $ref: '#/components/schemas/BadgeCampaign'
          description: 'List of badge campaigns.'
      title: BadgeCampaigns
    BadgeCampaign:
      type: object
      required:
        - id
        - name
        - type
        - eligibility
        - application
        - visibility
        - publication
      properties:
        id:
          type: string
          description: 'Badge campaign ID.'
          example: 'BARGAIN'
        name:
          type: string
          description: 'Badge campaign name.'
          example: 'Strefa Okazji'
        type:
          type: string
          enum:
            - DISCOUNT
            - STANDARD
            - SOURCING
        eligibility:
          $ref: '#/components/schemas/UserCampaignEligibility'
        application:
          $ref: '#/components/schemas/ApplicationTimePolicy'
        visibility:
          $ref: '#/components/schemas/VisibilityTimePolicy'
        publication:
          $ref: '#/components/schemas/PublicationTimePolicy'
    UserCampaignEligibility:
      type: object
      description: 'Summary of user eligibility for participation in the campaign.'
      required:
        - eligible
        - refusalReasons
      properties:
        eligible:
          type: boolean
          description: 'Information whether user is eligible to participate in this campaign.'
        refusalReasons:
          type: array
          items:
            $ref: '#/components/schemas/CampaignRefusalReason'
          title: 'RefusalReason'
          description: 'Information why user is not able to participate in the campaign.'
    CampaignRefusalReason:
      type: object
      required:
        - code
        - messages
      properties:
        code:
          type: string
          description: >-
            Code corresponding to the message. For more information visit
            <a href="/badge/#6" target="_blank">the list of available codes</a>.
        messages:
          type: array
          items:
            $ref: '#/components/schemas/RefusalMessage'
          title: 'RefusalMessage'
          description: 'List of refusal messages.'
    RefusalMessage:
      type: object
      required:
        - text
      properties:
        text:
          type: string
          description: 'Detailed message.'
        link:
          type: string
          description: 'Optional link that redirects to page associated with refusal reason.'
    ApplicationTimePolicy:
      type: object
      description: 'Time period when the campaign is open for applying for badge.'
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - ALWAYS
            - SINCE
            - WITHIN
            - UNTIL
            - NEVER
        from:
          type: string
          description: 'Provided in [ISO 8601 format](link: https://en.wikipedia.org/wiki/ISO_8601).'
          example: '2011-12-03T10:15:30Z'
        to:
          type: string
          description: 'Provided in [ISO 8601 format](link: https://en.wikipedia.org/wiki/ISO_8601).'
          example: '2011-12-03T10:15:30Z'
      example:
        type: "UNTIL"
        to: '2012-12-03T10:15:30Z'
    VisibilityTimePolicy:
      type: object
      description: >-
        Time period when the campaign is visible in
        <a href="https://allegro.pl/moje-allegro/sprzedaz/moje-oferty" target="_blank">My Allegro</a> and
        <a href="https://ms.allegro.pl/seller-offers/" target="_blank">Sales Manager (MenedÅ¼er sprzedaÅ¼y)</a>
        (it is not equal to the time period when badges are displayed on the list of offers or on the offer page).
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - ALWAYS
            - SINCE
            - WITHIN
            - UNTIL
            - NEVER
        from:
          type: string
          description: 'Provided in [ISO 8601 format](link: https://en.wikipedia.org/wiki/ISO_8601).'
          example: '2011-12-03T10:15:30Z'
        to:
          type: string
          description: 'Provided in [ISO 8601 format](link: https://en.wikipedia.org/wiki/ISO_8601).'
          example: '2011-12-03T10:15:30Z'
      example:
        type: "UNTIL"
        to: '2012-12-03T10:15:30Z'
    PublicationTimePolicy:
      type: object
      description: 'Time period when the badge is displayed on the list of offers or on the offer page.'
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - ALWAYS
            - SINCE
            - WITHIN
            - UNTIL
            - NEVER
        from:
          type: string
          description: 'Provided in [ISO 8601 format](link: https://en.wikipedia.org/wiki/ISO_8601).'
          example: '2011-12-03T10:15:30Z'
        to:
          type: string
          description: 'Provided in [ISO 8601 format](link: https://en.wikipedia.org/wiki/ISO_8601).'
          example: '2011-12-03T10:15:30Z'
      example:
        type: "UNTIL"
        to: '2012-12-03T10:15:30Z'
    BadgePublicationTimePolicy:
      type: object
      description: 'Time period when the badge is displayed on the list of offers or on the offer page.'
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - "ALWAYS"
            - "SINCE"
            - "WITHIN"
            - "UNTIL"
            - "NEVER"
        from:
          type: string
          description: 'Provided in [ISO 8601 format](link: https://en.wikipedia.org/wiki/ISO_8601).'
          example: "2011-12-03T10:15:30.000Z"
        to:
          type: string
          description: 'Provided in [ISO 8601 format](link: https://en.wikipedia.org/wiki/ISO_8601).'
          example: "2011-12-03T10:15:30.000Z"
      example:
        type: "UNTIL"
        to: "2012-12-03T10:15:30.000Z"
    BadgeApplicationRequest:
      type: object
      required:
        - campaign
        - offer
      properties:
        campaign:
          $ref: '#/components/schemas/BadgeApplicationCampaign'
        offer:
          $ref: '#/components/schemas/BadgeApplicationOffer'
        prices:
          $ref: '#/components/schemas/BadgeApplicationPrices'
        purchaseConstraints:
          $ref: '#/components/schemas/BadgeApplicationPurchaseConstraints'
    BadgeApplicationCampaign:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          description: 'Badge campaign ID.'
          example: 'BARGAIN'
      title: 'BadgeApplicationCampaign'
    OfferBadgeCampaign:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          description: 'Badge campaign ID.'
          example: 'BARGAIN'
        name:
          type: string
          description: 'Badge campaign name.'
          example: 'Strefa Okazji'
      title: OfferBadgeCampaign
    BadgeApplicationOffer:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          description: 'Offer ID.'
          example: '987654321'
      title: 'BadgeOffer'
    BadgeApplicationPrices:
      type: object
      properties:
        market:
          $ref: '#/components/schemas/BadgeApplicationMarketPrice'
        bargain:
          $ref: '#/components/schemas/BadgeApplicationBargainPrice'
      title: 'BadgePrices'
      description: 'Required by DISCOUNT and SOURCING campaign.'
    BadgeApplicationMarketPrice:
      type: object
      properties:
        amount:
          type: string
          description: 'Positive number. Must be equal to or greater than 1.'
          example: '1.23'
        currency:
          type: string
          description: 'The currency provided as a 3-letter code in accordance with ISO 4217 standard (https://en.wikipedia.org/wiki/ISO_4217). Only PLN values is supported.'
          example: 'PLN'
      title: BadgeApplicationMarketPrice
      description: 'Suggested market price. Required by DISCOUNT campaign.'
    BadgeApplicationBargainPrice:
      type: object
      properties:
        amount:
          type: string
          description: 'Positive number. Must be equal to or greater than 1.'
          example: '1.23'
        currency:
          type: string
          description: 'The currency provided as a 3-letter code in accordance with ISO 4217 standard (https://en.wikipedia.org/wiki/ISO_4217). Only PLN values is supported.'
          example: 'PLN'
      title: BadgeApplicationBargainPrice
      description: 'Bargain price. Required by DISCOUNT and SOURCING campaign.'
    BadgeApplicationPurchaseConstraints:
      type: object
      properties:
        limit:
          $ref: '#/components/schemas/BadgeApplicationPurchaseConstraintsLimit'
      description: 'Constraints of purchase of this offer while it participates in the campaign. Optional for all campaigns types.'
    BadgeApplicationPurchaseConstraintsLimit:
      type: object
      properties:
        perUser:
          $ref: '#/components/schemas/BadgeApplicationPurchaseConstraintsLimitPerUser'
      description: 'Limits of purchase of this offer while it participates in the campaign.'
    BadgeApplicationPurchaseConstraintsLimitPerUser:
      type: object
      properties:
        maxItems:
          type: integer
          format: int32
          minimum: 1
          description: 'Maximum number of items that one user can buy of this offer, while it participates in the campaign.'
          example: 1
      description: 'Limits of purchase of this offer per user while it participates in the campaign.'
    BadgeApplications:
      type: object
      required:
        - badgeApplications
      properties:
        badgeApplications:
          type: array
          items:
            $ref: '#/components/schemas/BadgeApplication'
    BadgeApplication:
      type: object
      required:
        - id
        - createdAt
        - updatedAt
        - campaign
        - offer
        - process
      properties:
        id:
          type: string
          description: 'Badge application ID.'
          example: '01234567-89ab-0123-456789ab'
        createdAt:
          type: string
          description: 'Provided in [ISO 8601 format](link: https://en.wikipedia.org/wiki/ISO_8601).'
          example: '2011-12-03T10:15:30Z'
        updatedAt:
          type: string
          description: 'Provided in [ISO 8601 format](link: https://en.wikipedia.org/wiki/ISO_8601).'
          example: '2011-12-03T10:15:30Z'
        campaign:
          $ref: '#/components/schemas/BadgeApplicationCampaign'
        offer:
          $ref: '#/components/schemas/BadgeApplicationOffer'
        prices:
          $ref: '#/components/schemas/BadgeApplicationPrices'
        process:
          $ref: '#/components/schemas/BadgeApplicationProcess'
        purchaseConstraints:
          $ref: '#/components/schemas/BadgeApplicationPurchaseConstraints'
    BadgeApplicationProcess:
      type: object
      required:
        - status
        - rejectionReasons
      properties:
        status:
          type: string
          enum:
            - REQUESTED
            - PROCESSED
            - DECLINED
        rejectionReasons:
          type: array
          items:
            $ref: '#/components/schemas/BadgeApplicationRejectionReason'
          description: 'A list of rejection reasons for the badge application. Returned for process.status = DECLINED only.'
      description: 'Information about processing of the application.'
    BadgeApplicationRejectionReason:
      type: object
      required:
        - code
        - messages
      properties:
        code:
          type: string
          description: >-
            Code corresponding to the message. For more information visit
            <a href="/badge/#6" target="_blank">the list of available codes</a>.
        messages:
          type: array
          items:
            $ref: '#/components/schemas/BadgeApplicationRejectionReasonMessage'
          description: 'List of messages with rejection reasons.'
      title: 'RejectionReason'
    BadgeApplicationRejectionReasonMessage:
      type: object
      required:
        - text
      properties:
        text:
          type: string
          description: 'Detailed message.'
          example: 'See requirements.'
        link:
          type: string
          description: 'Optional link that redirects to page associated with rejection reason.'
          example: 'https://allegro.pl/regulamin/pl'
    BadgesList:
      type: object
      required:
        - badges
      properties:
        badges:
          type: array
          items:
            $ref: '#/components/schemas/Badge'
      description: 'List of badges'
    Badge:
      type: object
      required:
        - offer
        - campaign
        - process
      properties:
        offer:
          $ref: '#/components/schemas/BadgeApplicationOffer'
        campaign:
          $ref: '#/components/schemas/OfferBadgeCampaign'
        publication:
          $ref: '#/components/schemas/BadgePublicationTimePolicy'
        prices:
          $ref: '#/components/schemas/BadgeApplicationPrices'
        process:
          $ref: '#/components/schemas/BadgeProcess'
    BadgeProcess:
      type: object
      required:
        - status
        - rejectionReasons
      properties:
        status:
          type: string
          enum:
            - IN_VERIFICATION
            - WAITING_FOR_PUBLICATION
            - ACTIVE
            - FINISHED
            - DECLINED
        rejectionReasons:
          type: array
          description: 'A list of messages with rejection reasons. Returned for process.status = DECLINED only.'
          items:
            $ref: '#/components/schemas/BadgeApplicationRejectionReason'
      description: 'Information about badge processing.'
    OfferRating:
      type: object
      properties:
        averageScore:
          type: string
          description: 'Average score of offer rating.'
          example: '4.0'
        scoreDistribution:
          type: array
          description: "List score distribution with count."
          items:
            type: object
            properties:
              name:
                type: string
                description: "Identifier of score: 5, 4, 3, 2, 1."
              count:
                type: integer
                description: "Count of score."
          example:
            [{name: "5", count: 1},
             {name: "4", count: 3},
             {name: "3", count: 1},
             {name: "2", count: 0},
             {name: "1", count: 0}]
        totalResponses:
          type: integer
          description: 'Number of total responses.'
          example: 5
        sizeFeedback:
          type: array
          description: "List of size feedback."
          items:
            type: object
            properties:
              name:
                type: string
                description: "Identifier of sizeFeedback: BIGGER, FIT, SMALLER."
              count:
                type: integer
                description: "Count of sizeFeedback responses."
          example:
            [{name: "BIGGER", count: 0},
             {name: "FIT", count: 2},
             {name: "SMALLER", count: 0}]
    FundraisingCampaigns:
      title: FundraisingCampaigns
      type: object
      properties:
        campaigns:
          type: array
          description: search results
          items:
            $ref: '#/components/schemas/FundraisingCampaign'
    FundraisingCampaign:
      title: FundraisingCampaign
      type: object
      properties:
        id:
          type: string
          description: unique campaign identifier
        name:
          type: string
          description: campaign name
        organization:
          $ref: '#/components/schemas/CharityOrganization'
    CharityOrganization:
      title: CharityOrganization
      type: object
      properties:
        name:
          type: string
          description: organization name
    CustomParameter:
      title: CustomParameter
      type: object
      properties:
        name:
          type: string
          description: custom parameter name
        values:
          type: array
          description: custom parameter values
          items:
            type: string
    PickupDateParcelsProposals:
      title: PickupDateParcelsProposals
      type: object
      properties:
        pickupDateProposals:
          type: array
          description: Pickup date parcels proposals.
          items:
            $ref: '#/components/schemas/PickupDateProposals'
    PickupDateProposals:
      title: PickupDateProposals
      type: object
      properties:
        parcelId:
          type: string
          description: Id of parcel.
          example: "12345"
        proposals:
          type: array
          description: Pickup date proposal.
          items:
            $ref: '#/components/schemas/PickupDateProposal'
    PickupDateProposal:
      title: PickupDateProposal
      type: object
      description: "Parcel pickup date. In pickup request you have to use exactly the same values as you get from `/parcel-management/pickup-date-proposals`."
      properties:
        date:
          type: string
          description: "Shipping date (format YYYY-MM-DD). Example: `2020-05-01`"
          example: "2020-05-01"
        minTime:
          type: string
          description: "Timebox start hour. Example: `10:00`"
          example: "10:00"
        maxTime:
          type: string
          description: "Timebox finish hour. Example: `14:00`"
          example: "14:00"
    DeliveryServices:
      title: DeliveryServices
      type: object
      properties:
        deliveryServices:
          type: array
          description: Delivery services.
          items:
            $ref: '#/components/schemas/DeliveryService'
    DeliveryService:
      title: DeliveryService
      type: object
      properties:
        id:
          type: integer
          description: Delivery service Id.
          example: 12345
        service:
          type: string
          description: Delivery service.
          example: "UPS"
        name:
          type: string
          description: Delivery service name.
          example: "Allegro UPS"
        additionalServices:
          $ref: '#/components/schemas/ParcelAdditionalServicesAvailability'
        owner:
          type: string
          enum:
            - ALLEGRO
            - CLIENT
    ParcelAdditionalServicesAvailability:
      title: AdditionalServices
      type: object
      properties:
        cashOnDelivery:
          $ref: '#/components/schemas/ParcelAdditionalServicesCashOnDeliveryAvailability'
        options:
          type: array
          description: Delivery services.
          items:
            $ref: '#/components/schemas/ParcelAdditionalServicesOptionAvailability'
    ParcelAdditionalServicesCashOnDeliveryAvailability:
      title: CashOnDeliveryAvailability
      type: object
      properties:
        available:
          type: boolean
          description: Indicates if Cash On Delivery is available as part of Additional Services for parcel creation for carrier.
        expressAvailable:
          type: boolean
          description: Postpaid Express service available. Postpaid value is send to parcel sender in one business day after delivery.
    ParcelAdditionalServicesOptionAvailability:
      title: AdditionalServicesAvailableOption
      type: object
      properties:
        name:
          type: string
          description: Name of option that can be passed to additionalServices for parcel creation.
          example: guarantee0930
        description:
          type: string
          description: Brief description of option.
          example: The order is guaranteed to be delivered before 09:30 am.
    ParcelCreationParameters:
      type: object
      required:
        - serviceId
        - receiver
        - pickup
        - items
        - type
      properties:
        serviceId:
          type: integer
          description: Delivery service id.
          example: 12345
        receiver:
          $ref: '#/components/schemas/Receiver'
        pickup:
          $ref: '#/components/schemas/Pickup'
        items:
          type: array
          description: Parcel items details.
          items:
            $ref: '#/components/schemas/ParcelItemDetails'
        type:
          type: string
          enum:
            - PACKAGE
            - DOX
            - PALLET
        label:
          type: object
          properties:
            sender:
              $ref: '#/components/schemas/Sender'
            fileFormat:
              type: string
              description: Label file format.
              enum:
                - PDF
                - ZPL
                - EPL
            referenceNumber:
              type: string
              description: "Parcel identifier in own system. Example: `your_ordering_number`."
              example: "abcd1234"
        additionalServices:
          $ref: '#/components/schemas/ParcelAdditionalServices'
    Sender:
      type: object
      description: Parcel's sender data.
      required:
        - address
      properties:
        address:
          $ref: '#/components/schemas/ParcelCreationAddressWithMandatoryPlace'
        email:
          type: string
          description: Email.
          example: "email@mail.com"
        name:
          type: string
          description: Person name.
          example: "Jan Kowalski"
        company:
          type: string
          description: Company name.
          example: "Allegro.pl sp. z o.o."
        phone:
          type: string
          description: Phone.
          example: "500600700"
    Receiver:
      type: object
      description: Parcel's receiver data.
      required:
        - email
      properties:
        address:
          $ref: '#/components/schemas/ParcelCreationAddress'
        email:
          type: string
          description: Must be a valid buyer email generated by Allegro.
          example: "hamu7udk3p+17454c1b6@allegromail.pl"
        name:
          type: string
          description: Person name.
          example: "Jan Kowalski"
        company:
          type: string
          description: Company name.
          example: "Allegro.pl sp. z o.o."
        phone:
          type: string
          description: Phone.
          example: "500600700"
        pointId:
          type: string
          description: Pickup point id. You can get it from order or directly from courier service.
          example: "1234567"
    Pickup:
      type: object
      description: Parcel's pickup data.
      required:
        - address
      properties:
        address:
          $ref: '#/components/schemas/ParcelCreationAddressWithMandatoryPlace'
        email:
          type: string
          description: Email.
          example: "email@mail.com"
        name:
          type: string
          description: Person name.
          example: "Jan Kowalski"
        company:
          type: string
          description: Company name.
          example: "Allegro.pl sp. z o.o."
        phone:
          type: string
          description: Phone.
          example: "500600700"
        pointId:
          type: string
          description: Pickup point id. You can get it from order or directly from courier service.
          example: "1234567"
    ParcelCreationAddress:
      type: object
      description: Address data.
      properties:
        street:
          type: string
          example: "GÅ‚Ã³wna"
        postCode:
          type: string
          example: "10-200"
        city:
          type: string
          example: "Warszawa"
        countryCode:
          type: string
          description: Country code in ISO 3166-1 alfa-2 format (two-letter code).
          default: "PL"
        county:
          type: string
          description: Required for shipments to Irleand ( county name ), United States ( state abbreviation / ISO code ), Canada ( province postal code / ISO code )
          example: "AL"
    ParcelCreationAddressWithMandatoryPlace:
      type: object
      description: Address data.
      required:
        - street
        - postCode
        - city
      properties:
        street:
          type: string
          description: Street.
          example: "GÅ‚Ã³wna"
        postCode:
          type: string
          description: Post code.
          example: "10-200"
        city:
          type: string
          description: City.
          example: "Warszawa"
        countryCode:
          type: string
          description: Country code in ISO 3166-1 alfa-2 format (two-letter code).
          default: "PL"
        county:
          type: string
          description: Required for shipments to Irleand ( county name ), United States ( state abbreviation / ISO code ), Canada ( province postal code / ISO code )
          example: "AL"
    ParcelItemDetailsWithWaybill:
      type: object
      description: Parcel item details.
      properties:
        waybill:
          type: string
          description: Parcel waybill.
          example: "123"
        dimensions:
          type: object
          description: Parcel dimensions.
          properties:
            height:
              $ref: '#/components/schemas/DimensionItem'
            width:
              $ref: '#/components/schemas/DimensionItem'
            depth:
              $ref: '#/components/schemas/DimensionItem'
        weight:
          type: object
          properties:
            value:
              type: string
              description: Weight value, provided in a string format to avoid rounding errors.
              example: "12.45"
            unit:
              type: string
              description: Weight unit. Currently only `KILOGRAM` is accepted.
              example: "KILOGRAM"
              default: "KILOGRAM"
        description:
          type: string
          description: Parcel description.
          example: "Car wheels."
        value:
          type: object
          description: Declared Parcel value.
          required:
            - amount
            - currency
          properties:
            amount:
              type: string
              description: The amount provided in a string format to avoid rounding errors.
              example: "2.50"
            currency:
              type: string
              description: ISO 4217 currency code. Currently only PLN is available.
              example: "PLN"
    ParcelItemDetails:
      type: object
      description: Parcel item details.
      properties:
        dimensions:
          type: object
          description: Parcel dimensions.
          properties:
            height:
              $ref: '#/components/schemas/DimensionItem'
            width:
              $ref: '#/components/schemas/DimensionItem'
            depth:
              $ref: '#/components/schemas/DimensionItem'
        weight:
          type: object
          properties:
            value:
              type: string
              description: Weight value, provided in a string format to avoid rounding errors.
              example: "12.45"
            unit:
              type: string
              description: Weight unit. Currently only `KILOGRAM` is accepted.
              example: "KILOGRAM"
              default: "KILOGRAM"
        description:
          type: string
          description: Parcel description.
          example: "Car wheels."
        value:
          type: object
          description: Declared Parcel value.
          required:
            - amount
            - currency
          properties:
            amount:
              type: string
              description: The amount provided in a string format to avoid rounding errors.
              example: "2.50"
            currency:
              type: string
              description: ISO 4217 currency code. Currently only PLN is available.
              example: "PLN"
    ParcelDetails:
      type: object
      properties:
        parcelId:
          type: string
          description: Id of parcel.
          example: "1234"
        serviceId:
          type: integer
          description: Delivery service id.
          example: 3456
        receiver:
          $ref: '#/components/schemas/Receiver'
        pickup:
          $ref: '#/components/schemas/Pickup'
        items:
          type: array
          description: Parcel items details.
          items:
            $ref: '#/components/schemas/ParcelItemDetailsWithWaybill'
        type:
          type: string
          enum:
            - PACKAGE
            - DOX
            - PALLET
        label:
          type: object
          properties:
            sender:
              $ref: '#/components/schemas/Sender'
            fileFormat:
              type: string
              description: Label file format.
              enum:
                - PDF
                - ZPL
                - EPL
            referenceNumber:
              type: string
              description: "Parcel identifier in own system. Example: `Ordering number`."
              example: "abcd1234"
        additionalServices:
          $ref: '#/components/schemas/ParcelAdditionalServices'
        state:
          type: string
          enum:
            - DRAFT
            - CREATED
            - CANCELLED
    PickupParcelParameters:
      type: object
      properties:
        parcelIds:
          type: array
          description: Ids of parcels.
          items:
            type: string
            example: "12345"
        pickupDate:
          $ref: '#/components/schemas/PickupDateProposal'
    ParcelAdditionalServices:
      type: object
      description: Additional services.
      properties:
        cashOnDelivery:
          type: object
          required:
            - value
            - accountNumber
            - name
          description: "Cash on delivery service."
          properties:
            value:
              type: object
              description: Postpaid value.
              required:
                - amount
                - currency
              properties:
                amount:
                  type: string
                  description: The amount provided in a string format to avoid rounding errors.
                  example: "2.50"
                currency:
                  type: string
                  description: ISO 4217 currency code. Currently only PLN is available.
                  example: "PLN"
            accountNumber:
              type: string
              example: "12345678901234567890123456"
              description: "Bank account number."
            name:
              type: string
              example: "Jan Kowalski"
              description: "Bank account owner."
            express:
              type: boolean
              default: false
              example: false
              description: "Postpaid Express service. Postpaid value is send to parcel sender in one business day after delivery."
        options:
          type: array
          description: "Additional services provided within delivery. Their description are obtainted with delivery services from `/parcel-management/delivery-services`."
          items:
            type: string
    CancelParcelParameters:
      type: object
      properties:
        parcelId:
          type: string
          description: Id of parcel.
          example: "1234"
    Error200:
      type: object
      properties:
        code:
          type: string
          description: The error code. You can use this code when contacting us about any problems with our systems.
          example: string
        details:
          type: string
          description: >-
            For some cases, this field provides more details regarding the error. This field can not be null.
          example: string
        message:
          type: string
          description: >-
            A message directed to the developer of the program. This message give you some more technical details on
            what exactly has happened.
          example: string
        path:
          type: string
          description: >-
            This field will point to a specific field in object if the error is connected to a problem with such specific
            field. This field can be empty
          example: string
        userMessage:
          type: string
          description: >-
            The message that can be presented directly to your user. It will not contain any technical information. This
            message is translated based on the value of the `Accept-Language` header. By default message in Polish is
            returned.
          example: string
    Error400:
      type: object
      properties:
        code:
          type: string
          description: The error code. You can use this code when contacting us about any problems with our systems.
          example: "VALIDATION_ERROR"
        details:
          type: string
          description: >-
            For some cases, this field provides more details regarding the error. This field can not be null.
          example: "Invalid value: null"
        message:
          type: string
          description: >-
            A message directed to the developer of the program. This message give you some more technical details on
            what exactly has happened.
          example: may not be null
        path:
          type: string
          description: >-
            This field will point to a specific field in object if the error is connected to a problem with such specific
            field. This field can be empty
          example: serviceId
        userMessage:
          type: string
          description: >-
            The message that can be presented directly to your user. It will not contain any technical information. This
            message is translated based on the value of the `Accept-Language` header. By default message in Polish is
            returned.
          example: may not be null
    Error403:
      type: object
      properties:
        code:
          type: string
          description: The error code. You can use this code when contacting us about any problems with our systems.
          example: "AUTHENTICATION_ERROR"
        details:
          type: string
          description: >-
            For some cases, this field provides more details regarding the error.
          example: null
        message:
          type: string
          description: >-
            A message directed to the developer of the program. This message give you some more technical details on
            what exactly has happened.
          example: Brak dostÄ™pu, wiÄ™cej informacji w regulaminie usÅ‚ugi WysyÅ‚am z Allegro
        path:
          type: string
          description: >-
            This field will point to a specific field in object if the error is connected to a problem with such specific
            field.
          example: header.authorization
        userMessage:
          type: string
          description: >-
            The message that can be presented directly to your user. It will not contain any technical information. This
            message is translated based on the value of the 'Accept-Language' header. By default message in Polish is
            returned.
          example: null
    Error404:
      type: object
      properties:
        code:
          type: string
          description: The error code. You can use this code when contacting us about any problems with our systems.
          example: "ERROR"
        details:
          type: string
          description: >-
            For some cases, this field provides more details regarding the error. This field can not be null.
          example: null
        message:
          type: string
          description: >-
            A message directed to the developer of the program. This message give you some more technical details on
            what exactly has happened.
          example: Command doesn't exist
        path:
          type: string
          description: >-
            This field will point to a specific field in object if the error is connected to a problem with such specific
            field. This field can be empty
          example: /parcel-management/parcel-pickup-request-commands/{commandId}
        userMessage:
          type: string
          description: >-
            The message that can be presented directly to your user. It will not contain any technical information. This
            message is translated based on the value of the `Accept-Language` header. By default message in Polish is
            returned.
          example: Command doesn't exist
    Error504:
      type: object
      properties:
        code:
          type: string
          description: The error code. You can use this code when contacting us about any problems with our systems.
          example: "UPSTREAM_SERVICE_TIMEOUT"
        details:
          type: string
          description: >-
            For some cases, this field provides more details regarding the error.
          example: null
        message:
          type: string
          description: >-
            A message directed to the developer of the program. This message give you some more technical details on
            what exactly has happened.
          example: BÅ‚Ä…d poÅ‚Ä…czenia z systemem firmy kurierskiej
        path:
          type: string
          description: >-
            This field will point to a specific field in object if the error is connected to a problem with such specific
            field.
          example: null
        userMessage:
          type: string
          description: >-
            The message that can be presented directly to your user. It will not contain any technical information. This
            message is translated based on the value of the 'Accept-Language' header. By default message in Polish is
            returned.
          example: null
    DimensionItem:
      type: object
      properties:
        value:
          type: integer
          description: Dimension value.
          example: 12
        unit:
          type: string
          description: Dimension unit. Currently only `CENTIMETER` is accepted.
          example: "CENTIMETER"
          default: "CENTIMETER"
